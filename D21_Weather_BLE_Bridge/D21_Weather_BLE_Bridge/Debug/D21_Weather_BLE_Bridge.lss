
D21_Weather_BLE_Bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e68  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000280  20000000  00008e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007e0  20000280  000090e8  00020280  2**2
                  ALLOC
  3 .stack        00002000  20000a60  000098c8  00020280  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004889d  00000000  00000000  00020301  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006ecf  00000000  00000000  00068b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001062a  00000000  00000000  0006fa6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bf8  00000000  00000000  00080097  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001130  00000000  00000000  00080c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000212dc  00000000  00000000  00081dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017adb  00000000  00000000  000a309b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096871  00000000  00000000  000bab76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e90  00000000  00000000  001513e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 2a 00 20 e5 4c 00 00 e1 4c 00 00 e1 4c 00 00     `*. .L...L...L..
	...
      2c:	e1 4c 00 00 00 00 00 00 00 00 00 00 e1 4c 00 00     .L...........L..
      3c:	e1 4c 00 00 e1 4c 00 00 e1 4c 00 00 e1 4c 00 00     .L...L...L...L..
      4c:	e1 4c 00 00 69 35 00 00 e1 4c 00 00 e1 4c 00 00     .L..i5...L...L..
      5c:	e1 4c 00 00 e1 4c 00 00 d5 3a 00 00 e5 3a 00 00     .L...L...:...:..
      6c:	f5 3a 00 00 05 3b 00 00 15 3b 00 00 25 3b 00 00     .:...;...;..%;..
      7c:	e1 4c 00 00 e1 4c 00 00 e1 4c 00 00 e1 4c 00 00     .L...L...L...L..
      8c:	e1 4c 00 00 e1 4c 00 00 e1 4c 00 00 e1 4c 00 00     .L...L...L...L..
      9c:	e1 4c 00 00 e1 4c 00 00 e1 4c 00 00 e1 4c 00 00     .L...L...L...L..
      ac:	e1 4c 00 00 00 00 00 00                             .L......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000280 	.word	0x20000280
      d4:	00000000 	.word	0x00000000
      d8:	00008e68 	.word	0x00008e68

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000284 	.word	0x20000284
     108:	00008e68 	.word	0x00008e68
     10c:	00008e68 	.word	0x00008e68
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00004a71 	.word	0x00004a71
     140:	00005541 	.word	0x00005541
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     180:	b510      	push	{r4, lr}
	if (gpfIsr) {
     182:	4b03      	ldr	r3, [pc, #12]	; (190 <chip_isr+0x10>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d000      	beq.n	18c <chip_isr+0xc>
		gpfIsr();
     18a:	4798      	blx	r3
	}
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000029c 	.word	0x2000029c

00000194 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	b082      	sub	sp, #8
	gpfIsr = NULL;
     198:	2300      	movs	r3, #0
     19a:	4a14      	ldr	r2, [pc, #80]	; (1ec <nm_bsp_init+0x58>)
     19c:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     19e:	ac01      	add	r4, sp, #4
     1a0:	2501      	movs	r5, #1
     1a2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1a4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1a6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1a8:	0021      	movs	r1, r4
     1aa:	2026      	movs	r0, #38	; 0x26
     1ac:	4e10      	ldr	r6, [pc, #64]	; (1f0 <nm_bsp_init+0x5c>)
     1ae:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1b0:	0021      	movs	r1, r4
     1b2:	2025      	movs	r0, #37	; 0x25
     1b4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1b6:	0021      	movs	r1, r4
     1b8:	2027      	movs	r0, #39	; 0x27
     1ba:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <nm_bsp_init+0x60>)
     1be:	2220      	movs	r2, #32
     1c0:	615a      	str	r2, [r3, #20]
     1c2:	3220      	adds	r2, #32
     1c4:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1c6:	4b0c      	ldr	r3, [pc, #48]	; (1f8 <nm_bsp_init+0x64>)
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	421d      	tst	r5, r3
     1cc:	d003      	beq.n	1d6 <nm_bsp_init+0x42>
     1ce:	4b0a      	ldr	r3, [pc, #40]	; (1f8 <nm_bsp_init+0x64>)
     1d0:	681b      	ldr	r3, [r3, #0]
     1d2:	079b      	lsls	r3, r3, #30
     1d4:	d401      	bmi.n	1da <nm_bsp_init+0x46>
	    delay_init();
     1d6:	4b09      	ldr	r3, [pc, #36]	; (1fc <nm_bsp_init+0x68>)
     1d8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1da:	2201      	movs	r2, #1
     1dc:	4b08      	ldr	r3, [pc, #32]	; (200 <nm_bsp_init+0x6c>)
     1de:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1e0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1e4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     1e6:	2000      	movs	r0, #0
     1e8:	b002      	add	sp, #8
     1ea:	bd70      	pop	{r4, r5, r6, pc}
     1ec:	2000029c 	.word	0x2000029c
     1f0:	000036cd 	.word	0x000036cd
     1f4:	41004480 	.word	0x41004480
     1f8:	e000e010 	.word	0xe000e010
     1fc:	00000115 	.word	0x00000115
     200:	2000000a 	.word	0x2000000a

00000204 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     204:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     206:	1e44      	subs	r4, r0, #1
     208:	2800      	cmp	r0, #0
     20a:	d004      	beq.n	216 <nm_bsp_sleep+0x12>
		delay_ms(1);
     20c:	4d02      	ldr	r5, [pc, #8]	; (218 <nm_bsp_sleep+0x14>)
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
	while (u32TimeMsec--) {
     212:	3c01      	subs	r4, #1
     214:	d2fb      	bcs.n	20e <nm_bsp_sleep+0xa>
	}
}
     216:	bd70      	pop	{r4, r5, r6, pc}
     218:	00000155 	.word	0x00000155

0000021c <nm_bsp_reset>:
{
     21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     21e:	4c06      	ldr	r4, [pc, #24]	; (238 <nm_bsp_reset+0x1c>)
     220:	2720      	movs	r7, #32
     222:	6167      	str	r7, [r4, #20]
     224:	2540      	movs	r5, #64	; 0x40
     226:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     228:	2001      	movs	r0, #1
     22a:	4e04      	ldr	r6, [pc, #16]	; (23c <nm_bsp_reset+0x20>)
     22c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     22e:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     230:	200a      	movs	r0, #10
     232:	47b0      	blx	r6
     234:	61a5      	str	r5, [r4, #24]
}
     236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     238:	41004480 	.word	0x41004480
     23c:	00000205 	.word	0x00000205

00000240 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     240:	b510      	push	{r4, lr}
     242:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     244:	4b0e      	ldr	r3, [pc, #56]	; (280 <nm_bsp_register_isr+0x40>)
     246:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     248:	ac01      	add	r4, sp, #4
     24a:	0020      	movs	r0, r4
     24c:	4b0d      	ldr	r3, [pc, #52]	; (284 <nm_bsp_register_isr+0x44>)
     24e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     250:	2324      	movs	r3, #36	; 0x24
     252:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     254:	2300      	movs	r3, #0
     256:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     258:	3301      	adds	r3, #1
     25a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     25c:	3301      	adds	r3, #1
     25e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     260:	0021      	movs	r1, r4
     262:	2004      	movs	r0, #4
     264:	4b08      	ldr	r3, [pc, #32]	; (288 <nm_bsp_register_isr+0x48>)
     266:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     268:	2200      	movs	r2, #0
     26a:	2104      	movs	r1, #4
     26c:	4807      	ldr	r0, [pc, #28]	; (28c <nm_bsp_register_isr+0x4c>)
     26e:	4b08      	ldr	r3, [pc, #32]	; (290 <nm_bsp_register_isr+0x50>)
     270:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     272:	2100      	movs	r1, #0
     274:	2004      	movs	r0, #4
     276:	4b07      	ldr	r3, [pc, #28]	; (294 <nm_bsp_register_isr+0x54>)
     278:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     27a:	b004      	add	sp, #16
     27c:	bd10      	pop	{r4, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	2000029c 	.word	0x2000029c
     284:	00003641 	.word	0x00003641
     288:	00003655 	.word	0x00003655
     28c:	00000181 	.word	0x00000181
     290:	000034fd 	.word	0x000034fd
     294:	00003529 	.word	0x00003529

00000298 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     298:	b510      	push	{r4, lr}
	if (u8Enable) {
     29a:	2800      	cmp	r0, #0
     29c:	d104      	bne.n	2a8 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     29e:	2100      	movs	r1, #0
     2a0:	2004      	movs	r0, #4
     2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <nm_bsp_interrupt_ctrl+0x1c>)
     2a4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2a6:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2a8:	2100      	movs	r1, #0
     2aa:	2004      	movs	r0, #4
     2ac:	4b02      	ldr	r3, [pc, #8]	; (2b8 <nm_bsp_interrupt_ctrl+0x20>)
     2ae:	4798      	blx	r3
     2b0:	e7f9      	b.n	2a6 <nm_bsp_interrupt_ctrl+0xe>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00003549 	.word	0x00003549
     2b8:	00003529 	.word	0x00003529

000002bc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2bc:	b530      	push	{r4, r5, lr}
     2be:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2c0:	4c30      	ldr	r4, [pc, #192]	; (384 <nm_bus_init+0xc8>)
     2c2:	2305      	movs	r3, #5
     2c4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2c6:	2300      	movs	r3, #0
     2c8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2ca:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2cc:	a901      	add	r1, sp, #4
     2ce:	2201      	movs	r2, #1
     2d0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2d2:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2d4:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d6:	2005      	movs	r0, #5
     2d8:	4b2b      	ldr	r3, [pc, #172]	; (388 <nm_bus_init+0xcc>)
     2da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2dc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2de:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2e2:	2900      	cmp	r1, #0
     2e4:	d104      	bne.n	2f0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2e6:	0953      	lsrs	r3, r2, #5
     2e8:	01db      	lsls	r3, r3, #7
     2ea:	4928      	ldr	r1, [pc, #160]	; (38c <nm_bus_init+0xd0>)
     2ec:	468c      	mov	ip, r1
     2ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2f0:	211f      	movs	r1, #31
     2f2:	4011      	ands	r1, r2
     2f4:	2201      	movs	r2, #1
     2f6:	0010      	movs	r0, r2
     2f8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     2fa:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2fc:	ac02      	add	r4, sp, #8
     2fe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     300:	2300      	movs	r3, #0
     302:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     304:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     306:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     308:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     30a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     30c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     30e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     310:	3223      	adds	r2, #35	; 0x23
     312:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     314:	3a18      	subs	r2, #24
     316:	2100      	movs	r1, #0
     318:	a808      	add	r0, sp, #32
     31a:	4b1d      	ldr	r3, [pc, #116]	; (390 <nm_bus_init+0xd4>)
     31c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     31e:	2380      	movs	r3, #128	; 0x80
     320:	025b      	lsls	r3, r3, #9
     322:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     324:	4b1b      	ldr	r3, [pc, #108]	; (394 <nm_bus_init+0xd8>)
     326:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     328:	2301      	movs	r3, #1
     32a:	425b      	negs	r3, r3
     32c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     32e:	4b1a      	ldr	r3, [pc, #104]	; (398 <nm_bus_init+0xdc>)
     330:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     332:	4b1a      	ldr	r3, [pc, #104]	; (39c <nm_bus_init+0xe0>)
     334:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     336:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <nm_bus_init+0xe4>)
     338:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     33a:	0022      	movs	r2, r4
     33c:	4919      	ldr	r1, [pc, #100]	; (3a4 <nm_bus_init+0xe8>)
     33e:	481a      	ldr	r0, [pc, #104]	; (3a8 <nm_bus_init+0xec>)
     340:	4b1a      	ldr	r3, [pc, #104]	; (3ac <nm_bus_init+0xf0>)
     342:	4798      	blx	r3
     344:	2800      	cmp	r0, #0
     346:	d11a      	bne.n	37e <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     348:	4d17      	ldr	r5, [pc, #92]	; (3a8 <nm_bus_init+0xec>)
     34a:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     34c:	0020      	movs	r0, r4
     34e:	4b18      	ldr	r3, [pc, #96]	; (3b0 <nm_bus_init+0xf4>)
     350:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     352:	231f      	movs	r3, #31
     354:	4018      	ands	r0, r3
     356:	3b1e      	subs	r3, #30
     358:	4083      	lsls	r3, r0
     35a:	4a16      	ldr	r2, [pc, #88]	; (3b4 <nm_bus_init+0xf8>)
     35c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     35e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     360:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     362:	2b00      	cmp	r3, #0
     364:	d1fc      	bne.n	360 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     366:	6823      	ldr	r3, [r4, #0]
     368:	2202      	movs	r2, #2
     36a:	4313      	orrs	r3, r2
     36c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     36e:	4b12      	ldr	r3, [pc, #72]	; (3b8 <nm_bus_init+0xfc>)
     370:	4798      	blx	r3
	nm_bsp_sleep(1);
     372:	2001      	movs	r0, #1
     374:	4b11      	ldr	r3, [pc, #68]	; (3bc <nm_bus_init+0x100>)
     376:	4798      	blx	r3
#endif
	return result;
     378:	2000      	movs	r0, #0
}
     37a:	b011      	add	sp, #68	; 0x44
     37c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     37e:	2006      	movs	r0, #6
     380:	4240      	negs	r0, r0
     382:	e7fa      	b.n	37a <nm_bus_init+0xbe>
     384:	200008c4 	.word	0x200008c4
     388:	000036cd 	.word	0x000036cd
     38c:	41004400 	.word	0x41004400
     390:	000058c9 	.word	0x000058c9
     394:	00040003 	.word	0x00040003
     398:	00060003 	.word	0x00060003
     39c:	00070003 	.word	0x00070003
     3a0:	00b71b00 	.word	0x00b71b00
     3a4:	42000800 	.word	0x42000800
     3a8:	200008c8 	.word	0x200008c8
     3ac:	00003b35 	.word	0x00003b35
     3b0:	00003aa5 	.word	0x00003aa5
     3b4:	e000e100 	.word	0xe000e100
     3b8:	0000021d 	.word	0x0000021d
     3bc:	00000205 	.word	0x00000205

000003c0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3c2:	46de      	mov	lr, fp
     3c4:	4657      	mov	r7, sl
     3c6:	464e      	mov	r6, r9
     3c8:	4645      	mov	r5, r8
     3ca:	b5e0      	push	{r5, r6, r7, lr}
     3cc:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3ce:	2803      	cmp	r0, #3
     3d0:	d000      	beq.n	3d4 <nm_bus_ioctl+0x14>
     3d2:	e075      	b.n	4c0 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3d4:	680e      	ldr	r6, [r1, #0]
     3d6:	684d      	ldr	r5, [r1, #4]
     3d8:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     3da:	2200      	movs	r2, #0
     3dc:	466b      	mov	r3, sp
     3de:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3e0:	2d00      	cmp	r5, #0
     3e2:	d027      	beq.n	434 <nm_bus_ioctl+0x74>
     3e4:	2c00      	cmp	r4, #0
     3e6:	d065      	beq.n	4b4 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     3e8:	2e00      	cmp	r6, #0
     3ea:	d100      	bne.n	3ee <nm_bus_ioctl+0x2e>
     3ec:	e077      	b.n	4de <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3ee:	2300      	movs	r3, #0
     3f0:	4698      	mov	r8, r3
     3f2:	2300      	movs	r3, #0
     3f4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     3f6:	2201      	movs	r2, #1
     3f8:	493b      	ldr	r1, [pc, #236]	; (4e8 <nm_bus_ioctl+0x128>)
     3fa:	483c      	ldr	r0, [pc, #240]	; (4ec <nm_bus_ioctl+0x12c>)
     3fc:	4b3c      	ldr	r3, [pc, #240]	; (4f0 <nm_bus_ioctl+0x130>)
     3fe:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     400:	4b3a      	ldr	r3, [pc, #232]	; (4ec <nm_bus_ioctl+0x12c>)
     402:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     404:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     406:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     408:	4699      	mov	r9, r3
			pu8Miso++;
     40a:	4659      	mov	r1, fp
     40c:	424b      	negs	r3, r1
     40e:	4159      	adcs	r1, r3
     410:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     412:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     414:	4653      	mov	r3, sl
     416:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     418:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     41a:	4239      	tst	r1, r7
     41c:	d0fc      	beq.n	418 <nm_bus_ioctl+0x58>
     41e:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     420:	4239      	tst	r1, r7
     422:	d0fc      	beq.n	41e <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     424:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     426:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     428:	4211      	tst	r1, r2
     42a:	d0fc      	beq.n	426 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     42c:	4649      	mov	r1, r9
     42e:	7989      	ldrb	r1, [r1, #6]
     430:	468c      	mov	ip, r1
     432:	e011      	b.n	458 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     434:	2e00      	cmp	r6, #0
     436:	d03a      	beq.n	4ae <nm_bus_ioctl+0xee>
     438:	2c00      	cmp	r4, #0
     43a:	d03e      	beq.n	4ba <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     43c:	2300      	movs	r3, #0
     43e:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     440:	3301      	adds	r3, #1
     442:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     444:	466b      	mov	r3, sp
     446:	1ddd      	adds	r5, r3, #7
     448:	e7d5      	b.n	3f6 <nm_bus_ioctl+0x36>
     44a:	4660      	mov	r0, ip
     44c:	2801      	cmp	r0, #1
     44e:	d00d      	beq.n	46c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     450:	6a98      	ldr	r0, [r3, #40]	; 0x28
     452:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     454:	2900      	cmp	r1, #0
     456:	d00d      	beq.n	474 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     458:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     45a:	4211      	tst	r1, r2
     45c:	d0fc      	beq.n	458 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     45e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     460:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     462:	4210      	tst	r0, r2
     464:	d0f1      	beq.n	44a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     466:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     468:	311e      	adds	r1, #30
     46a:	e7ee      	b.n	44a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     46c:	6a98      	ldr	r0, [r3, #40]	; 0x28
     46e:	05c0      	lsls	r0, r0, #23
     470:	0dc0      	lsrs	r0, r0, #23
     472:	e7ef      	b.n	454 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     474:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     476:	3c01      	subs	r4, #1
     478:	b2a4      	uxth	r4, r4
			pu8Miso++;
     47a:	445d      	add	r5, fp
			pu8Mosi++;
     47c:	4643      	mov	r3, r8
     47e:	4259      	negs	r1, r3
     480:	414b      	adcs	r3, r1
     482:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     484:	2c00      	cmp	r4, #0
     486:	d1c4      	bne.n	412 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     488:	4b18      	ldr	r3, [pc, #96]	; (4ec <nm_bus_ioctl+0x12c>)
     48a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     48c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     48e:	7e0b      	ldrb	r3, [r1, #24]
     490:	4213      	tst	r3, r2
     492:	d0fc      	beq.n	48e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     494:	2200      	movs	r2, #0
     496:	4914      	ldr	r1, [pc, #80]	; (4e8 <nm_bus_ioctl+0x128>)
     498:	4814      	ldr	r0, [pc, #80]	; (4ec <nm_bus_ioctl+0x12c>)
     49a:	4b15      	ldr	r3, [pc, #84]	; (4f0 <nm_bus_ioctl+0x130>)
     49c:	4798      	blx	r3
	return M2M_SUCCESS;
     49e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     4a0:	b003      	add	sp, #12
     4a2:	bc3c      	pop	{r2, r3, r4, r5}
     4a4:	4690      	mov	r8, r2
     4a6:	4699      	mov	r9, r3
     4a8:	46a2      	mov	sl, r4
     4aa:	46ab      	mov	fp, r5
     4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     4ae:	200f      	movs	r0, #15
     4b0:	4240      	negs	r0, r0
     4b2:	e7f5      	b.n	4a0 <nm_bus_ioctl+0xe0>
     4b4:	200f      	movs	r0, #15
     4b6:	4240      	negs	r0, r0
     4b8:	e7f2      	b.n	4a0 <nm_bus_ioctl+0xe0>
     4ba:	200f      	movs	r0, #15
     4bc:	4240      	negs	r0, r0
		break;
     4be:	e7ef      	b.n	4a0 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     4c0:	220e      	movs	r2, #14
     4c2:	32ff      	adds	r2, #255	; 0xff
     4c4:	490b      	ldr	r1, [pc, #44]	; (4f4 <nm_bus_ioctl+0x134>)
     4c6:	480c      	ldr	r0, [pc, #48]	; (4f8 <nm_bus_ioctl+0x138>)
     4c8:	4b0c      	ldr	r3, [pc, #48]	; (4fc <nm_bus_ioctl+0x13c>)
     4ca:	4798      	blx	r3
     4cc:	480c      	ldr	r0, [pc, #48]	; (500 <nm_bus_ioctl+0x140>)
     4ce:	4b0d      	ldr	r3, [pc, #52]	; (504 <nm_bus_ioctl+0x144>)
     4d0:	4798      	blx	r3
     4d2:	200d      	movs	r0, #13
     4d4:	4b0c      	ldr	r3, [pc, #48]	; (508 <nm_bus_ioctl+0x148>)
     4d6:	4798      	blx	r3
			s8Ret = -1;
     4d8:	2001      	movs	r0, #1
     4da:	4240      	negs	r0, r0
	return s8Ret;
     4dc:	e7e0      	b.n	4a0 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     4de:	2301      	movs	r3, #1
     4e0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     4e2:	466b      	mov	r3, sp
     4e4:	1dde      	adds	r6, r3, #7
     4e6:	e784      	b.n	3f2 <nm_bus_ioctl+0x32>
     4e8:	200008c4 	.word	0x200008c4
     4ec:	200008c8 	.word	0x200008c8
     4f0:	00003d0d 	.word	0x00003d0d
     4f4:	00007a68 	.word	0x00007a68
     4f8:	00007a78 	.word	0x00007a78
     4fc:	000058d9 	.word	0x000058d9
     500:	00007a8c 	.word	0x00007a8c
     504:	000059f5 	.word	0x000059f5
     508:	0000590d 	.word	0x0000590d

0000050c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     50c:	b530      	push	{r4, r5, lr}
     50e:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     510:	ab01      	add	r3, sp, #4
     512:	2200      	movs	r2, #0
     514:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     516:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     518:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     51a:	4d13      	ldr	r5, [pc, #76]	; (568 <nm_bus_deinit+0x5c>)
     51c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     51e:	0020      	movs	r0, r4
     520:	4b12      	ldr	r3, [pc, #72]	; (56c <nm_bus_deinit+0x60>)
     522:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     524:	231f      	movs	r3, #31
     526:	4018      	ands	r0, r3
     528:	3b1e      	subs	r3, #30
     52a:	4083      	lsls	r3, r0
     52c:	2280      	movs	r2, #128	; 0x80
     52e:	4910      	ldr	r1, [pc, #64]	; (570 <nm_bus_deinit+0x64>)
     530:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     532:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     534:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     536:	2b00      	cmp	r3, #0
     538:	d1fc      	bne.n	534 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     53a:	338f      	adds	r3, #143	; 0x8f
     53c:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     53e:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     540:	6823      	ldr	r3, [r4, #0]
     542:	2202      	movs	r2, #2
     544:	4393      	bics	r3, r2
     546:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     548:	a901      	add	r1, sp, #4
     54a:	2006      	movs	r0, #6
     54c:	4c09      	ldr	r4, [pc, #36]	; (574 <nm_bus_deinit+0x68>)
     54e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     550:	a901      	add	r1, sp, #4
     552:	2004      	movs	r0, #4
     554:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     556:	a901      	add	r1, sp, #4
     558:	2007      	movs	r0, #7
     55a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     55c:	a901      	add	r1, sp, #4
     55e:	2005      	movs	r0, #5
     560:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     562:	2000      	movs	r0, #0
     564:	b003      	add	sp, #12
     566:	bd30      	pop	{r4, r5, pc}
     568:	200008c8 	.word	0x200008c8
     56c:	00003aa5 	.word	0x00003aa5
     570:	e000e100 	.word	0xe000e100
     574:	000036cd 	.word	0x000036cd

00000578 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     578:	2a00      	cmp	r2, #0
     57a:	d006      	beq.n	58a <m2m_memcpy+0x12>
     57c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     57e:	780b      	ldrb	r3, [r1, #0]
     580:	7003      	strb	r3, [r0, #0]
		pDst++;
     582:	3001      	adds	r0, #1
		pSrc++;
     584:	3101      	adds	r1, #1
	}while(--sz);
     586:	4290      	cmp	r0, r2
     588:	d1f9      	bne.n	57e <m2m_memcpy+0x6>
}
     58a:	4770      	bx	lr

0000058c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     58c:	2a00      	cmp	r2, #0
     58e:	d004      	beq.n	59a <m2m_memset+0xe>
     590:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     592:	7001      	strb	r1, [r0, #0]
		pBuf++;
     594:	3001      	adds	r0, #1
	}while(--sz);
     596:	4290      	cmp	r0, r2
     598:	d1fb      	bne.n	592 <m2m_memset+0x6>
}
     59a:	4770      	bx	lr

0000059c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     59c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     59e:	7802      	ldrb	r2, [r0, #0]
     5a0:	2a00      	cmp	r2, #0
     5a2:	d007      	beq.n	5b4 <m2m_strlen+0x18>
     5a4:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     5a6:	3001      	adds	r0, #1
     5a8:	b280      	uxth	r0, r0
		pcStr++;
     5aa:	3301      	adds	r3, #1
	while(*pcStr)
     5ac:	781a      	ldrb	r2, [r3, #0]
     5ae:	2a00      	cmp	r2, #0
     5b0:	d1f9      	bne.n	5a6 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     5b2:	4770      	bx	lr
	uint16	u16StrLen = 0;
     5b4:	2000      	movs	r0, #0
     5b6:	e7fc      	b.n	5b2 <m2m_strlen+0x16>

000005b8 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     5b8:	4a02      	ldr	r2, [pc, #8]	; (5c4 <isr+0xc>)
     5ba:	78d3      	ldrb	r3, [r2, #3]
     5bc:	3301      	adds	r3, #1
     5be:	b2db      	uxtb	r3, r3
     5c0:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
     5c2:	4770      	bx	lr
     5c4:	20000904 	.word	0x20000904

000005c8 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     5c8:	4770      	bx	lr
	...

000005cc <hif_set_rx_done>:
{
     5cc:	b500      	push	{lr}
     5ce:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     5d0:	2200      	movs	r2, #0
     5d2:	4b0a      	ldr	r3, [pc, #40]	; (5fc <hif_set_rx_done+0x30>)
     5d4:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     5d6:	2001      	movs	r0, #1
     5d8:	4b09      	ldr	r3, [pc, #36]	; (600 <hif_set_rx_done+0x34>)
     5da:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     5dc:	a901      	add	r1, sp, #4
     5de:	4809      	ldr	r0, [pc, #36]	; (604 <hif_set_rx_done+0x38>)
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <hif_set_rx_done+0x3c>)
     5e2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     5e4:	2800      	cmp	r0, #0
     5e6:	d001      	beq.n	5ec <hif_set_rx_done+0x20>
}
     5e8:	b003      	add	sp, #12
     5ea:	bd00      	pop	{pc}
	reg |= NBIT1;
     5ec:	2102      	movs	r1, #2
     5ee:	9b01      	ldr	r3, [sp, #4]
     5f0:	4319      	orrs	r1, r3
     5f2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     5f4:	4803      	ldr	r0, [pc, #12]	; (604 <hif_set_rx_done+0x38>)
     5f6:	4b05      	ldr	r3, [pc, #20]	; (60c <hif_set_rx_done+0x40>)
     5f8:	4798      	blx	r3
     5fa:	e7f5      	b.n	5e8 <hif_set_rx_done+0x1c>
     5fc:	20000904 	.word	0x20000904
     600:	00000299 	.word	0x00000299
     604:	00001070 	.word	0x00001070
     608:	00001ba5 	.word	0x00001ba5
     60c:	00001bb1 	.word	0x00001bb1

00000610 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     610:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
     612:	4b0c      	ldr	r3, [pc, #48]	; (644 <hif_chip_wake+0x34>)
     614:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     616:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     618:	2b00      	cmp	r3, #0
     61a:	d10d      	bne.n	638 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     61c:	4b09      	ldr	r3, [pc, #36]	; (644 <hif_chip_wake+0x34>)
     61e:	785b      	ldrb	r3, [r3, #1]
     620:	2b00      	cmp	r3, #0
     622:	d103      	bne.n	62c <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     624:	4b07      	ldr	r3, [pc, #28]	; (644 <hif_chip_wake+0x34>)
     626:	781b      	ldrb	r3, [r3, #0]
     628:	2b00      	cmp	r3, #0
     62a:	d106      	bne.n	63a <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     62c:	4a05      	ldr	r2, [pc, #20]	; (644 <hif_chip_wake+0x34>)
     62e:	7853      	ldrb	r3, [r2, #1]
     630:	3301      	adds	r3, #1
     632:	b2db      	uxtb	r3, r3
     634:	7053      	strb	r3, [r2, #1]
     636:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     638:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     63a:	4b03      	ldr	r3, [pc, #12]	; (648 <hif_chip_wake+0x38>)
     63c:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     63e:	2800      	cmp	r0, #0
     640:	d0f4      	beq.n	62c <hif_chip_wake+0x1c>
     642:	e7f9      	b.n	638 <hif_chip_wake+0x28>
     644:	20000904 	.word	0x20000904
     648:	0000178d 	.word	0x0000178d

0000064c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     64c:	4b05      	ldr	r3, [pc, #20]	; (664 <hif_chip_sleep_sc+0x18>)
     64e:	785b      	ldrb	r3, [r3, #1]
     650:	2b00      	cmp	r3, #0
     652:	d004      	beq.n	65e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     654:	4a03      	ldr	r2, [pc, #12]	; (664 <hif_chip_sleep_sc+0x18>)
     656:	7853      	ldrb	r3, [r2, #1]
     658:	3b01      	subs	r3, #1
     65a:	b2db      	uxtb	r3, r3
     65c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     65e:	2000      	movs	r0, #0
     660:	4770      	bx	lr
     662:	46c0      	nop			; (mov r8, r8)
     664:	20000904 	.word	0x20000904

00000668 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     668:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     66a:	4b0b      	ldr	r3, [pc, #44]	; (698 <hif_chip_sleep+0x30>)
     66c:	785b      	ldrb	r3, [r3, #1]
     66e:	2b00      	cmp	r3, #0
     670:	d004      	beq.n	67c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     672:	4a09      	ldr	r2, [pc, #36]	; (698 <hif_chip_sleep+0x30>)
     674:	7853      	ldrb	r3, [r2, #1]
     676:	3b01      	subs	r3, #1
     678:	b2db      	uxtb	r3, r3
     67a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <hif_chip_sleep+0x30>)
     67e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     680:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     682:	2b00      	cmp	r3, #0
     684:	d103      	bne.n	68e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     686:	4b04      	ldr	r3, [pc, #16]	; (698 <hif_chip_sleep+0x30>)
     688:	781b      	ldrb	r3, [r3, #0]
     68a:	2b00      	cmp	r3, #0
     68c:	d100      	bne.n	690 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
     68e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     690:	4b02      	ldr	r3, [pc, #8]	; (69c <hif_chip_sleep+0x34>)
     692:	4798      	blx	r3
     694:	e7fb      	b.n	68e <hif_chip_sleep+0x26>
     696:	46c0      	nop			; (mov r8, r8)
     698:	20000904 	.word	0x20000904
     69c:	00001725 	.word	0x00001725

000006a0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6a2:	46de      	mov	lr, fp
     6a4:	4657      	mov	r7, sl
     6a6:	b580      	push	{r7, lr}
     6a8:	b089      	sub	sp, #36	; 0x24
     6aa:	4683      	mov	fp, r0
     6ac:	468a      	mov	sl, r1
     6ae:	9201      	str	r2, [sp, #4]
     6b0:	9300      	str	r3, [sp, #0]
     6b2:	ab10      	add	r3, sp, #64	; 0x40
     6b4:	cb80      	ldmia	r3!, {r7}
     6b6:	881e      	ldrh	r6, [r3, #0]
     6b8:	ab12      	add	r3, sp, #72	; 0x48
     6ba:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6bc:	227f      	movs	r2, #127	; 0x7f
     6be:	400a      	ands	r2, r1
     6c0:	ab07      	add	r3, sp, #28
     6c2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     6c4:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6c6:	2208      	movs	r2, #8
     6c8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     6ca:	2f00      	cmp	r7, #0
     6cc:	d03d      	beq.n	74a <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6ce:	885a      	ldrh	r2, [r3, #2]
     6d0:	1992      	adds	r2, r2, r6
     6d2:	18aa      	adds	r2, r5, r2
     6d4:	b292      	uxth	r2, r2
     6d6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
     6d8:	4b69      	ldr	r3, [pc, #420]	; (880 <hif_send+0x1e0>)
     6da:	4798      	blx	r3
     6dc:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6de:	d000      	beq.n	6e2 <hif_send+0x42>
     6e0:	e0c1      	b.n	866 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     6e2:	2300      	movs	r3, #0
     6e4:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     6e6:	aa02      	add	r2, sp, #8
     6e8:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     6ea:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     6ec:	9b04      	ldr	r3, [sp, #16]
     6ee:	465a      	mov	r2, fp
     6f0:	431a      	orrs	r2, r3
     6f2:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     6f4:	9a04      	ldr	r2, [sp, #16]
     6f6:	4653      	mov	r3, sl
     6f8:	021b      	lsls	r3, r3, #8
     6fa:	4313      	orrs	r3, r2
     6fc:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     6fe:	ab07      	add	r3, sp, #28
     700:	885b      	ldrh	r3, [r3, #2]
     702:	9a04      	ldr	r2, [sp, #16]
     704:	041b      	lsls	r3, r3, #16
     706:	4313      	orrs	r3, r2
     708:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     70a:	9904      	ldr	r1, [sp, #16]
     70c:	485d      	ldr	r0, [pc, #372]	; (884 <hif_send+0x1e4>)
     70e:	4b5e      	ldr	r3, [pc, #376]	; (888 <hif_send+0x1e8>)
     710:	4798      	blx	r3
     712:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     714:	d157      	bne.n	7c6 <hif_send+0x126>

		reg = 0UL;
     716:	2300      	movs	r3, #0
     718:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     71a:	9b04      	ldr	r3, [sp, #16]
     71c:	2202      	movs	r2, #2
     71e:	4313      	orrs	r3, r2
     720:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     722:	9904      	ldr	r1, [sp, #16]
     724:	4859      	ldr	r0, [pc, #356]	; (88c <hif_send+0x1ec>)
     726:	4b58      	ldr	r3, [pc, #352]	; (888 <hif_send+0x1e8>)
     728:	4798      	blx	r3
     72a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     72c:	d14b      	bne.n	7c6 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     72e:	2200      	movs	r2, #0
     730:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     732:	ab02      	add	r3, sp, #8
     734:	80da      	strh	r2, [r3, #6]
     736:	3306      	adds	r3, #6
     738:	881b      	ldrh	r3, [r3, #0]
     73a:	b29b      	uxth	r3, r3
     73c:	4a54      	ldr	r2, [pc, #336]	; (890 <hif_send+0x1f0>)
     73e:	4293      	cmp	r3, r2
     740:	d849      	bhi.n	7d6 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     742:	4c54      	ldr	r4, [pc, #336]	; (894 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     744:	4b54      	ldr	r3, [pc, #336]	; (898 <hif_send+0x1f8>)
     746:	469a      	mov	sl, r3
     748:	e017      	b.n	77a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     74a:	ab07      	add	r3, sp, #28
     74c:	885a      	ldrh	r2, [r3, #2]
     74e:	9900      	ldr	r1, [sp, #0]
     750:	468c      	mov	ip, r1
     752:	4462      	add	r2, ip
     754:	b292      	uxth	r2, r2
     756:	805a      	strh	r2, [r3, #2]
     758:	e7be      	b.n	6d8 <hif_send+0x38>
				nm_bsp_sleep(1);
     75a:	2001      	movs	r0, #1
     75c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
     75e:	9b04      	ldr	r3, [sp, #16]
     760:	079b      	lsls	r3, r3, #30
     762:	d528      	bpl.n	7b6 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     764:	ab02      	add	r3, sp, #8
     766:	88da      	ldrh	r2, [r3, #6]
     768:	3201      	adds	r2, #1
     76a:	b292      	uxth	r2, r2
     76c:	80da      	strh	r2, [r3, #6]
     76e:	3306      	adds	r3, #6
     770:	881b      	ldrh	r3, [r3, #0]
     772:	b29b      	uxth	r3, r3
     774:	4a46      	ldr	r2, [pc, #280]	; (890 <hif_send+0x1f0>)
     776:	4293      	cmp	r3, r2
     778:	d82d      	bhi.n	7d6 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     77a:	a904      	add	r1, sp, #16
     77c:	4843      	ldr	r0, [pc, #268]	; (88c <hif_send+0x1ec>)
     77e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     780:	2800      	cmp	r0, #0
     782:	d128      	bne.n	7d6 <hif_send+0x136>
			if(cnt >= 500) {
     784:	ab02      	add	r3, sp, #8
     786:	3306      	adds	r3, #6
     788:	881b      	ldrh	r3, [r3, #0]
     78a:	b29b      	uxth	r3, r3
     78c:	22f4      	movs	r2, #244	; 0xf4
     78e:	32ff      	adds	r2, #255	; 0xff
     790:	4293      	cmp	r3, r2
     792:	d9e4      	bls.n	75e <hif_send+0xbe>
				if(cnt < 501) {
     794:	ab02      	add	r3, sp, #8
     796:	3306      	adds	r3, #6
     798:	881b      	ldrh	r3, [r3, #0]
     79a:	b29b      	uxth	r3, r3
     79c:	3201      	adds	r2, #1
     79e:	4293      	cmp	r3, r2
     7a0:	d8db      	bhi.n	75a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     7a2:	483e      	ldr	r0, [pc, #248]	; (89c <hif_send+0x1fc>)
     7a4:	4b3e      	ldr	r3, [pc, #248]	; (8a0 <hif_send+0x200>)
     7a6:	4798      	blx	r3
     7a8:	483e      	ldr	r0, [pc, #248]	; (8a4 <hif_send+0x204>)
     7aa:	4b3f      	ldr	r3, [pc, #252]	; (8a8 <hif_send+0x208>)
     7ac:	4798      	blx	r3
     7ae:	200d      	movs	r0, #13
     7b0:	4b3e      	ldr	r3, [pc, #248]	; (8ac <hif_send+0x20c>)
     7b2:	4798      	blx	r3
     7b4:	e7d1      	b.n	75a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     7b6:	a905      	add	r1, sp, #20
     7b8:	483d      	ldr	r0, [pc, #244]	; (8b0 <hif_send+0x210>)
     7ba:	4b36      	ldr	r3, [pc, #216]	; (894 <hif_send+0x1f4>)
     7bc:	4798      	blx	r3
     7be:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
     7c0:	d009      	beq.n	7d6 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     7c2:	2300      	movs	r3, #0
     7c4:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     7c6:	4b3b      	ldr	r3, [pc, #236]	; (8b4 <hif_send+0x214>)
     7c8:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     7ca:	0020      	movs	r0, r4
     7cc:	b009      	add	sp, #36	; 0x24
     7ce:	bc0c      	pop	{r2, r3}
     7d0:	4692      	mov	sl, r2
     7d2:	469b      	mov	fp, r3
     7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
     7d6:	9b05      	ldr	r3, [sp, #20]
     7d8:	2b00      	cmp	r3, #0
     7da:	d03f      	beq.n	85c <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     7dc:	9b05      	ldr	r3, [sp, #20]
     7de:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     7e0:	a907      	add	r1, sp, #28
     7e2:	884b      	ldrh	r3, [r1, #2]
     7e4:	b29b      	uxth	r3, r3
     7e6:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     7e8:	9806      	ldr	r0, [sp, #24]
     7ea:	2208      	movs	r2, #8
     7ec:	4b32      	ldr	r3, [pc, #200]	; (8b8 <hif_send+0x218>)
     7ee:	4798      	blx	r3
     7f0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7f2:	d1e8      	bne.n	7c6 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     7f4:	9b06      	ldr	r3, [sp, #24]
     7f6:	3308      	adds	r3, #8
     7f8:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     7fa:	9b01      	ldr	r3, [sp, #4]
     7fc:	2b00      	cmp	r3, #0
     7fe:	d00b      	beq.n	818 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     800:	9806      	ldr	r0, [sp, #24]
     802:	9a00      	ldr	r2, [sp, #0]
     804:	0019      	movs	r1, r3
     806:	4b2c      	ldr	r3, [pc, #176]	; (8b8 <hif_send+0x218>)
     808:	4798      	blx	r3
     80a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     80c:	d1db      	bne.n	7c6 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     80e:	9b06      	ldr	r3, [sp, #24]
     810:	9a00      	ldr	r2, [sp, #0]
     812:	4694      	mov	ip, r2
     814:	4463      	add	r3, ip
     816:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     818:	2f00      	cmp	r7, #0
     81a:	d00e      	beq.n	83a <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     81c:	9b06      	ldr	r3, [sp, #24]
     81e:	9a00      	ldr	r2, [sp, #0]
     820:	1aad      	subs	r5, r5, r2
     822:	18ed      	adds	r5, r5, r3
     824:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     826:	9806      	ldr	r0, [sp, #24]
     828:	0032      	movs	r2, r6
     82a:	0039      	movs	r1, r7
     82c:	4b22      	ldr	r3, [pc, #136]	; (8b8 <hif_send+0x218>)
     82e:	4798      	blx	r3
     830:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     832:	d1c8      	bne.n	7c6 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     834:	9b06      	ldr	r3, [sp, #24]
     836:	18f3      	adds	r3, r6, r3
     838:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     83a:	9b05      	ldr	r3, [sp, #20]
     83c:	009b      	lsls	r3, r3, #2
     83e:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     840:	9b04      	ldr	r3, [sp, #16]
     842:	2202      	movs	r2, #2
     844:	4313      	orrs	r3, r2
     846:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     848:	9904      	ldr	r1, [sp, #16]
     84a:	481c      	ldr	r0, [pc, #112]	; (8bc <hif_send+0x21c>)
     84c:	4b0e      	ldr	r3, [pc, #56]	; (888 <hif_send+0x1e8>)
     84e:	4798      	blx	r3
     850:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     852:	d1b8      	bne.n	7c6 <hif_send+0x126>
 	ret = hif_chip_sleep();
     854:	4b1a      	ldr	r3, [pc, #104]	; (8c0 <hif_send+0x220>)
     856:	4798      	blx	r3
     858:	0004      	movs	r4, r0
	return ret;
     85a:	e7b6      	b.n	7ca <hif_send+0x12a>
			ret = hif_chip_sleep();
     85c:	4b18      	ldr	r3, [pc, #96]	; (8c0 <hif_send+0x220>)
     85e:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     860:	2403      	movs	r4, #3
     862:	4264      	negs	r4, r4
			goto ERR2;
     864:	e7b1      	b.n	7ca <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     866:	22cf      	movs	r2, #207	; 0xcf
     868:	0052      	lsls	r2, r2, #1
     86a:	4916      	ldr	r1, [pc, #88]	; (8c4 <hif_send+0x224>)
     86c:	4816      	ldr	r0, [pc, #88]	; (8c8 <hif_send+0x228>)
     86e:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <hif_send+0x200>)
     870:	4798      	blx	r3
     872:	4816      	ldr	r0, [pc, #88]	; (8cc <hif_send+0x22c>)
     874:	4b0c      	ldr	r3, [pc, #48]	; (8a8 <hif_send+0x208>)
     876:	4798      	blx	r3
     878:	200d      	movs	r0, #13
     87a:	4b0c      	ldr	r3, [pc, #48]	; (8ac <hif_send+0x20c>)
     87c:	4798      	blx	r3
		goto ERR2;
     87e:	e7a4      	b.n	7ca <hif_send+0x12a>
     880:	00000611 	.word	0x00000611
     884:	0000108c 	.word	0x0000108c
     888:	00001bb1 	.word	0x00001bb1
     88c:	00001078 	.word	0x00001078
     890:	000003e7 	.word	0x000003e7
     894:	00001ba5 	.word	0x00001ba5
     898:	00000205 	.word	0x00000205
     89c:	00007da8 	.word	0x00007da8
     8a0:	000058d9 	.word	0x000058d9
     8a4:	00007db4 	.word	0x00007db4
     8a8:	000059f5 	.word	0x000059f5
     8ac:	0000590d 	.word	0x0000590d
     8b0:	00150400 	.word	0x00150400
     8b4:	0000064d 	.word	0x0000064d
     8b8:	00001c25 	.word	0x00001c25
     8bc:	0000106c 	.word	0x0000106c
     8c0:	00000669 	.word	0x00000669
     8c4:	00007ac0 	.word	0x00007ac0
     8c8:	00007a78 	.word	0x00007a78
     8cc:	00007dc4 	.word	0x00007dc4

000008d0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d2:	46ce      	mov	lr, r9
     8d4:	4647      	mov	r7, r8
     8d6:	b580      	push	{r7, lr}
     8d8:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
     8da:	2200      	movs	r2, #0
     8dc:	4bd1      	ldr	r3, [pc, #836]	; (c24 <hif_handle_isr+0x354>)
     8de:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
     8e0:	4699      	mov	r9, r3
     8e2:	4698      	mov	r8, r3
     8e4:	e080      	b.n	9e8 <hif_handle_isr+0x118>
				gstrHifCxt.u32RxAddr = address;
     8e6:	4bcf      	ldr	r3, [pc, #828]	; (c24 <hif_handle_isr+0x354>)
     8e8:	9a05      	ldr	r2, [sp, #20]
     8ea:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
     8ec:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     8ee:	af04      	add	r7, sp, #16
     8f0:	2204      	movs	r2, #4
     8f2:	0039      	movs	r1, r7
     8f4:	9805      	ldr	r0, [sp, #20]
     8f6:	4bcc      	ldr	r3, [pc, #816]	; (c28 <hif_handle_isr+0x358>)
     8f8:	4798      	blx	r3
     8fa:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     8fc:	887b      	ldrh	r3, [r7, #2]
     8fe:	b29b      	uxth	r3, r3
     900:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     902:	2800      	cmp	r0, #0
     904:	d133      	bne.n	96e <hif_handle_isr+0x9e>
				if(strHif.u16Length != size)
     906:	ab04      	add	r3, sp, #16
     908:	885b      	ldrh	r3, [r3, #2]
     90a:	b29b      	uxth	r3, r3
     90c:	429e      	cmp	r6, r3
     90e:	d004      	beq.n	91a <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
     910:	ab04      	add	r3, sp, #16
     912:	885b      	ldrh	r3, [r3, #2]
     914:	1af3      	subs	r3, r6, r3
     916:	2b04      	cmp	r3, #4
     918:	dc39      	bgt.n	98e <hif_handle_isr+0xbe>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     91a:	ab04      	add	r3, sp, #16
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b01      	cmp	r3, #1
     920:	d04e      	beq.n	9c0 <hif_handle_isr+0xf0>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     922:	ab04      	add	r3, sp, #16
     924:	781b      	ldrb	r3, [r3, #0]
     926:	2b02      	cmp	r3, #2
     928:	d07c      	beq.n	a24 <hif_handle_isr+0x154>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     92a:	ab04      	add	r3, sp, #16
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	2b04      	cmp	r3, #4
     930:	d100      	bne.n	934 <hif_handle_isr+0x64>
     932:	e094      	b.n	a5e <hif_handle_isr+0x18e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     934:	ab04      	add	r3, sp, #16
     936:	781b      	ldrb	r3, [r3, #0]
     938:	2b06      	cmp	r3, #6
     93a:	d100      	bne.n	93e <hif_handle_isr+0x6e>
     93c:	e0ac      	b.n	a98 <hif_handle_isr+0x1c8>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     93e:	ab04      	add	r3, sp, #16
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2b07      	cmp	r3, #7
     944:	d100      	bne.n	948 <hif_handle_isr+0x78>
     946:	e0c3      	b.n	ad0 <hif_handle_isr+0x200>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     948:	ab04      	add	r3, sp, #16
     94a:	781b      	ldrb	r3, [r3, #0]
     94c:	2b05      	cmp	r3, #5
     94e:	d100      	bne.n	952 <hif_handle_isr+0x82>
     950:	e0da      	b.n	b08 <hif_handle_isr+0x238>
					M2M_ERR("(hif) invalid group ID\n");
     952:	4ab6      	ldr	r2, [pc, #728]	; (c2c <hif_handle_isr+0x35c>)
     954:	49b6      	ldr	r1, [pc, #728]	; (c30 <hif_handle_isr+0x360>)
     956:	48b7      	ldr	r0, [pc, #732]	; (c34 <hif_handle_isr+0x364>)
     958:	4bb7      	ldr	r3, [pc, #732]	; (c38 <hif_handle_isr+0x368>)
     95a:	4798      	blx	r3
     95c:	48b7      	ldr	r0, [pc, #732]	; (c3c <hif_handle_isr+0x36c>)
     95e:	4bb8      	ldr	r3, [pc, #736]	; (c40 <hif_handle_isr+0x370>)
     960:	4798      	blx	r3
     962:	200d      	movs	r0, #13
     964:	4bb7      	ldr	r3, [pc, #732]	; (c44 <hif_handle_isr+0x374>)
     966:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     968:	2406      	movs	r4, #6
     96a:	4264      	negs	r4, r4
     96c:	e11a      	b.n	ba4 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
     96e:	22da      	movs	r2, #218	; 0xda
     970:	32ff      	adds	r2, #255	; 0xff
     972:	49af      	ldr	r1, [pc, #700]	; (c30 <hif_handle_isr+0x360>)
     974:	48af      	ldr	r0, [pc, #700]	; (c34 <hif_handle_isr+0x364>)
     976:	4bb0      	ldr	r3, [pc, #704]	; (c38 <hif_handle_isr+0x368>)
     978:	4798      	blx	r3
     97a:	48b3      	ldr	r0, [pc, #716]	; (c48 <hif_handle_isr+0x378>)
     97c:	4bb0      	ldr	r3, [pc, #704]	; (c40 <hif_handle_isr+0x370>)
     97e:	4798      	blx	r3
     980:	200d      	movs	r0, #13
     982:	4bb0      	ldr	r3, [pc, #704]	; (c44 <hif_handle_isr+0x374>)
     984:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     986:	2001      	movs	r0, #1
     988:	4bb0      	ldr	r3, [pc, #704]	; (c4c <hif_handle_isr+0x37c>)
     98a:	4798      	blx	r3
     98c:	e10a      	b.n	ba4 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     98e:	22f1      	movs	r2, #241	; 0xf1
     990:	0052      	lsls	r2, r2, #1
     992:	49a7      	ldr	r1, [pc, #668]	; (c30 <hif_handle_isr+0x360>)
     994:	48a7      	ldr	r0, [pc, #668]	; (c34 <hif_handle_isr+0x364>)
     996:	4ca8      	ldr	r4, [pc, #672]	; (c38 <hif_handle_isr+0x368>)
     998:	47a0      	blx	r4
     99a:	a904      	add	r1, sp, #16
     99c:	884a      	ldrh	r2, [r1, #2]
     99e:	b292      	uxth	r2, r2
     9a0:	780b      	ldrb	r3, [r1, #0]
     9a2:	b2db      	uxtb	r3, r3
     9a4:	7849      	ldrb	r1, [r1, #1]
     9a6:	9100      	str	r1, [sp, #0]
     9a8:	0031      	movs	r1, r6
     9aa:	48a9      	ldr	r0, [pc, #676]	; (c50 <hif_handle_isr+0x380>)
     9ac:	47a0      	blx	r4
     9ae:	200d      	movs	r0, #13
     9b0:	4ba4      	ldr	r3, [pc, #656]	; (c44 <hif_handle_isr+0x374>)
     9b2:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     9b4:	2001      	movs	r0, #1
     9b6:	4ba5      	ldr	r3, [pc, #660]	; (c4c <hif_handle_isr+0x37c>)
     9b8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     9ba:	2406      	movs	r4, #6
     9bc:	4264      	negs	r4, r4
     9be:	e0f1      	b.n	ba4 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
     9c0:	4b98      	ldr	r3, [pc, #608]	; (c24 <hif_handle_isr+0x354>)
     9c2:	691b      	ldr	r3, [r3, #16]
     9c4:	2b00      	cmp	r3, #0
     9c6:	d020      	beq.n	a0a <hif_handle_isr+0x13a>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9c8:	4b96      	ldr	r3, [pc, #600]	; (c24 <hif_handle_isr+0x354>)
     9ca:	691b      	ldr	r3, [r3, #16]
     9cc:	aa04      	add	r2, sp, #16
     9ce:	7850      	ldrb	r0, [r2, #1]
     9d0:	b2c0      	uxtb	r0, r0
     9d2:	8851      	ldrh	r1, [r2, #2]
     9d4:	9a05      	ldr	r2, [sp, #20]
     9d6:	3208      	adds	r2, #8
     9d8:	3908      	subs	r1, #8
     9da:	b289      	uxth	r1, r1
     9dc:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     9de:	4b91      	ldr	r3, [pc, #580]	; (c24 <hif_handle_isr+0x354>)
     9e0:	789b      	ldrb	r3, [r3, #2]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d000      	beq.n	9e8 <hif_handle_isr+0x118>
     9e6:	e0a0      	b.n	b2a <hif_handle_isr+0x25a>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
     9e8:	464b      	mov	r3, r9
     9ea:	78db      	ldrb	r3, [r3, #3]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d100      	bne.n	9f2 <hif_handle_isr+0x122>
     9f0:	e15c      	b.n	cac <hif_handle_isr+0x3dc>
     9f2:	4643      	mov	r3, r8
     9f4:	791b      	ldrb	r3, [r3, #4]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d000      	beq.n	9fc <hif_handle_isr+0x12c>
     9fa:	e157      	b.n	cac <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     9fc:	4a89      	ldr	r2, [pc, #548]	; (c24 <hif_handle_isr+0x354>)
     9fe:	78d3      	ldrb	r3, [r2, #3]
     a00:	3b01      	subs	r3, #1
     a02:	b2db      	uxtb	r3, r3
     a04:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     a06:	4d93      	ldr	r5, [pc, #588]	; (c54 <hif_handle_isr+0x384>)
     a08:	e0d7      	b.n	bba <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
     a0a:	22f7      	movs	r2, #247	; 0xf7
     a0c:	0052      	lsls	r2, r2, #1
     a0e:	4988      	ldr	r1, [pc, #544]	; (c30 <hif_handle_isr+0x360>)
     a10:	4888      	ldr	r0, [pc, #544]	; (c34 <hif_handle_isr+0x364>)
     a12:	4b89      	ldr	r3, [pc, #548]	; (c38 <hif_handle_isr+0x368>)
     a14:	4798      	blx	r3
     a16:	4890      	ldr	r0, [pc, #576]	; (c58 <hif_handle_isr+0x388>)
     a18:	4b89      	ldr	r3, [pc, #548]	; (c40 <hif_handle_isr+0x370>)
     a1a:	4798      	blx	r3
     a1c:	200d      	movs	r0, #13
     a1e:	4b89      	ldr	r3, [pc, #548]	; (c44 <hif_handle_isr+0x374>)
     a20:	4798      	blx	r3
     a22:	e7dc      	b.n	9de <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfIpCb)
     a24:	4b7f      	ldr	r3, [pc, #508]	; (c24 <hif_handle_isr+0x354>)
     a26:	695b      	ldr	r3, [r3, #20]
     a28:	2b00      	cmp	r3, #0
     a2a:	d00b      	beq.n	a44 <hif_handle_isr+0x174>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a2c:	4b7d      	ldr	r3, [pc, #500]	; (c24 <hif_handle_isr+0x354>)
     a2e:	695b      	ldr	r3, [r3, #20]
     a30:	aa04      	add	r2, sp, #16
     a32:	7850      	ldrb	r0, [r2, #1]
     a34:	b2c0      	uxtb	r0, r0
     a36:	8851      	ldrh	r1, [r2, #2]
     a38:	9a05      	ldr	r2, [sp, #20]
     a3a:	3208      	adds	r2, #8
     a3c:	3908      	subs	r1, #8
     a3e:	b289      	uxth	r1, r1
     a40:	4798      	blx	r3
     a42:	e7cc      	b.n	9de <hif_handle_isr+0x10e>
						M2M_ERR("Scoket callback is not registered\n");
     a44:	22fb      	movs	r2, #251	; 0xfb
     a46:	0052      	lsls	r2, r2, #1
     a48:	4979      	ldr	r1, [pc, #484]	; (c30 <hif_handle_isr+0x360>)
     a4a:	487a      	ldr	r0, [pc, #488]	; (c34 <hif_handle_isr+0x364>)
     a4c:	4b7a      	ldr	r3, [pc, #488]	; (c38 <hif_handle_isr+0x368>)
     a4e:	4798      	blx	r3
     a50:	4882      	ldr	r0, [pc, #520]	; (c5c <hif_handle_isr+0x38c>)
     a52:	4b7b      	ldr	r3, [pc, #492]	; (c40 <hif_handle_isr+0x370>)
     a54:	4798      	blx	r3
     a56:	200d      	movs	r0, #13
     a58:	4b7a      	ldr	r3, [pc, #488]	; (c44 <hif_handle_isr+0x374>)
     a5a:	4798      	blx	r3
     a5c:	e7bf      	b.n	9de <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfOtaCb)
     a5e:	4b71      	ldr	r3, [pc, #452]	; (c24 <hif_handle_isr+0x354>)
     a60:	699b      	ldr	r3, [r3, #24]
     a62:	2b00      	cmp	r3, #0
     a64:	d00b      	beq.n	a7e <hif_handle_isr+0x1ae>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a66:	4b6f      	ldr	r3, [pc, #444]	; (c24 <hif_handle_isr+0x354>)
     a68:	699b      	ldr	r3, [r3, #24]
     a6a:	aa04      	add	r2, sp, #16
     a6c:	7850      	ldrb	r0, [r2, #1]
     a6e:	b2c0      	uxtb	r0, r0
     a70:	8851      	ldrh	r1, [r2, #2]
     a72:	9a05      	ldr	r2, [sp, #20]
     a74:	3208      	adds	r2, #8
     a76:	3908      	subs	r1, #8
     a78:	b289      	uxth	r1, r1
     a7a:	4798      	blx	r3
     a7c:	e7af      	b.n	9de <hif_handle_isr+0x10e>
						M2M_ERR("Ota callback is not registered\n");
     a7e:	22ff      	movs	r2, #255	; 0xff
     a80:	0052      	lsls	r2, r2, #1
     a82:	496b      	ldr	r1, [pc, #428]	; (c30 <hif_handle_isr+0x360>)
     a84:	486b      	ldr	r0, [pc, #428]	; (c34 <hif_handle_isr+0x364>)
     a86:	4b6c      	ldr	r3, [pc, #432]	; (c38 <hif_handle_isr+0x368>)
     a88:	4798      	blx	r3
     a8a:	4875      	ldr	r0, [pc, #468]	; (c60 <hif_handle_isr+0x390>)
     a8c:	4b6c      	ldr	r3, [pc, #432]	; (c40 <hif_handle_isr+0x370>)
     a8e:	4798      	blx	r3
     a90:	200d      	movs	r0, #13
     a92:	4b6c      	ldr	r3, [pc, #432]	; (c44 <hif_handle_isr+0x374>)
     a94:	4798      	blx	r3
     a96:	e7a2      	b.n	9de <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfCryptoCb)
     a98:	4b62      	ldr	r3, [pc, #392]	; (c24 <hif_handle_isr+0x354>)
     a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a9c:	2b00      	cmp	r3, #0
     a9e:	d00b      	beq.n	ab8 <hif_handle_isr+0x1e8>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aa0:	4b60      	ldr	r3, [pc, #384]	; (c24 <hif_handle_isr+0x354>)
     aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa4:	aa04      	add	r2, sp, #16
     aa6:	7850      	ldrb	r0, [r2, #1]
     aa8:	b2c0      	uxtb	r0, r0
     aaa:	8851      	ldrh	r1, [r2, #2]
     aac:	9a05      	ldr	r2, [sp, #20]
     aae:	3208      	adds	r2, #8
     ab0:	3908      	subs	r1, #8
     ab2:	b289      	uxth	r1, r1
     ab4:	4798      	blx	r3
     ab6:	e792      	b.n	9de <hif_handle_isr+0x10e>
						M2M_ERR("Crypto callback is not registered\n");
     ab8:	4a6a      	ldr	r2, [pc, #424]	; (c64 <hif_handle_isr+0x394>)
     aba:	495d      	ldr	r1, [pc, #372]	; (c30 <hif_handle_isr+0x360>)
     abc:	485d      	ldr	r0, [pc, #372]	; (c34 <hif_handle_isr+0x364>)
     abe:	4b5e      	ldr	r3, [pc, #376]	; (c38 <hif_handle_isr+0x368>)
     ac0:	4798      	blx	r3
     ac2:	4869      	ldr	r0, [pc, #420]	; (c68 <hif_handle_isr+0x398>)
     ac4:	4b5e      	ldr	r3, [pc, #376]	; (c40 <hif_handle_isr+0x370>)
     ac6:	4798      	blx	r3
     ac8:	200d      	movs	r0, #13
     aca:	4b5e      	ldr	r3, [pc, #376]	; (c44 <hif_handle_isr+0x374>)
     acc:	4798      	blx	r3
     ace:	e786      	b.n	9de <hif_handle_isr+0x10e>
					if(gstrHifCxt.pfSigmaCb)
     ad0:	4b54      	ldr	r3, [pc, #336]	; (c24 <hif_handle_isr+0x354>)
     ad2:	69db      	ldr	r3, [r3, #28]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d00b      	beq.n	af0 <hif_handle_isr+0x220>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     ad8:	4b52      	ldr	r3, [pc, #328]	; (c24 <hif_handle_isr+0x354>)
     ada:	69db      	ldr	r3, [r3, #28]
     adc:	aa04      	add	r2, sp, #16
     ade:	7850      	ldrb	r0, [r2, #1]
     ae0:	b2c0      	uxtb	r0, r0
     ae2:	8851      	ldrh	r1, [r2, #2]
     ae4:	9a05      	ldr	r2, [sp, #20]
     ae6:	3208      	adds	r2, #8
     ae8:	3908      	subs	r1, #8
     aea:	b289      	uxth	r1, r1
     aec:	4798      	blx	r3
     aee:	e776      	b.n	9de <hif_handle_isr+0x10e>
						M2M_ERR("Sigma callback is not registered\n");
     af0:	4a5e      	ldr	r2, [pc, #376]	; (c6c <hif_handle_isr+0x39c>)
     af2:	494f      	ldr	r1, [pc, #316]	; (c30 <hif_handle_isr+0x360>)
     af4:	484f      	ldr	r0, [pc, #316]	; (c34 <hif_handle_isr+0x364>)
     af6:	4b50      	ldr	r3, [pc, #320]	; (c38 <hif_handle_isr+0x368>)
     af8:	4798      	blx	r3
     afa:	485d      	ldr	r0, [pc, #372]	; (c70 <hif_handle_isr+0x3a0>)
     afc:	4b50      	ldr	r3, [pc, #320]	; (c40 <hif_handle_isr+0x370>)
     afe:	4798      	blx	r3
     b00:	200d      	movs	r0, #13
     b02:	4b50      	ldr	r3, [pc, #320]	; (c44 <hif_handle_isr+0x374>)
     b04:	4798      	blx	r3
     b06:	e76a      	b.n	9de <hif_handle_isr+0x10e>
				    if(gstrHifCxt.pfSslCb)
     b08:	4b46      	ldr	r3, [pc, #280]	; (c24 <hif_handle_isr+0x354>)
     b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b0c:	2b00      	cmp	r3, #0
     b0e:	d100      	bne.n	b12 <hif_handle_isr+0x242>
     b10:	e765      	b.n	9de <hif_handle_isr+0x10e>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     b12:	4b44      	ldr	r3, [pc, #272]	; (c24 <hif_handle_isr+0x354>)
     b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b16:	aa04      	add	r2, sp, #16
     b18:	7850      	ldrb	r0, [r2, #1]
     b1a:	b2c0      	uxtb	r0, r0
     b1c:	8851      	ldrh	r1, [r2, #2]
     b1e:	9a05      	ldr	r2, [sp, #20]
     b20:	3208      	adds	r2, #8
     b22:	3908      	subs	r1, #8
     b24:	b289      	uxth	r1, r1
     b26:	4798      	blx	r3
     b28:	e759      	b.n	9de <hif_handle_isr+0x10e>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     b2a:	4a52      	ldr	r2, [pc, #328]	; (c74 <hif_handle_isr+0x3a4>)
     b2c:	4940      	ldr	r1, [pc, #256]	; (c30 <hif_handle_isr+0x360>)
     b2e:	4841      	ldr	r0, [pc, #260]	; (c34 <hif_handle_isr+0x364>)
     b30:	4c41      	ldr	r4, [pc, #260]	; (c38 <hif_handle_isr+0x368>)
     b32:	47a0      	blx	r4
     b34:	ab04      	add	r3, sp, #16
     b36:	7819      	ldrb	r1, [r3, #0]
     b38:	b2c9      	uxtb	r1, r1
     b3a:	785a      	ldrb	r2, [r3, #1]
     b3c:	b2d2      	uxtb	r2, r2
     b3e:	484e      	ldr	r0, [pc, #312]	; (c78 <hif_handle_isr+0x3a8>)
     b40:	47a0      	blx	r4
     b42:	200d      	movs	r0, #13
     b44:	4b3f      	ldr	r3, [pc, #252]	; (c44 <hif_handle_isr+0x374>)
     b46:	4798      	blx	r3
					ret = hif_set_rx_done();
     b48:	4b4c      	ldr	r3, [pc, #304]	; (c7c <hif_handle_isr+0x3ac>)
     b4a:	4798      	blx	r3
     b4c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     b4e:	d129      	bne.n	ba4 <hif_handle_isr+0x2d4>
     b50:	e74a      	b.n	9e8 <hif_handle_isr+0x118>
				M2M_ERR("(hif) Wrong Size\n");
     b52:	2289      	movs	r2, #137	; 0x89
     b54:	0092      	lsls	r2, r2, #2
     b56:	4936      	ldr	r1, [pc, #216]	; (c30 <hif_handle_isr+0x360>)
     b58:	4836      	ldr	r0, [pc, #216]	; (c34 <hif_handle_isr+0x364>)
     b5a:	4b37      	ldr	r3, [pc, #220]	; (c38 <hif_handle_isr+0x368>)
     b5c:	4798      	blx	r3
     b5e:	4848      	ldr	r0, [pc, #288]	; (c80 <hif_handle_isr+0x3b0>)
     b60:	4b37      	ldr	r3, [pc, #220]	; (c40 <hif_handle_isr+0x370>)
     b62:	4798      	blx	r3
     b64:	200d      	movs	r0, #13
     b66:	4b37      	ldr	r3, [pc, #220]	; (c44 <hif_handle_isr+0x374>)
     b68:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b6a:	2402      	movs	r4, #2
     b6c:	4264      	negs	r4, r4
     b6e:	e019      	b.n	ba4 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b70:	228b      	movs	r2, #139	; 0x8b
     b72:	0092      	lsls	r2, r2, #2
     b74:	492e      	ldr	r1, [pc, #184]	; (c30 <hif_handle_isr+0x360>)
     b76:	482f      	ldr	r0, [pc, #188]	; (c34 <hif_handle_isr+0x364>)
     b78:	4c2f      	ldr	r4, [pc, #188]	; (c38 <hif_handle_isr+0x368>)
     b7a:	47a0      	blx	r4
     b7c:	9903      	ldr	r1, [sp, #12]
     b7e:	4841      	ldr	r0, [pc, #260]	; (c84 <hif_handle_isr+0x3b4>)
     b80:	47a0      	blx	r4
     b82:	200d      	movs	r0, #13
     b84:	4b2f      	ldr	r3, [pc, #188]	; (c44 <hif_handle_isr+0x374>)
     b86:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b88:	240c      	movs	r4, #12
     b8a:	4264      	negs	r4, r4
     b8c:	e00a      	b.n	ba4 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b8e:	4a3e      	ldr	r2, [pc, #248]	; (c88 <hif_handle_isr+0x3b8>)
     b90:	4927      	ldr	r1, [pc, #156]	; (c30 <hif_handle_isr+0x360>)
     b92:	4828      	ldr	r0, [pc, #160]	; (c34 <hif_handle_isr+0x364>)
     b94:	4b28      	ldr	r3, [pc, #160]	; (c38 <hif_handle_isr+0x368>)
     b96:	4798      	blx	r3
     b98:	483c      	ldr	r0, [pc, #240]	; (c8c <hif_handle_isr+0x3bc>)
     b9a:	4b29      	ldr	r3, [pc, #164]	; (c40 <hif_handle_isr+0x370>)
     b9c:	4798      	blx	r3
     b9e:	200d      	movs	r0, #13
     ba0:	4b28      	ldr	r3, [pc, #160]	; (c44 <hif_handle_isr+0x374>)
     ba2:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     ba4:	4a3a      	ldr	r2, [pc, #232]	; (c90 <hif_handle_isr+0x3c0>)
     ba6:	493b      	ldr	r1, [pc, #236]	; (c94 <hif_handle_isr+0x3c4>)
     ba8:	4822      	ldr	r0, [pc, #136]	; (c34 <hif_handle_isr+0x364>)
     baa:	4f23      	ldr	r7, [pc, #140]	; (c38 <hif_handle_isr+0x368>)
     bac:	47b8      	blx	r7
     bae:	0021      	movs	r1, r4
     bb0:	4839      	ldr	r0, [pc, #228]	; (c98 <hif_handle_isr+0x3c8>)
     bb2:	47b8      	blx	r7
     bb4:	200d      	movs	r0, #13
     bb6:	4b23      	ldr	r3, [pc, #140]	; (c44 <hif_handle_isr+0x374>)
     bb8:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     bba:	a903      	add	r1, sp, #12
     bbc:	4837      	ldr	r0, [pc, #220]	; (c9c <hif_handle_isr+0x3cc>)
     bbe:	47a8      	blx	r5
     bc0:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     bc2:	d1e4      	bne.n	b8e <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
     bc4:	9b03      	ldr	r3, [sp, #12]
     bc6:	07db      	lsls	r3, r3, #31
     bc8:	d5d2      	bpl.n	b70 <hif_handle_isr+0x2a0>
			nm_bsp_interrupt_ctrl(0);
     bca:	2000      	movs	r0, #0
     bcc:	4b1f      	ldr	r3, [pc, #124]	; (c4c <hif_handle_isr+0x37c>)
     bce:	4798      	blx	r3
			reg &= ~NBIT0;
     bd0:	2301      	movs	r3, #1
     bd2:	9903      	ldr	r1, [sp, #12]
     bd4:	4399      	bics	r1, r3
     bd6:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     bd8:	4830      	ldr	r0, [pc, #192]	; (c9c <hif_handle_isr+0x3cc>)
     bda:	4b31      	ldr	r3, [pc, #196]	; (ca0 <hif_handle_isr+0x3d0>)
     bdc:	4798      	blx	r3
     bde:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     be0:	d1e0      	bne.n	ba4 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
     be2:	2201      	movs	r2, #1
     be4:	4b0f      	ldr	r3, [pc, #60]	; (c24 <hif_handle_isr+0x354>)
     be6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     be8:	9b03      	ldr	r3, [sp, #12]
     bea:	049e      	lsls	r6, r3, #18
     bec:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
     bee:	d0b0      	beq.n	b52 <hif_handle_isr+0x282>
				uint32 address = 0;
     bf0:	2300      	movs	r3, #0
     bf2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     bf4:	a905      	add	r1, sp, #20
     bf6:	482b      	ldr	r0, [pc, #172]	; (ca4 <hif_handle_isr+0x3d4>)
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <hif_handle_isr+0x384>)
     bfa:	4798      	blx	r3
     bfc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     bfe:	d100      	bne.n	c02 <hif_handle_isr+0x332>
     c00:	e671      	b.n	8e6 <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     c02:	22d0      	movs	r2, #208	; 0xd0
     c04:	32ff      	adds	r2, #255	; 0xff
     c06:	490a      	ldr	r1, [pc, #40]	; (c30 <hif_handle_isr+0x360>)
     c08:	480a      	ldr	r0, [pc, #40]	; (c34 <hif_handle_isr+0x364>)
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <hif_handle_isr+0x368>)
     c0c:	4798      	blx	r3
     c0e:	4826      	ldr	r0, [pc, #152]	; (ca8 <hif_handle_isr+0x3d8>)
     c10:	4b0b      	ldr	r3, [pc, #44]	; (c40 <hif_handle_isr+0x370>)
     c12:	4798      	blx	r3
     c14:	200d      	movs	r0, #13
     c16:	4b0b      	ldr	r3, [pc, #44]	; (c44 <hif_handle_isr+0x374>)
     c18:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     c1a:	2001      	movs	r0, #1
     c1c:	4b0b      	ldr	r3, [pc, #44]	; (c4c <hif_handle_isr+0x37c>)
     c1e:	4798      	blx	r3
     c20:	e7c0      	b.n	ba4 <hif_handle_isr+0x2d4>
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	20000904 	.word	0x20000904
     c28:	00001bbd 	.word	0x00001bbd
     c2c:	00000217 	.word	0x00000217
     c30:	00007acc 	.word	0x00007acc
     c34:	00007a78 	.word	0x00007a78
     c38:	000058d9 	.word	0x000058d9
     c3c:	00007c28 	.word	0x00007c28
     c40:	000059f5 	.word	0x000059f5
     c44:	0000590d 	.word	0x0000590d
     c48:	00007b24 	.word	0x00007b24
     c4c:	00000299 	.word	0x00000299
     c50:	00007b3c 	.word	0x00007b3c
     c54:	00001ba5 	.word	0x00001ba5
     c58:	00007b7c 	.word	0x00007b7c
     c5c:	00007b9c 	.word	0x00007b9c
     c60:	00007bc0 	.word	0x00007bc0
     c64:	00000207 	.word	0x00000207
     c68:	00007be0 	.word	0x00007be0
     c6c:	0000020e 	.word	0x0000020e
     c70:	00007c04 	.word	0x00007c04
     c74:	0000021d 	.word	0x0000021d
     c78:	00007c40 	.word	0x00007c40
     c7c:	000005cd 	.word	0x000005cd
     c80:	00007c6c 	.word	0x00007c6c
     c84:	00007c80 	.word	0x00007c80
     c88:	00000235 	.word	0x00000235
     c8c:	00007c9c 	.word	0x00007c9c
     c90:	0000025e 	.word	0x0000025e
     c94:	00007ad4 	.word	0x00007ad4
     c98:	00007cc0 	.word	0x00007cc0
     c9c:	00001070 	.word	0x00001070
     ca0:	00001bb1 	.word	0x00001bb1
     ca4:	00001084 	.word	0x00001084
     ca8:	00007b00 	.word	0x00007b00
			}
		}
	}

	return ret;
}
     cac:	2000      	movs	r0, #0
     cae:	b007      	add	sp, #28
     cb0:	bc0c      	pop	{r2, r3}
     cb2:	4690      	mov	r8, r2
     cb4:	4699      	mov	r9, r3
     cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cb8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
     cba:	0014      	movs	r4, r2
     cbc:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     cbe:	2800      	cmp	r0, #0
     cc0:	d003      	beq.n	cca <hif_receive+0x12>
     cc2:	2900      	cmp	r1, #0
     cc4:	d001      	beq.n	cca <hif_receive+0x12>
     cc6:	2a00      	cmp	r2, #0
     cc8:	d112      	bne.n	cf0 <hif_receive+0x38>
	{
		if(isDone)
     cca:	2d00      	cmp	r5, #0
     ccc:	d002      	beq.n	cd4 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     cce:	4b27      	ldr	r3, [pc, #156]	; (d6c <hif_receive+0xb4>)
     cd0:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     cd2:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     cd4:	4a26      	ldr	r2, [pc, #152]	; (d70 <hif_receive+0xb8>)
     cd6:	4927      	ldr	r1, [pc, #156]	; (d74 <hif_receive+0xbc>)
     cd8:	4827      	ldr	r0, [pc, #156]	; (d78 <hif_receive+0xc0>)
     cda:	4b28      	ldr	r3, [pc, #160]	; (d7c <hif_receive+0xc4>)
     cdc:	4798      	blx	r3
     cde:	4828      	ldr	r0, [pc, #160]	; (d80 <hif_receive+0xc8>)
     ce0:	4b28      	ldr	r3, [pc, #160]	; (d84 <hif_receive+0xcc>)
     ce2:	4798      	blx	r3
     ce4:	200d      	movs	r0, #13
     ce6:	4b28      	ldr	r3, [pc, #160]	; (d88 <hif_receive+0xd0>)
     ce8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     cea:	200c      	movs	r0, #12
     cec:	4240      	negs	r0, r0
     cee:	e7f0      	b.n	cd2 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     cf0:	4b26      	ldr	r3, [pc, #152]	; (d8c <hif_receive+0xd4>)
     cf2:	68db      	ldr	r3, [r3, #12]
     cf4:	429a      	cmp	r2, r3
     cf6:	d81a      	bhi.n	d2e <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     cf8:	4b24      	ldr	r3, [pc, #144]	; (d8c <hif_receive+0xd4>)
     cfa:	689b      	ldr	r3, [r3, #8]
     cfc:	4298      	cmp	r0, r3
     cfe:	d326      	bcc.n	d4e <hif_receive+0x96>
     d00:	1886      	adds	r6, r0, r2
     d02:	4a22      	ldr	r2, [pc, #136]	; (d8c <hif_receive+0xd4>)
     d04:	6893      	ldr	r3, [r2, #8]
     d06:	68d2      	ldr	r2, [r2, #12]
     d08:	189b      	adds	r3, r3, r2
     d0a:	429e      	cmp	r6, r3
     d0c:	d81f      	bhi.n	d4e <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     d0e:	0022      	movs	r2, r4
     d10:	4b1f      	ldr	r3, [pc, #124]	; (d90 <hif_receive+0xd8>)
     d12:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     d14:	2800      	cmp	r0, #0
     d16:	d1dc      	bne.n	cd2 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     d18:	4a1c      	ldr	r2, [pc, #112]	; (d8c <hif_receive+0xd4>)
     d1a:	6893      	ldr	r3, [r2, #8]
     d1c:	68d2      	ldr	r2, [r2, #12]
     d1e:	189b      	adds	r3, r3, r2
     d20:	429e      	cmp	r6, r3
     d22:	d001      	beq.n	d28 <hif_receive+0x70>
     d24:	2d00      	cmp	r5, #0
     d26:	d0d4      	beq.n	cd2 <hif_receive+0x1a>
		ret = hif_set_rx_done();
     d28:	4b10      	ldr	r3, [pc, #64]	; (d6c <hif_receive+0xb4>)
     d2a:	4798      	blx	r3
     d2c:	e7d1      	b.n	cd2 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     d2e:	4a19      	ldr	r2, [pc, #100]	; (d94 <hif_receive+0xdc>)
     d30:	4910      	ldr	r1, [pc, #64]	; (d74 <hif_receive+0xbc>)
     d32:	4811      	ldr	r0, [pc, #68]	; (d78 <hif_receive+0xc0>)
     d34:	4d11      	ldr	r5, [pc, #68]	; (d7c <hif_receive+0xc4>)
     d36:	47a8      	blx	r5
     d38:	4b14      	ldr	r3, [pc, #80]	; (d8c <hif_receive+0xd4>)
     d3a:	68da      	ldr	r2, [r3, #12]
     d3c:	0021      	movs	r1, r4
     d3e:	4816      	ldr	r0, [pc, #88]	; (d98 <hif_receive+0xe0>)
     d40:	47a8      	blx	r5
     d42:	200d      	movs	r0, #13
     d44:	4b10      	ldr	r3, [pc, #64]	; (d88 <hif_receive+0xd0>)
     d46:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d48:	200c      	movs	r0, #12
     d4a:	4240      	negs	r0, r0
		goto ERR1;
     d4c:	e7c1      	b.n	cd2 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     d4e:	4a13      	ldr	r2, [pc, #76]	; (d9c <hif_receive+0xe4>)
     d50:	4908      	ldr	r1, [pc, #32]	; (d74 <hif_receive+0xbc>)
     d52:	4809      	ldr	r0, [pc, #36]	; (d78 <hif_receive+0xc0>)
     d54:	4b09      	ldr	r3, [pc, #36]	; (d7c <hif_receive+0xc4>)
     d56:	4798      	blx	r3
     d58:	4811      	ldr	r0, [pc, #68]	; (da0 <hif_receive+0xe8>)
     d5a:	4b0a      	ldr	r3, [pc, #40]	; (d84 <hif_receive+0xcc>)
     d5c:	4798      	blx	r3
     d5e:	200d      	movs	r0, #13
     d60:	4b09      	ldr	r3, [pc, #36]	; (d88 <hif_receive+0xd0>)
     d62:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d64:	200c      	movs	r0, #12
     d66:	4240      	negs	r0, r0
		goto ERR1;
     d68:	e7b3      	b.n	cd2 <hif_receive+0x1a>
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	000005cd 	.word	0x000005cd
     d70:	0000027f 	.word	0x0000027f
     d74:	00007ae4 	.word	0x00007ae4
     d78:	00007a78 	.word	0x00007a78
     d7c:	000058d9 	.word	0x000058d9
     d80:	00007cf0 	.word	0x00007cf0
     d84:	000059f5 	.word	0x000059f5
     d88:	0000590d 	.word	0x0000590d
     d8c:	20000904 	.word	0x20000904
     d90:	00001bbd 	.word	0x00001bbd
     d94:	00000287 	.word	0x00000287
     d98:	00007d10 	.word	0x00007d10
     d9c:	0000028d 	.word	0x0000028d
     da0:	00007d58 	.word	0x00007d58

00000da4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     da8:	2807      	cmp	r0, #7
     daa:	d81f      	bhi.n	dec <hif_register_cb+0x48>
     dac:	0083      	lsls	r3, r0, #2
     dae:	4a16      	ldr	r2, [pc, #88]	; (e08 <hif_register_cb+0x64>)
     db0:	58d3      	ldr	r3, [r2, r3]
     db2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     db4:	4b15      	ldr	r3, [pc, #84]	; (e0c <hif_register_cb+0x68>)
     db6:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     db8:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     dba:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     dbc:	4b13      	ldr	r3, [pc, #76]	; (e0c <hif_register_cb+0x68>)
     dbe:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     dc0:	2000      	movs	r0, #0
			break;
     dc2:	e7fa      	b.n	dba <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     dc4:	4b11      	ldr	r3, [pc, #68]	; (e0c <hif_register_cb+0x68>)
     dc6:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     dc8:	2000      	movs	r0, #0
			break;
     dca:	e7f6      	b.n	dba <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     dcc:	4b0f      	ldr	r3, [pc, #60]	; (e0c <hif_register_cb+0x68>)
     dce:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     dd0:	2000      	movs	r0, #0
			break;
     dd2:	e7f2      	b.n	dba <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     dd4:	4b0d      	ldr	r3, [pc, #52]	; (e0c <hif_register_cb+0x68>)
     dd6:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     dd8:	2000      	movs	r0, #0
			break;
     dda:	e7ee      	b.n	dba <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     ddc:	4b0b      	ldr	r3, [pc, #44]	; (e0c <hif_register_cb+0x68>)
     dde:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     de0:	2000      	movs	r0, #0
			break;
     de2:	e7ea      	b.n	dba <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     de4:	4b09      	ldr	r3, [pc, #36]	; (e0c <hif_register_cb+0x68>)
     de6:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
     de8:	2000      	movs	r0, #0
			break;
     dea:	e7e6      	b.n	dba <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     dec:	4a08      	ldr	r2, [pc, #32]	; (e10 <hif_register_cb+0x6c>)
     dee:	4909      	ldr	r1, [pc, #36]	; (e14 <hif_register_cb+0x70>)
     df0:	4809      	ldr	r0, [pc, #36]	; (e18 <hif_register_cb+0x74>)
     df2:	4d0a      	ldr	r5, [pc, #40]	; (e1c <hif_register_cb+0x78>)
     df4:	47a8      	blx	r5
     df6:	0021      	movs	r1, r4
     df8:	4809      	ldr	r0, [pc, #36]	; (e20 <hif_register_cb+0x7c>)
     dfa:	47a8      	blx	r5
     dfc:	200d      	movs	r0, #13
     dfe:	4b09      	ldr	r3, [pc, #36]	; (e24 <hif_register_cb+0x80>)
     e00:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     e02:	200c      	movs	r0, #12
     e04:	4240      	negs	r0, r0
			break;
     e06:	e7d8      	b.n	dba <hif_register_cb+0x16>
     e08:	00007aa0 	.word	0x00007aa0
     e0c:	20000904 	.word	0x20000904
     e10:	000002c5 	.word	0x000002c5
     e14:	00007af0 	.word	0x00007af0
     e18:	00007a78 	.word	0x00007a78
     e1c:	000058d9 	.word	0x000058d9
     e20:	00007d9c 	.word	0x00007d9c
     e24:	0000590d 	.word	0x0000590d

00000e28 <hif_init>:
{
     e28:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e2a:	222c      	movs	r2, #44	; 0x2c
     e2c:	2100      	movs	r1, #0
     e2e:	4806      	ldr	r0, [pc, #24]	; (e48 <hif_init+0x20>)
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <hif_init+0x24>)
     e32:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e34:	4806      	ldr	r0, [pc, #24]	; (e50 <hif_init+0x28>)
     e36:	4b07      	ldr	r3, [pc, #28]	; (e54 <hif_init+0x2c>)
     e38:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e3a:	4907      	ldr	r1, [pc, #28]	; (e58 <hif_init+0x30>)
     e3c:	2003      	movs	r0, #3
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <hif_init+0x34>)
     e40:	4798      	blx	r3
}
     e42:	2000      	movs	r0, #0
     e44:	bd10      	pop	{r4, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	20000904 	.word	0x20000904
     e4c:	0000058d 	.word	0x0000058d
     e50:	000005b9 	.word	0x000005b9
     e54:	00000241 	.word	0x00000241
     e58:	000005c9 	.word	0x000005c9
     e5c:	00000da5 	.word	0x00000da5

00000e60 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     e60:	b530      	push	{r4, r5, lr}
     e62:	b09f      	sub	sp, #124	; 0x7c
     e64:	0004      	movs	r4, r0
     e66:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e68:	282c      	cmp	r0, #44	; 0x2c
     e6a:	d02f      	beq.n	ecc <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e6c:	281b      	cmp	r0, #27
     e6e:	d03d      	beq.n	eec <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e70:	2806      	cmp	r0, #6
     e72:	d04b      	beq.n	f0c <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e74:	280e      	cmp	r0, #14
     e76:	d027      	beq.n	ec8 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e78:	2832      	cmp	r0, #50	; 0x32
     e7a:	d057      	beq.n	f2c <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e7c:	282f      	cmp	r0, #47	; 0x2f
     e7e:	d065      	beq.n	f4c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e80:	2834      	cmp	r0, #52	; 0x34
     e82:	d100      	bne.n	e86 <m2m_wifi_cb+0x26>
     e84:	e077      	b.n	f76 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e86:	2811      	cmp	r0, #17
     e88:	d100      	bne.n	e8c <m2m_wifi_cb+0x2c>
     e8a:	e096      	b.n	fba <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e8c:	2813      	cmp	r0, #19
     e8e:	d100      	bne.n	e92 <m2m_wifi_cb+0x32>
     e90:	e0ac      	b.n	fec <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e92:	2804      	cmp	r0, #4
     e94:	d100      	bne.n	e98 <m2m_wifi_cb+0x38>
     e96:	e0bb      	b.n	1010 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e98:	2865      	cmp	r0, #101	; 0x65
     e9a:	d100      	bne.n	e9e <m2m_wifi_cb+0x3e>
     e9c:	e0ca      	b.n	1034 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     e9e:	2809      	cmp	r0, #9
     ea0:	d100      	bne.n	ea4 <m2m_wifi_cb+0x44>
     ea2:	e0d9      	b.n	1058 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     ea4:	282a      	cmp	r0, #42	; 0x2a
     ea6:	d100      	bne.n	eaa <m2m_wifi_cb+0x4a>
     ea8:	e0e8      	b.n	107c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     eaa:	2820      	cmp	r0, #32
     eac:	d100      	bne.n	eb0 <m2m_wifi_cb+0x50>
     eae:	e0f7      	b.n	10a0 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     eb0:	2295      	movs	r2, #149	; 0x95
     eb2:	0052      	lsls	r2, r2, #1
     eb4:	4989      	ldr	r1, [pc, #548]	; (10dc <m2m_wifi_cb+0x27c>)
     eb6:	488a      	ldr	r0, [pc, #552]	; (10e0 <m2m_wifi_cb+0x280>)
     eb8:	4d8a      	ldr	r5, [pc, #552]	; (10e4 <m2m_wifi_cb+0x284>)
     eba:	47a8      	blx	r5
     ebc:	0021      	movs	r1, r4
     ebe:	488a      	ldr	r0, [pc, #552]	; (10e8 <m2m_wifi_cb+0x288>)
     ec0:	47a8      	blx	r5
     ec2:	200d      	movs	r0, #13
     ec4:	4b89      	ldr	r3, [pc, #548]	; (10ec <m2m_wifi_cb+0x28c>)
     ec6:	4798      	blx	r3
	}
}
     ec8:	b01f      	add	sp, #124	; 0x7c
     eca:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     ecc:	2300      	movs	r3, #0
     ece:	2204      	movs	r2, #4
     ed0:	a903      	add	r1, sp, #12
     ed2:	0028      	movs	r0, r5
     ed4:	4c86      	ldr	r4, [pc, #536]	; (10f0 <m2m_wifi_cb+0x290>)
     ed6:	47a0      	blx	r4
     ed8:	2800      	cmp	r0, #0
     eda:	d1f5      	bne.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     edc:	4b85      	ldr	r3, [pc, #532]	; (10f4 <m2m_wifi_cb+0x294>)
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d0f1      	beq.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     ee4:	a903      	add	r1, sp, #12
     ee6:	302c      	adds	r0, #44	; 0x2c
     ee8:	4798      	blx	r3
     eea:	e7ed      	b.n	ec8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     eec:	2300      	movs	r3, #0
     eee:	2208      	movs	r2, #8
     ef0:	a903      	add	r1, sp, #12
     ef2:	0028      	movs	r0, r5
     ef4:	4c7e      	ldr	r4, [pc, #504]	; (10f0 <m2m_wifi_cb+0x290>)
     ef6:	47a0      	blx	r4
     ef8:	2800      	cmp	r0, #0
     efa:	d1e5      	bne.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     efc:	4b7d      	ldr	r3, [pc, #500]	; (10f4 <m2m_wifi_cb+0x294>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	2b00      	cmp	r3, #0
     f02:	d0e1      	beq.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     f04:	a903      	add	r1, sp, #12
     f06:	301b      	adds	r0, #27
     f08:	4798      	blx	r3
     f0a:	e7dd      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     f0c:	2301      	movs	r3, #1
     f0e:	2230      	movs	r2, #48	; 0x30
     f10:	a903      	add	r1, sp, #12
     f12:	0028      	movs	r0, r5
     f14:	4c76      	ldr	r4, [pc, #472]	; (10f0 <m2m_wifi_cb+0x290>)
     f16:	47a0      	blx	r4
     f18:	2800      	cmp	r0, #0
     f1a:	d1d5      	bne.n	ec8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     f1c:	4b75      	ldr	r3, [pc, #468]	; (10f4 <m2m_wifi_cb+0x294>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	2b00      	cmp	r3, #0
     f22:	d0d1      	beq.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     f24:	a903      	add	r1, sp, #12
     f26:	3006      	adds	r0, #6
     f28:	4798      	blx	r3
     f2a:	e7cd      	b.n	ec8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     f2c:	2300      	movs	r3, #0
     f2e:	2218      	movs	r2, #24
     f30:	a903      	add	r1, sp, #12
     f32:	0028      	movs	r0, r5
     f34:	4c6e      	ldr	r4, [pc, #440]	; (10f0 <m2m_wifi_cb+0x290>)
     f36:	47a0      	blx	r4
     f38:	2800      	cmp	r0, #0
     f3a:	d1c5      	bne.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f3c:	4b6d      	ldr	r3, [pc, #436]	; (10f4 <m2m_wifi_cb+0x294>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	2b00      	cmp	r3, #0
     f42:	d0c1      	beq.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     f44:	a903      	add	r1, sp, #12
     f46:	3032      	adds	r0, #50	; 0x32
     f48:	4798      	blx	r3
     f4a:	e7bd      	b.n	ec8 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     f4c:	2264      	movs	r2, #100	; 0x64
     f4e:	2100      	movs	r1, #0
     f50:	a803      	add	r0, sp, #12
     f52:	4b69      	ldr	r3, [pc, #420]	; (10f8 <m2m_wifi_cb+0x298>)
     f54:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     f56:	2300      	movs	r3, #0
     f58:	2264      	movs	r2, #100	; 0x64
     f5a:	a903      	add	r1, sp, #12
     f5c:	0028      	movs	r0, r5
     f5e:	4c64      	ldr	r4, [pc, #400]	; (10f0 <m2m_wifi_cb+0x290>)
     f60:	47a0      	blx	r4
     f62:	2800      	cmp	r0, #0
     f64:	d1b0      	bne.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f66:	4b63      	ldr	r3, [pc, #396]	; (10f4 <m2m_wifi_cb+0x294>)
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	2b00      	cmp	r3, #0
     f6c:	d0ac      	beq.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f6e:	a903      	add	r1, sp, #12
     f70:	302f      	adds	r0, #47	; 0x2f
     f72:	4798      	blx	r3
     f74:	e7a8      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f76:	2300      	movs	r3, #0
     f78:	2204      	movs	r2, #4
     f7a:	a903      	add	r1, sp, #12
     f7c:	0028      	movs	r0, r5
     f7e:	4c5c      	ldr	r4, [pc, #368]	; (10f0 <m2m_wifi_cb+0x290>)
     f80:	47a0      	blx	r4
     f82:	2800      	cmp	r0, #0
     f84:	d1a0      	bne.n	ec8 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f86:	485d      	ldr	r0, [pc, #372]	; (10fc <m2m_wifi_cb+0x29c>)
     f88:	4d56      	ldr	r5, [pc, #344]	; (10e4 <m2m_wifi_cb+0x284>)
     f8a:	47a8      	blx	r5
     f8c:	9c03      	ldr	r4, [sp, #12]
     f8e:	0a23      	lsrs	r3, r4, #8
     f90:	20ff      	movs	r0, #255	; 0xff
     f92:	4003      	ands	r3, r0
     f94:	0c22      	lsrs	r2, r4, #16
     f96:	4002      	ands	r2, r0
     f98:	0e21      	lsrs	r1, r4, #24
     f9a:	4020      	ands	r0, r4
     f9c:	9000      	str	r0, [sp, #0]
     f9e:	4858      	ldr	r0, [pc, #352]	; (1100 <m2m_wifi_cb+0x2a0>)
     fa0:	47a8      	blx	r5
     fa2:	200d      	movs	r0, #13
     fa4:	4b51      	ldr	r3, [pc, #324]	; (10ec <m2m_wifi_cb+0x28c>)
     fa6:	4798      	blx	r3
			if (gpfAppWifiCb)
     fa8:	4b52      	ldr	r3, [pc, #328]	; (10f4 <m2m_wifi_cb+0x294>)
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	2b00      	cmp	r3, #0
     fae:	d100      	bne.n	fb2 <m2m_wifi_cb+0x152>
     fb0:	e78a      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     fb2:	2100      	movs	r1, #0
     fb4:	2034      	movs	r0, #52	; 0x34
     fb6:	4798      	blx	r3
     fb8:	e786      	b.n	ec8 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     fba:	2200      	movs	r2, #0
     fbc:	4b51      	ldr	r3, [pc, #324]	; (1104 <m2m_wifi_cb+0x2a4>)
     fbe:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     fc0:	2300      	movs	r3, #0
     fc2:	3204      	adds	r2, #4
     fc4:	a903      	add	r1, sp, #12
     fc6:	0028      	movs	r0, r5
     fc8:	4c49      	ldr	r4, [pc, #292]	; (10f0 <m2m_wifi_cb+0x290>)
     fca:	47a0      	blx	r4
     fcc:	2800      	cmp	r0, #0
     fce:	d000      	beq.n	fd2 <m2m_wifi_cb+0x172>
     fd0:	e77a      	b.n	ec8 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     fd2:	ab03      	add	r3, sp, #12
     fd4:	781a      	ldrb	r2, [r3, #0]
     fd6:	4b4c      	ldr	r3, [pc, #304]	; (1108 <m2m_wifi_cb+0x2a8>)
     fd8:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     fda:	4b46      	ldr	r3, [pc, #280]	; (10f4 <m2m_wifi_cb+0x294>)
     fdc:	681b      	ldr	r3, [r3, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d100      	bne.n	fe4 <m2m_wifi_cb+0x184>
     fe2:	e771      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     fe4:	a903      	add	r1, sp, #12
     fe6:	3011      	adds	r0, #17
     fe8:	4798      	blx	r3
     fea:	e76d      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     fec:	2300      	movs	r3, #0
     fee:	222c      	movs	r2, #44	; 0x2c
     ff0:	a903      	add	r1, sp, #12
     ff2:	0028      	movs	r0, r5
     ff4:	4c3e      	ldr	r4, [pc, #248]	; (10f0 <m2m_wifi_cb+0x290>)
     ff6:	47a0      	blx	r4
     ff8:	2800      	cmp	r0, #0
     ffa:	d000      	beq.n	ffe <m2m_wifi_cb+0x19e>
     ffc:	e764      	b.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ffe:	4b3d      	ldr	r3, [pc, #244]	; (10f4 <m2m_wifi_cb+0x294>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d100      	bne.n	1008 <m2m_wifi_cb+0x1a8>
    1006:	e75f      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1008:	a903      	add	r1, sp, #12
    100a:	3013      	adds	r0, #19
    100c:	4798      	blx	r3
    100e:	e75b      	b.n	ec8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1010:	2300      	movs	r3, #0
    1012:	2204      	movs	r2, #4
    1014:	a91c      	add	r1, sp, #112	; 0x70
    1016:	0028      	movs	r0, r5
    1018:	4c35      	ldr	r4, [pc, #212]	; (10f0 <m2m_wifi_cb+0x290>)
    101a:	47a0      	blx	r4
    101c:	2800      	cmp	r0, #0
    101e:	d000      	beq.n	1022 <m2m_wifi_cb+0x1c2>
    1020:	e752      	b.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1022:	4b34      	ldr	r3, [pc, #208]	; (10f4 <m2m_wifi_cb+0x294>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	2b00      	cmp	r3, #0
    1028:	d100      	bne.n	102c <m2m_wifi_cb+0x1cc>
    102a:	e74d      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    102c:	a91c      	add	r1, sp, #112	; 0x70
    102e:	3004      	adds	r0, #4
    1030:	4798      	blx	r3
    1032:	e749      	b.n	ec8 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1034:	2300      	movs	r3, #0
    1036:	2204      	movs	r2, #4
    1038:	a91c      	add	r1, sp, #112	; 0x70
    103a:	0028      	movs	r0, r5
    103c:	4c2c      	ldr	r4, [pc, #176]	; (10f0 <m2m_wifi_cb+0x290>)
    103e:	47a0      	blx	r4
    1040:	2800      	cmp	r0, #0
    1042:	d000      	beq.n	1046 <m2m_wifi_cb+0x1e6>
    1044:	e740      	b.n	ec8 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1046:	4b2b      	ldr	r3, [pc, #172]	; (10f4 <m2m_wifi_cb+0x294>)
    1048:	681b      	ldr	r3, [r3, #0]
    104a:	2b00      	cmp	r3, #0
    104c:	d100      	bne.n	1050 <m2m_wifi_cb+0x1f0>
    104e:	e73b      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1050:	a91c      	add	r1, sp, #112	; 0x70
    1052:	3065      	adds	r0, #101	; 0x65
    1054:	4798      	blx	r3
    1056:	e737      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1058:	2301      	movs	r3, #1
    105a:	2264      	movs	r2, #100	; 0x64
    105c:	a903      	add	r1, sp, #12
    105e:	0028      	movs	r0, r5
    1060:	4c23      	ldr	r4, [pc, #140]	; (10f0 <m2m_wifi_cb+0x290>)
    1062:	47a0      	blx	r4
    1064:	2800      	cmp	r0, #0
    1066:	d000      	beq.n	106a <m2m_wifi_cb+0x20a>
    1068:	e72e      	b.n	ec8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    106a:	4b22      	ldr	r3, [pc, #136]	; (10f4 <m2m_wifi_cb+0x294>)
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	2b00      	cmp	r3, #0
    1070:	d100      	bne.n	1074 <m2m_wifi_cb+0x214>
    1072:	e729      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1074:	a903      	add	r1, sp, #12
    1076:	3009      	adds	r0, #9
    1078:	4798      	blx	r3
    107a:	e725      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    107c:	2301      	movs	r3, #1
    107e:	2204      	movs	r2, #4
    1080:	a903      	add	r1, sp, #12
    1082:	0028      	movs	r0, r5
    1084:	4c1a      	ldr	r4, [pc, #104]	; (10f0 <m2m_wifi_cb+0x290>)
    1086:	47a0      	blx	r4
    1088:	2800      	cmp	r0, #0
    108a:	d000      	beq.n	108e <m2m_wifi_cb+0x22e>
    108c:	e71c      	b.n	ec8 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    108e:	4b19      	ldr	r3, [pc, #100]	; (10f4 <m2m_wifi_cb+0x294>)
    1090:	681b      	ldr	r3, [r3, #0]
    1092:	2b00      	cmp	r3, #0
    1094:	d100      	bne.n	1098 <m2m_wifi_cb+0x238>
    1096:	e717      	b.n	ec8 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1098:	a903      	add	r1, sp, #12
    109a:	302a      	adds	r0, #42	; 0x2a
    109c:	4798      	blx	r3
    109e:	e713      	b.n	ec8 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    10a0:	2300      	movs	r3, #0
    10a2:	2208      	movs	r2, #8
    10a4:	a903      	add	r1, sp, #12
    10a6:	0028      	movs	r0, r5
    10a8:	4c11      	ldr	r4, [pc, #68]	; (10f0 <m2m_wifi_cb+0x290>)
    10aa:	47a0      	blx	r4
    10ac:	2800      	cmp	r0, #0
    10ae:	d000      	beq.n	10b2 <m2m_wifi_cb+0x252>
    10b0:	e70a      	b.n	ec8 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    10b2:	ab03      	add	r3, sp, #12
    10b4:	889a      	ldrh	r2, [r3, #4]
    10b6:	0028      	movs	r0, r5
    10b8:	3008      	adds	r0, #8
    10ba:	2301      	movs	r3, #1
    10bc:	9903      	ldr	r1, [sp, #12]
    10be:	4c0c      	ldr	r4, [pc, #48]	; (10f0 <m2m_wifi_cb+0x290>)
    10c0:	47a0      	blx	r4
    10c2:	2800      	cmp	r0, #0
    10c4:	d000      	beq.n	10c8 <m2m_wifi_cb+0x268>
    10c6:	e6ff      	b.n	ec8 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <m2m_wifi_cb+0x294>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d100      	bne.n	10d2 <m2m_wifi_cb+0x272>
    10d0:	e6fa      	b.n	ec8 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    10d2:	a903      	add	r1, sp, #12
    10d4:	3020      	adds	r0, #32
    10d6:	4798      	blx	r3
    10d8:	e6f6      	b.n	ec8 <m2m_wifi_cb+0x68>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00007de0 	.word	0x00007de0
    10e0:	00007a78 	.word	0x00007a78
    10e4:	000058d9 	.word	0x000058d9
    10e8:	00007e30 	.word	0x00007e30
    10ec:	0000590d 	.word	0x0000590d
    10f0:	00000cb9 	.word	0x00000cb9
    10f4:	200002a0 	.word	0x200002a0
    10f8:	0000058d 	.word	0x0000058d
    10fc:	00007da8 	.word	0x00007da8
    1100:	00007e10 	.word	0x00007e10
    1104:	200002a5 	.word	0x200002a5
    1108:	200002a4 	.word	0x200002a4

0000110c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    110c:	b5f0      	push	{r4, r5, r6, r7, lr}
    110e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1110:	2201      	movs	r2, #1
    1112:	230f      	movs	r3, #15
    1114:	446b      	add	r3, sp
    1116:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1118:	2800      	cmp	r0, #0
    111a:	d061      	beq.n	11e0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    111c:	6802      	ldr	r2, [r0, #0]
    111e:	4b32      	ldr	r3, [pc, #200]	; (11e8 <m2m_wifi_init+0xdc>)
    1120:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1122:	2200      	movs	r2, #0
    1124:	4b31      	ldr	r3, [pc, #196]	; (11ec <m2m_wifi_init+0xe0>)
    1126:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1128:	200f      	movs	r0, #15
    112a:	4468      	add	r0, sp
    112c:	4b30      	ldr	r3, [pc, #192]	; (11f0 <m2m_wifi_init+0xe4>)
    112e:	4798      	blx	r3
    1130:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1132:	d002      	beq.n	113a <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1134:	0020      	movs	r0, r4
    1136:	b00f      	add	sp, #60	; 0x3c
    1138:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    113a:	2000      	movs	r0, #0
    113c:	4b2d      	ldr	r3, [pc, #180]	; (11f4 <m2m_wifi_init+0xe8>)
    113e:	4798      	blx	r3
    1140:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1142:	d149      	bne.n	11d8 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1144:	492c      	ldr	r1, [pc, #176]	; (11f8 <m2m_wifi_init+0xec>)
    1146:	2001      	movs	r0, #1
    1148:	4b2c      	ldr	r3, [pc, #176]	; (11fc <m2m_wifi_init+0xf0>)
    114a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    114c:	ae04      	add	r6, sp, #16
    114e:	0030      	movs	r0, r6
    1150:	4b2b      	ldr	r3, [pc, #172]	; (1200 <m2m_wifi_init+0xf4>)
    1152:	4798      	blx	r3
    1154:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1156:	482b      	ldr	r0, [pc, #172]	; (1204 <m2m_wifi_init+0xf8>)
    1158:	4d2b      	ldr	r5, [pc, #172]	; (1208 <m2m_wifi_init+0xfc>)
    115a:	47a8      	blx	r5
    115c:	79b3      	ldrb	r3, [r6, #6]
    115e:	7972      	ldrb	r2, [r6, #5]
    1160:	7931      	ldrb	r1, [r6, #4]
    1162:	8c30      	ldrh	r0, [r6, #32]
    1164:	9000      	str	r0, [sp, #0]
    1166:	4829      	ldr	r0, [pc, #164]	; (120c <m2m_wifi_init+0x100>)
    1168:	47a8      	blx	r5
    116a:	200d      	movs	r0, #13
    116c:	4f28      	ldr	r7, [pc, #160]	; (1210 <m2m_wifi_init+0x104>)
    116e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1170:	4824      	ldr	r0, [pc, #144]	; (1204 <m2m_wifi_init+0xf8>)
    1172:	47a8      	blx	r5
    1174:	2226      	movs	r2, #38	; 0x26
    1176:	446a      	add	r2, sp
    1178:	211a      	movs	r1, #26
    117a:	4469      	add	r1, sp
    117c:	4825      	ldr	r0, [pc, #148]	; (1214 <m2m_wifi_init+0x108>)
    117e:	47a8      	blx	r5
    1180:	200d      	movs	r0, #13
    1182:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1184:	481f      	ldr	r0, [pc, #124]	; (1204 <m2m_wifi_init+0xf8>)
    1186:	47a8      	blx	r5
    1188:	7a73      	ldrb	r3, [r6, #9]
    118a:	7a32      	ldrb	r2, [r6, #8]
    118c:	79f1      	ldrb	r1, [r6, #7]
    118e:	4822      	ldr	r0, [pc, #136]	; (1218 <m2m_wifi_init+0x10c>)
    1190:	47a8      	blx	r5
    1192:	200d      	movs	r0, #13
    1194:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1196:	481b      	ldr	r0, [pc, #108]	; (1204 <m2m_wifi_init+0xf8>)
    1198:	47a8      	blx	r5
    119a:	2303      	movs	r3, #3
    119c:	2205      	movs	r2, #5
    119e:	2113      	movs	r1, #19
    11a0:	481e      	ldr	r0, [pc, #120]	; (121c <m2m_wifi_init+0x110>)
    11a2:	47a8      	blx	r5
    11a4:	200d      	movs	r0, #13
    11a6:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    11a8:	4816      	ldr	r0, [pc, #88]	; (1204 <m2m_wifi_init+0xf8>)
    11aa:	47a8      	blx	r5
    11ac:	4a1c      	ldr	r2, [pc, #112]	; (1220 <m2m_wifi_init+0x114>)
    11ae:	491d      	ldr	r1, [pc, #116]	; (1224 <m2m_wifi_init+0x118>)
    11b0:	481d      	ldr	r0, [pc, #116]	; (1228 <m2m_wifi_init+0x11c>)
    11b2:	47a8      	blx	r5
    11b4:	200d      	movs	r0, #13
    11b6:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    11b8:	0023      	movs	r3, r4
    11ba:	330d      	adds	r3, #13
    11bc:	d1ba      	bne.n	1134 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    11be:	22f7      	movs	r2, #247	; 0xf7
    11c0:	0052      	lsls	r2, r2, #1
    11c2:	491a      	ldr	r1, [pc, #104]	; (122c <m2m_wifi_init+0x120>)
    11c4:	481a      	ldr	r0, [pc, #104]	; (1230 <m2m_wifi_init+0x124>)
    11c6:	4b10      	ldr	r3, [pc, #64]	; (1208 <m2m_wifi_init+0xfc>)
    11c8:	4798      	blx	r3
    11ca:	481a      	ldr	r0, [pc, #104]	; (1234 <m2m_wifi_init+0x128>)
    11cc:	4b1a      	ldr	r3, [pc, #104]	; (1238 <m2m_wifi_init+0x12c>)
    11ce:	4798      	blx	r3
    11d0:	200d      	movs	r0, #13
    11d2:	4b0f      	ldr	r3, [pc, #60]	; (1210 <m2m_wifi_init+0x104>)
    11d4:	4798      	blx	r3
    11d6:	e7ad      	b.n	1134 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    11d8:	2000      	movs	r0, #0
    11da:	4b18      	ldr	r3, [pc, #96]	; (123c <m2m_wifi_init+0x130>)
    11dc:	4798      	blx	r3
    11de:	e7a9      	b.n	1134 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    11e0:	240c      	movs	r4, #12
    11e2:	4264      	negs	r4, r4
    11e4:	e7a6      	b.n	1134 <m2m_wifi_init+0x28>
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	200002a0 	.word	0x200002a0
    11ec:	200002a5 	.word	0x200002a5
    11f0:	00001d71 	.word	0x00001d71
    11f4:	00000e29 	.word	0x00000e29
    11f8:	00000e61 	.word	0x00000e61
    11fc:	00000da5 	.word	0x00000da5
    1200:	00001c8d 	.word	0x00001c8d
    1204:	00007da8 	.word	0x00007da8
    1208:	000058d9 	.word	0x000058d9
    120c:	00007eec 	.word	0x00007eec
    1210:	0000590d 	.word	0x0000590d
    1214:	00007f14 	.word	0x00007f14
    1218:	00007f30 	.word	0x00007f30
    121c:	00007f54 	.word	0x00007f54
    1220:	00007f6c 	.word	0x00007f6c
    1224:	00007f78 	.word	0x00007f78
    1228:	00007f84 	.word	0x00007f84
    122c:	00007dec 	.word	0x00007dec
    1230:	00007a78 	.word	0x00007a78
    1234:	00007f9c 	.word	0x00007f9c
    1238:	000059f5 	.word	0x000059f5
    123c:	00001e45 	.word	0x00001e45

00001240 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    1240:	b510      	push	{r4, lr}
	return hif_handle_isr();
    1242:	4b01      	ldr	r3, [pc, #4]	; (1248 <m2m_wifi_handle_events+0x8>)
    1244:	4798      	blx	r3
}
    1246:	bd10      	pop	{r4, pc}
    1248:	000008d1 	.word	0x000008d1

0000124c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    124c:	b5f0      	push	{r4, r5, r6, r7, lr}
    124e:	46ce      	mov	lr, r9
    1250:	4647      	mov	r7, r8
    1252:	b580      	push	{r7, lr}
    1254:	b0a3      	sub	sp, #140	; 0x8c
    1256:	9005      	str	r0, [sp, #20]
    1258:	000c      	movs	r4, r1
    125a:	0015      	movs	r5, r2
    125c:	001f      	movs	r7, r3
    125e:	ab2a      	add	r3, sp, #168	; 0xa8
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	4699      	mov	r9, r3
    1264:	ab2b      	add	r3, sp, #172	; 0xac
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    126a:	2a01      	cmp	r2, #1
    126c:	d003      	beq.n	1276 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    126e:	2f00      	cmp	r7, #0
    1270:	d040      	beq.n	12f4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1272:	2a02      	cmp	r2, #2
    1274:	d04c      	beq.n	1310 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1276:	1e63      	subs	r3, r4, #1
    1278:	2b1f      	cmp	r3, #31
    127a:	d900      	bls.n	127e <m2m_wifi_connect_sc+0x32>
    127c:	e078      	b.n	1370 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    127e:	464b      	mov	r3, r9
    1280:	3b01      	subs	r3, #1
    1282:	b29b      	uxth	r3, r3
    1284:	2b0d      	cmp	r3, #13
    1286:	d903      	bls.n	1290 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1288:	464b      	mov	r3, r9
    128a:	2bff      	cmp	r3, #255	; 0xff
    128c:	d000      	beq.n	1290 <m2m_wifi_connect_sc+0x44>
    128e:	e07d      	b.n	138c <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1290:	ae07      	add	r6, sp, #28
    1292:	0022      	movs	r2, r4
    1294:	9905      	ldr	r1, [sp, #20]
    1296:	205a      	movs	r0, #90	; 0x5a
    1298:	ab02      	add	r3, sp, #8
    129a:	469c      	mov	ip, r3
    129c:	4460      	add	r0, ip
    129e:	4b78      	ldr	r3, [pc, #480]	; (1480 <m2m_wifi_connect_sc+0x234>)
    12a0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    12a2:	1934      	adds	r4, r6, r4
    12a4:	3446      	adds	r4, #70	; 0x46
    12a6:	2300      	movs	r3, #0
    12a8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    12aa:	3344      	adds	r3, #68	; 0x44
    12ac:	464a      	mov	r2, r9
    12ae:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    12b0:	4643      	mov	r3, r8
    12b2:	1e5a      	subs	r2, r3, #1
    12b4:	4193      	sbcs	r3, r2
    12b6:	2267      	movs	r2, #103	; 0x67
    12b8:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    12ba:	2341      	movs	r3, #65	; 0x41
    12bc:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    12be:	2d03      	cmp	r5, #3
    12c0:	d100      	bne.n	12c4 <m2m_wifi_connect_sc+0x78>
    12c2:	e072      	b.n	13aa <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    12c4:	2d02      	cmp	r5, #2
    12c6:	d100      	bne.n	12ca <m2m_wifi_connect_sc+0x7e>
    12c8:	e0ab      	b.n	1422 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    12ca:	2d04      	cmp	r5, #4
    12cc:	d100      	bne.n	12d0 <m2m_wifi_connect_sc+0x84>
    12ce:	e0c3      	b.n	1458 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    12d0:	2d01      	cmp	r5, #1
    12d2:	d000      	beq.n	12d6 <m2m_wifi_connect_sc+0x8a>
    12d4:	e0c6      	b.n	1464 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    12d6:	2300      	movs	r3, #0
    12d8:	9302      	str	r3, [sp, #8]
    12da:	9301      	str	r3, [sp, #4]
    12dc:	9300      	str	r3, [sp, #0]
    12de:	336c      	adds	r3, #108	; 0x6c
    12e0:	aa07      	add	r2, sp, #28
    12e2:	2128      	movs	r1, #40	; 0x28
    12e4:	2001      	movs	r0, #1
    12e6:	4c67      	ldr	r4, [pc, #412]	; (1484 <m2m_wifi_connect_sc+0x238>)
    12e8:	47a0      	blx	r4

ERR1:
	return ret;
}
    12ea:	b023      	add	sp, #140	; 0x8c
    12ec:	bc0c      	pop	{r2, r3}
    12ee:	4690      	mov	r8, r2
    12f0:	4699      	mov	r9, r3
    12f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    12f4:	4a64      	ldr	r2, [pc, #400]	; (1488 <m2m_wifi_connect_sc+0x23c>)
    12f6:	4965      	ldr	r1, [pc, #404]	; (148c <m2m_wifi_connect_sc+0x240>)
    12f8:	4865      	ldr	r0, [pc, #404]	; (1490 <m2m_wifi_connect_sc+0x244>)
    12fa:	4b66      	ldr	r3, [pc, #408]	; (1494 <m2m_wifi_connect_sc+0x248>)
    12fc:	4798      	blx	r3
    12fe:	4866      	ldr	r0, [pc, #408]	; (1498 <m2m_wifi_connect_sc+0x24c>)
    1300:	4b66      	ldr	r3, [pc, #408]	; (149c <m2m_wifi_connect_sc+0x250>)
    1302:	4798      	blx	r3
    1304:	200d      	movs	r0, #13
    1306:	4b66      	ldr	r3, [pc, #408]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    1308:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    130a:	200c      	movs	r0, #12
    130c:	4240      	negs	r0, r0
			goto ERR1;
    130e:	e7ec      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1310:	0038      	movs	r0, r7
    1312:	4b64      	ldr	r3, [pc, #400]	; (14a4 <m2m_wifi_connect_sc+0x258>)
    1314:	4798      	blx	r3
    1316:	2840      	cmp	r0, #64	; 0x40
    1318:	d1ad      	bne.n	1276 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    131a:	783b      	ldrb	r3, [r7, #0]
    131c:	001a      	movs	r2, r3
    131e:	3a30      	subs	r2, #48	; 0x30
    1320:	2a36      	cmp	r2, #54	; 0x36
    1322:	d817      	bhi.n	1354 <m2m_wifi_connect_sc+0x108>
    1324:	3a0a      	subs	r2, #10
    1326:	2a06      	cmp	r2, #6
    1328:	d914      	bls.n	1354 <m2m_wifi_connect_sc+0x108>
    132a:	3b47      	subs	r3, #71	; 0x47
    132c:	2b19      	cmp	r3, #25
    132e:	d911      	bls.n	1354 <m2m_wifi_connect_sc+0x108>
    1330:	1c7a      	adds	r2, r7, #1
    1332:	0038      	movs	r0, r7
    1334:	3040      	adds	r0, #64	; 0x40
    1336:	7813      	ldrb	r3, [r2, #0]
    1338:	0019      	movs	r1, r3
    133a:	3930      	subs	r1, #48	; 0x30
    133c:	2936      	cmp	r1, #54	; 0x36
    133e:	d809      	bhi.n	1354 <m2m_wifi_connect_sc+0x108>
    1340:	390a      	subs	r1, #10
    1342:	2906      	cmp	r1, #6
    1344:	d906      	bls.n	1354 <m2m_wifi_connect_sc+0x108>
    1346:	3b47      	subs	r3, #71	; 0x47
    1348:	2b19      	cmp	r3, #25
    134a:	d903      	bls.n	1354 <m2m_wifi_connect_sc+0x108>
    134c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    134e:	4282      	cmp	r2, r0
    1350:	d1f1      	bne.n	1336 <m2m_wifi_connect_sc+0xea>
    1352:	e790      	b.n	1276 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    1354:	4a54      	ldr	r2, [pc, #336]	; (14a8 <m2m_wifi_connect_sc+0x25c>)
    1356:	494d      	ldr	r1, [pc, #308]	; (148c <m2m_wifi_connect_sc+0x240>)
    1358:	484d      	ldr	r0, [pc, #308]	; (1490 <m2m_wifi_connect_sc+0x244>)
    135a:	4b4e      	ldr	r3, [pc, #312]	; (1494 <m2m_wifi_connect_sc+0x248>)
    135c:	4798      	blx	r3
    135e:	4853      	ldr	r0, [pc, #332]	; (14ac <m2m_wifi_connect_sc+0x260>)
    1360:	4b4e      	ldr	r3, [pc, #312]	; (149c <m2m_wifi_connect_sc+0x250>)
    1362:	4798      	blx	r3
    1364:	200d      	movs	r0, #13
    1366:	4b4e      	ldr	r3, [pc, #312]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    1368:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    136a:	200c      	movs	r0, #12
    136c:	4240      	negs	r0, r0
					goto ERR1;
    136e:	e7bc      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1370:	4a4f      	ldr	r2, [pc, #316]	; (14b0 <m2m_wifi_connect_sc+0x264>)
    1372:	4946      	ldr	r1, [pc, #280]	; (148c <m2m_wifi_connect_sc+0x240>)
    1374:	4846      	ldr	r0, [pc, #280]	; (1490 <m2m_wifi_connect_sc+0x244>)
    1376:	4b47      	ldr	r3, [pc, #284]	; (1494 <m2m_wifi_connect_sc+0x248>)
    1378:	4798      	blx	r3
    137a:	484e      	ldr	r0, [pc, #312]	; (14b4 <m2m_wifi_connect_sc+0x268>)
    137c:	4b47      	ldr	r3, [pc, #284]	; (149c <m2m_wifi_connect_sc+0x250>)
    137e:	4798      	blx	r3
    1380:	200d      	movs	r0, #13
    1382:	4b47      	ldr	r3, [pc, #284]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    1384:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1386:	200c      	movs	r0, #12
    1388:	4240      	negs	r0, r0
		goto ERR1;
    138a:	e7ae      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    138c:	2290      	movs	r2, #144	; 0x90
    138e:	0092      	lsls	r2, r2, #2
    1390:	493e      	ldr	r1, [pc, #248]	; (148c <m2m_wifi_connect_sc+0x240>)
    1392:	483f      	ldr	r0, [pc, #252]	; (1490 <m2m_wifi_connect_sc+0x244>)
    1394:	4b3f      	ldr	r3, [pc, #252]	; (1494 <m2m_wifi_connect_sc+0x248>)
    1396:	4798      	blx	r3
    1398:	4847      	ldr	r0, [pc, #284]	; (14b8 <m2m_wifi_connect_sc+0x26c>)
    139a:	4b40      	ldr	r3, [pc, #256]	; (149c <m2m_wifi_connect_sc+0x250>)
    139c:	4798      	blx	r3
    139e:	200d      	movs	r0, #13
    13a0:	4b3f      	ldr	r3, [pc, #252]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    13a2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13a4:	200c      	movs	r0, #12
    13a6:	4240      	negs	r0, r0
			goto ERR1;
    13a8:	e79f      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    13aa:	783b      	ldrb	r3, [r7, #0]
    13ac:	3b01      	subs	r3, #1
    13ae:	b2db      	uxtb	r3, r3
    13b0:	aa07      	add	r2, sp, #28
    13b2:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    13b4:	2b03      	cmp	r3, #3
    13b6:	d817      	bhi.n	13e8 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    13b8:	787a      	ldrb	r2, [r7, #1]
    13ba:	1e51      	subs	r1, r2, #1
    13bc:	ab07      	add	r3, sp, #28
    13be:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    13c0:	2310      	movs	r3, #16
    13c2:	0011      	movs	r1, r2
    13c4:	4399      	bics	r1, r3
    13c6:	290b      	cmp	r1, #11
    13c8:	d01d      	beq.n	1406 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    13ca:	4a3c      	ldr	r2, [pc, #240]	; (14bc <m2m_wifi_connect_sc+0x270>)
    13cc:	492f      	ldr	r1, [pc, #188]	; (148c <m2m_wifi_connect_sc+0x240>)
    13ce:	4830      	ldr	r0, [pc, #192]	; (1490 <m2m_wifi_connect_sc+0x244>)
    13d0:	4c30      	ldr	r4, [pc, #192]	; (1494 <m2m_wifi_connect_sc+0x248>)
    13d2:	47a0      	blx	r4
    13d4:	ab07      	add	r3, sp, #28
    13d6:	7859      	ldrb	r1, [r3, #1]
    13d8:	4839      	ldr	r0, [pc, #228]	; (14c0 <m2m_wifi_connect_sc+0x274>)
    13da:	47a0      	blx	r4
    13dc:	200d      	movs	r0, #13
    13de:	4b30      	ldr	r3, [pc, #192]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    13e0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13e2:	200c      	movs	r0, #12
    13e4:	4240      	negs	r0, r0
			goto ERR1;
    13e6:	e780      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    13e8:	4a36      	ldr	r2, [pc, #216]	; (14c4 <m2m_wifi_connect_sc+0x278>)
    13ea:	4928      	ldr	r1, [pc, #160]	; (148c <m2m_wifi_connect_sc+0x240>)
    13ec:	4828      	ldr	r0, [pc, #160]	; (1490 <m2m_wifi_connect_sc+0x244>)
    13ee:	4c29      	ldr	r4, [pc, #164]	; (1494 <m2m_wifi_connect_sc+0x248>)
    13f0:	47a0      	blx	r4
    13f2:	ab07      	add	r3, sp, #28
    13f4:	7819      	ldrb	r1, [r3, #0]
    13f6:	4834      	ldr	r0, [pc, #208]	; (14c8 <m2m_wifi_connect_sc+0x27c>)
    13f8:	47a0      	blx	r4
    13fa:	200d      	movs	r0, #13
    13fc:	4b28      	ldr	r3, [pc, #160]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    13fe:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1400:	200c      	movs	r0, #12
    1402:	4240      	negs	r0, r0
			goto ERR1;
    1404:	e771      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1406:	1cb9      	adds	r1, r7, #2
    1408:	2016      	movs	r0, #22
    140a:	ab02      	add	r3, sp, #8
    140c:	469c      	mov	ip, r3
    140e:	4460      	add	r0, ip
    1410:	4b1b      	ldr	r3, [pc, #108]	; (1480 <m2m_wifi_connect_sc+0x234>)
    1412:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1414:	787b      	ldrb	r3, [r7, #1]
    1416:	aa07      	add	r2, sp, #28
    1418:	4694      	mov	ip, r2
    141a:	4463      	add	r3, ip
    141c:	2200      	movs	r2, #0
    141e:	709a      	strb	r2, [r3, #2]
    1420:	e759      	b.n	12d6 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1422:	0038      	movs	r0, r7
    1424:	4b1f      	ldr	r3, [pc, #124]	; (14a4 <m2m_wifi_connect_sc+0x258>)
    1426:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1428:	1e43      	subs	r3, r0, #1
    142a:	b29b      	uxth	r3, r3
    142c:	2b3f      	cmp	r3, #63	; 0x3f
    142e:	d805      	bhi.n	143c <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1430:	1c42      	adds	r2, r0, #1
    1432:	0039      	movs	r1, r7
    1434:	a807      	add	r0, sp, #28
    1436:	4b12      	ldr	r3, [pc, #72]	; (1480 <m2m_wifi_connect_sc+0x234>)
    1438:	4798      	blx	r3
    143a:	e74c      	b.n	12d6 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    143c:	4a23      	ldr	r2, [pc, #140]	; (14cc <m2m_wifi_connect_sc+0x280>)
    143e:	4913      	ldr	r1, [pc, #76]	; (148c <m2m_wifi_connect_sc+0x240>)
    1440:	4813      	ldr	r0, [pc, #76]	; (1490 <m2m_wifi_connect_sc+0x244>)
    1442:	4b14      	ldr	r3, [pc, #80]	; (1494 <m2m_wifi_connect_sc+0x248>)
    1444:	4798      	blx	r3
    1446:	4822      	ldr	r0, [pc, #136]	; (14d0 <m2m_wifi_connect_sc+0x284>)
    1448:	4b14      	ldr	r3, [pc, #80]	; (149c <m2m_wifi_connect_sc+0x250>)
    144a:	4798      	blx	r3
    144c:	200d      	movs	r0, #13
    144e:	4b14      	ldr	r3, [pc, #80]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    1450:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1452:	200c      	movs	r0, #12
    1454:	4240      	negs	r0, r0
			goto ERR1;
    1456:	e748      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1458:	223e      	movs	r2, #62	; 0x3e
    145a:	0039      	movs	r1, r7
    145c:	a807      	add	r0, sp, #28
    145e:	4b08      	ldr	r3, [pc, #32]	; (1480 <m2m_wifi_connect_sc+0x234>)
    1460:	4798      	blx	r3
    1462:	e738      	b.n	12d6 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    1464:	4a1b      	ldr	r2, [pc, #108]	; (14d4 <m2m_wifi_connect_sc+0x288>)
    1466:	4909      	ldr	r1, [pc, #36]	; (148c <m2m_wifi_connect_sc+0x240>)
    1468:	4809      	ldr	r0, [pc, #36]	; (1490 <m2m_wifi_connect_sc+0x244>)
    146a:	4b0a      	ldr	r3, [pc, #40]	; (1494 <m2m_wifi_connect_sc+0x248>)
    146c:	4798      	blx	r3
    146e:	481a      	ldr	r0, [pc, #104]	; (14d8 <m2m_wifi_connect_sc+0x28c>)
    1470:	4b0a      	ldr	r3, [pc, #40]	; (149c <m2m_wifi_connect_sc+0x250>)
    1472:	4798      	blx	r3
    1474:	200d      	movs	r0, #13
    1476:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <m2m_wifi_connect_sc+0x254>)
    1478:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    147a:	200c      	movs	r0, #12
    147c:	4240      	negs	r0, r0
		goto ERR1;
    147e:	e734      	b.n	12ea <m2m_wifi_connect_sc+0x9e>
    1480:	00000579 	.word	0x00000579
    1484:	000006a1 	.word	0x000006a1
    1488:	00000221 	.word	0x00000221
    148c:	00007dfc 	.word	0x00007dfc
    1490:	00007a78 	.word	0x00007a78
    1494:	000058d9 	.word	0x000058d9
    1498:	00007e44 	.word	0x00007e44
    149c:	000059f5 	.word	0x000059f5
    14a0:	0000590d 	.word	0x0000590d
    14a4:	0000059d 	.word	0x0000059d
    14a8:	0000022d 	.word	0x0000022d
    14ac:	00007e58 	.word	0x00007e58
    14b0:	00000237 	.word	0x00000237
    14b4:	00007e64 	.word	0x00007e64
    14b8:	00007e78 	.word	0x00007e78
    14bc:	0000025e 	.word	0x0000025e
    14c0:	00007ea0 	.word	0x00007ea0
    14c4:	00000257 	.word	0x00000257
    14c8:	00007e84 	.word	0x00007e84
    14cc:	0000026d 	.word	0x0000026d
    14d0:	00007ebc 	.word	0x00007ebc
    14d4:	0000027d 	.word	0x0000027d
    14d8:	00007ed8 	.word	0x00007ed8

000014dc <m2m_wifi_connect>:
{
    14dc:	b530      	push	{r4, r5, lr}
    14de:	b083      	sub	sp, #12
    14e0:	ac06      	add	r4, sp, #24
    14e2:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    14e4:	2500      	movs	r5, #0
    14e6:	9501      	str	r5, [sp, #4]
    14e8:	9400      	str	r4, [sp, #0]
    14ea:	4c02      	ldr	r4, [pc, #8]	; (14f4 <m2m_wifi_connect+0x18>)
    14ec:	47a0      	blx	r4
}
    14ee:	b003      	add	sp, #12
    14f0:	bd30      	pop	{r4, r5, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	0000124d 	.word	0x0000124d

000014f8 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
    14f8:	b510      	push	{r4, lr}
    14fa:	b086      	sub	sp, #24
    14fc:	0001      	movs	r1, r0
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
    14fe:	2206      	movs	r2, #6
    1500:	a804      	add	r0, sp, #16
    1502:	4b07      	ldr	r3, [pc, #28]	; (1520 <m2m_wifi_set_mac_address+0x28>)
    1504:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
    1506:	2300      	movs	r3, #0
    1508:	9302      	str	r3, [sp, #8]
    150a:	9301      	str	r3, [sp, #4]
    150c:	9300      	str	r3, [sp, #0]
    150e:	3308      	adds	r3, #8
    1510:	aa04      	add	r2, sp, #16
    1512:	2102      	movs	r1, #2
    1514:	2001      	movs	r0, #1
    1516:	4c03      	ldr	r4, [pc, #12]	; (1524 <m2m_wifi_set_mac_address+0x2c>)
    1518:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
    151a:	b006      	add	sp, #24
    151c:	bd10      	pop	{r4, pc}
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	00000579 	.word	0x00000579
    1524:	000006a1 	.word	0x000006a1

00001528 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1528:	2000      	movs	r0, #0
    152a:	4770      	bx	lr

0000152c <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	0004      	movs	r4, r0
    1530:	000d      	movs	r5, r1
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    1532:	4b07      	ldr	r3, [pc, #28]	; (1550 <m2m_wifi_get_otp_mac_address+0x24>)
    1534:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    1536:	2800      	cmp	r0, #0
    1538:	d000      	beq.n	153c <m2m_wifi_get_otp_mac_address+0x10>
		{
			ret = hif_chip_sleep();
		}
	}
	return ret;
}
    153a:	bd70      	pop	{r4, r5, r6, pc}
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    153c:	0029      	movs	r1, r5
    153e:	0020      	movs	r0, r4
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <m2m_wifi_get_otp_mac_address+0x28>)
    1542:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1544:	2800      	cmp	r0, #0
    1546:	d1f8      	bne.n	153a <m2m_wifi_get_otp_mac_address+0xe>
			ret = hif_chip_sleep();
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <m2m_wifi_get_otp_mac_address+0x2c>)
    154a:	4798      	blx	r3
    154c:	e7f5      	b.n	153a <m2m_wifi_get_otp_mac_address+0xe>
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	00000611 	.word	0x00000611
    1554:	00001a71 	.word	0x00001a71
    1558:	00000669 	.word	0x00000669

0000155c <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    155c:	b510      	push	{r4, lr}
    155e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    1560:	4b06      	ldr	r3, [pc, #24]	; (157c <m2m_wifi_get_mac_address+0x20>)
    1562:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    1564:	2800      	cmp	r0, #0
    1566:	d000      	beq.n	156a <m2m_wifi_get_mac_address+0xe>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
    1568:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
    156a:	0020      	movs	r0, r4
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <m2m_wifi_get_mac_address+0x24>)
    156e:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1570:	2800      	cmp	r0, #0
    1572:	d1f9      	bne.n	1568 <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
    1574:	4b03      	ldr	r3, [pc, #12]	; (1584 <m2m_wifi_get_mac_address+0x28>)
    1576:	4798      	blx	r3
    1578:	e7f6      	b.n	1568 <m2m_wifi_get_mac_address+0xc>
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	00000611 	.word	0x00000611
    1580:	00001b05 	.word	0x00001b05
    1584:	00000669 	.word	0x00000669

00001588 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
    1588:	b510      	push	{r4, lr}
    158a:	b090      	sub	sp, #64	; 0x40
    158c:	1c0a      	adds	r2, r1, #0
    158e:	2930      	cmp	r1, #48	; 0x30
    1590:	d900      	bls.n	1594 <m2m_wifi_set_device_name+0xc>
    1592:	2230      	movs	r2, #48	; 0x30
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
    1594:	3201      	adds	r2, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
    1596:	b2d2      	uxtb	r2, r2
    1598:	0001      	movs	r1, r0
    159a:	a804      	add	r0, sp, #16
    159c:	4b06      	ldr	r3, [pc, #24]	; (15b8 <m2m_wifi_set_device_name+0x30>)
    159e:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
    15a0:	2300      	movs	r3, #0
    15a2:	9302      	str	r3, [sp, #8]
    15a4:	9301      	str	r3, [sp, #4]
    15a6:	9300      	str	r3, [sp, #0]
    15a8:	3330      	adds	r3, #48	; 0x30
    15aa:	aa04      	add	r2, sp, #16
    15ac:	2107      	movs	r1, #7
    15ae:	2001      	movs	r0, #1
    15b0:	4c02      	ldr	r4, [pc, #8]	; (15bc <m2m_wifi_set_device_name+0x34>)
    15b2:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
    15b4:	b010      	add	sp, #64	; 0x40
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00000579 	.word	0x00000579
    15bc:	000006a1 	.word	0x000006a1

000015c0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    15c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c2:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    15c4:	2580      	movs	r5, #128	; 0x80
    15c6:	006d      	lsls	r5, r5, #1
    15c8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    15ca:	24a5      	movs	r4, #165	; 0xa5
    15cc:	0164      	lsls	r4, r4, #5
    15ce:	4f08      	ldr	r7, [pc, #32]	; (15f0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    15d0:	4e08      	ldr	r6, [pc, #32]	; (15f4 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    15d2:	0029      	movs	r1, r5
    15d4:	0020      	movs	r0, r4
    15d6:	47b8      	blx	r7
			uint32 reg = 0;
    15d8:	2300      	movs	r3, #0
    15da:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    15dc:	a901      	add	r1, sp, #4
    15de:	0020      	movs	r0, r4
    15e0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    15e2:	2800      	cmp	r0, #0
    15e4:	d1f5      	bne.n	15d2 <chip_apply_conf+0x12>
				if(reg == val32)
    15e6:	9b01      	ldr	r3, [sp, #4]
    15e8:	429d      	cmp	r5, r3
    15ea:	d1f2      	bne.n	15d2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    15ec:	b003      	add	sp, #12
    15ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15f0:	00001bb1 	.word	0x00001bb1
    15f4:	00001ba5 	.word	0x00001ba5

000015f8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    15f8:	b500      	push	{lr}
    15fa:	b083      	sub	sp, #12
	uint32 reg = 0;
    15fc:	2300      	movs	r3, #0
    15fe:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1600:	a901      	add	r1, sp, #4
    1602:	4811      	ldr	r0, [pc, #68]	; (1648 <enable_interrupts+0x50>)
    1604:	4b11      	ldr	r3, [pc, #68]	; (164c <enable_interrupts+0x54>)
    1606:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1608:	2800      	cmp	r0, #0
    160a:	d001      	beq.n	1610 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    160c:	b003      	add	sp, #12
    160e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    1610:	2180      	movs	r1, #128	; 0x80
    1612:	0049      	lsls	r1, r1, #1
    1614:	9b01      	ldr	r3, [sp, #4]
    1616:	4319      	orrs	r1, r3
    1618:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    161a:	480b      	ldr	r0, [pc, #44]	; (1648 <enable_interrupts+0x50>)
    161c:	4b0c      	ldr	r3, [pc, #48]	; (1650 <enable_interrupts+0x58>)
    161e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1620:	2800      	cmp	r0, #0
    1622:	d1f3      	bne.n	160c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1624:	a901      	add	r1, sp, #4
    1626:	20d0      	movs	r0, #208	; 0xd0
    1628:	0140      	lsls	r0, r0, #5
    162a:	4b08      	ldr	r3, [pc, #32]	; (164c <enable_interrupts+0x54>)
    162c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    162e:	2800      	cmp	r0, #0
    1630:	d1ec      	bne.n	160c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    1632:	2180      	movs	r1, #128	; 0x80
    1634:	0249      	lsls	r1, r1, #9
    1636:	9b01      	ldr	r3, [sp, #4]
    1638:	4319      	orrs	r1, r3
    163a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    163c:	20d0      	movs	r0, #208	; 0xd0
    163e:	0140      	lsls	r0, r0, #5
    1640:	4b03      	ldr	r3, [pc, #12]	; (1650 <enable_interrupts+0x58>)
    1642:	4798      	blx	r3
    1644:	e7e2      	b.n	160c <enable_interrupts+0x14>
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	00001408 	.word	0x00001408
    164c:	00001ba5 	.word	0x00001ba5
    1650:	00001bb1 	.word	0x00001bb1

00001654 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1654:	b510      	push	{r4, lr}
    1656:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1658:	4b28      	ldr	r3, [pc, #160]	; (16fc <nmi_get_chipid+0xa8>)
    165a:	681c      	ldr	r4, [r3, #0]
    165c:	2c00      	cmp	r4, #0
    165e:	d004      	beq.n	166a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    1660:	4b26      	ldr	r3, [pc, #152]	; (16fc <nmi_get_chipid+0xa8>)
    1662:	681c      	ldr	r4, [r3, #0]
}
    1664:	0020      	movs	r0, r4
    1666:	b002      	add	sp, #8
    1668:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    166a:	0019      	movs	r1, r3
    166c:	2080      	movs	r0, #128	; 0x80
    166e:	0140      	lsls	r0, r0, #5
    1670:	4b23      	ldr	r3, [pc, #140]	; (1700 <nmi_get_chipid+0xac>)
    1672:	4798      	blx	r3
    1674:	2800      	cmp	r0, #0
    1676:	d003      	beq.n	1680 <nmi_get_chipid+0x2c>
			chipid = 0;
    1678:	2200      	movs	r2, #0
    167a:	4b20      	ldr	r3, [pc, #128]	; (16fc <nmi_get_chipid+0xa8>)
    167c:	601a      	str	r2, [r3, #0]
			return 0;
    167e:	e7f1      	b.n	1664 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1680:	a901      	add	r1, sp, #4
    1682:	4820      	ldr	r0, [pc, #128]	; (1704 <nmi_get_chipid+0xb0>)
    1684:	4b1e      	ldr	r3, [pc, #120]	; (1700 <nmi_get_chipid+0xac>)
    1686:	4798      	blx	r3
    1688:	2800      	cmp	r0, #0
    168a:	d003      	beq.n	1694 <nmi_get_chipid+0x40>
			chipid = 0;
    168c:	2200      	movs	r2, #0
    168e:	4b1b      	ldr	r3, [pc, #108]	; (16fc <nmi_get_chipid+0xa8>)
    1690:	601a      	str	r2, [r3, #0]
			return 0;
    1692:	e7e7      	b.n	1664 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    1694:	4b19      	ldr	r3, [pc, #100]	; (16fc <nmi_get_chipid+0xa8>)
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	4a1b      	ldr	r2, [pc, #108]	; (1708 <nmi_get_chipid+0xb4>)
    169a:	4293      	cmp	r3, r2
    169c:	d00e      	beq.n	16bc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    169e:	4a1b      	ldr	r2, [pc, #108]	; (170c <nmi_get_chipid+0xb8>)
    16a0:	4293      	cmp	r3, r2
    16a2:	d012      	beq.n	16ca <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    16a4:	4a1a      	ldr	r2, [pc, #104]	; (1710 <nmi_get_chipid+0xbc>)
    16a6:	4293      	cmp	r3, r2
    16a8:	d01c      	beq.n	16e4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    16aa:	4914      	ldr	r1, [pc, #80]	; (16fc <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    16ac:	4a19      	ldr	r2, [pc, #100]	; (1714 <nmi_get_chipid+0xc0>)
    16ae:	680b      	ldr	r3, [r1, #0]
    16b0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    16b2:	23a0      	movs	r3, #160	; 0xa0
    16b4:	02db      	lsls	r3, r3, #11
    16b6:	4313      	orrs	r3, r2
    16b8:	600b      	str	r3, [r1, #0]
    16ba:	e7d1      	b.n	1660 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	2b01      	cmp	r3, #1
    16c0:	d0f3      	beq.n	16aa <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    16c2:	4a15      	ldr	r2, [pc, #84]	; (1718 <nmi_get_chipid+0xc4>)
    16c4:	4b0d      	ldr	r3, [pc, #52]	; (16fc <nmi_get_chipid+0xa8>)
    16c6:	601a      	str	r2, [r3, #0]
    16c8:	e7ef      	b.n	16aa <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    16ca:	9b01      	ldr	r3, [sp, #4]
    16cc:	2b03      	cmp	r3, #3
    16ce:	d0ec      	beq.n	16aa <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    16d0:	2b04      	cmp	r3, #4
    16d2:	d003      	beq.n	16dc <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    16d4:	4a11      	ldr	r2, [pc, #68]	; (171c <nmi_get_chipid+0xc8>)
    16d6:	4b09      	ldr	r3, [pc, #36]	; (16fc <nmi_get_chipid+0xa8>)
    16d8:	601a      	str	r2, [r3, #0]
    16da:	e7e6      	b.n	16aa <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    16dc:	4a10      	ldr	r2, [pc, #64]	; (1720 <nmi_get_chipid+0xcc>)
    16de:	4b07      	ldr	r3, [pc, #28]	; (16fc <nmi_get_chipid+0xa8>)
    16e0:	601a      	str	r2, [r3, #0]
    16e2:	e7e2      	b.n	16aa <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    16e4:	4905      	ldr	r1, [pc, #20]	; (16fc <nmi_get_chipid+0xa8>)
    16e6:	20ec      	movs	r0, #236	; 0xec
    16e8:	0380      	lsls	r0, r0, #14
    16ea:	4b05      	ldr	r3, [pc, #20]	; (1700 <nmi_get_chipid+0xac>)
    16ec:	4798      	blx	r3
    16ee:	2800      	cmp	r0, #0
    16f0:	d0db      	beq.n	16aa <nmi_get_chipid+0x56>
			chipid = 0;
    16f2:	2200      	movs	r2, #0
    16f4:	4b01      	ldr	r3, [pc, #4]	; (16fc <nmi_get_chipid+0xa8>)
    16f6:	601a      	str	r2, [r3, #0]
			return 0;
    16f8:	e7b4      	b.n	1664 <nmi_get_chipid+0x10>
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	200002a8 	.word	0x200002a8
    1700:	00001ba5 	.word	0x00001ba5
    1704:	000013f4 	.word	0x000013f4
    1708:	001002a0 	.word	0x001002a0
    170c:	001002b0 	.word	0x001002b0
    1710:	001000f0 	.word	0x001000f0
    1714:	fff0ffff 	.word	0xfff0ffff
    1718:	001002a1 	.word	0x001002a1
    171c:	001002b2 	.word	0x001002b2
    1720:	001002b1 	.word	0x001002b1

00001724 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    1724:	b530      	push	{r4, r5, lr}
    1726:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1728:	4c16      	ldr	r4, [pc, #88]	; (1784 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    172a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    172c:	a901      	add	r1, sp, #4
    172e:	2010      	movs	r0, #16
    1730:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    1732:	2800      	cmp	r0, #0
    1734:	d11c      	bne.n	1770 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    1736:	9b01      	ldr	r3, [sp, #4]
    1738:	422b      	tst	r3, r5
    173a:	d1f7      	bne.n	172c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    173c:	a901      	add	r1, sp, #4
    173e:	3001      	adds	r0, #1
    1740:	4b10      	ldr	r3, [pc, #64]	; (1784 <chip_sleep+0x60>)
    1742:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1744:	2800      	cmp	r0, #0
    1746:	d113      	bne.n	1770 <chip_sleep+0x4c>
	if(reg & NBIT1)
    1748:	9901      	ldr	r1, [sp, #4]
    174a:	078b      	lsls	r3, r1, #30
    174c:	d507      	bpl.n	175e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    174e:	2302      	movs	r3, #2
    1750:	4399      	bics	r1, r3
    1752:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    1754:	3001      	adds	r0, #1
    1756:	4b0c      	ldr	r3, [pc, #48]	; (1788 <chip_sleep+0x64>)
    1758:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    175a:	2800      	cmp	r0, #0
    175c:	d108      	bne.n	1770 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    175e:	a901      	add	r1, sp, #4
    1760:	200b      	movs	r0, #11
    1762:	4b08      	ldr	r3, [pc, #32]	; (1784 <chip_sleep+0x60>)
    1764:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1766:	2800      	cmp	r0, #0
    1768:	d102      	bne.n	1770 <chip_sleep+0x4c>
	if(reg & NBIT0)
    176a:	9901      	ldr	r1, [sp, #4]
    176c:	07cb      	lsls	r3, r1, #31
    176e:	d401      	bmi.n	1774 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    1770:	b003      	add	sp, #12
    1772:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    1774:	2301      	movs	r3, #1
    1776:	4399      	bics	r1, r3
    1778:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    177a:	300b      	adds	r0, #11
    177c:	4b02      	ldr	r3, [pc, #8]	; (1788 <chip_sleep+0x64>)
    177e:	4798      	blx	r3
    1780:	e7f6      	b.n	1770 <chip_sleep+0x4c>
    1782:	46c0      	nop			; (mov r8, r8)
    1784:	00001ba5 	.word	0x00001ba5
    1788:	00001bb1 	.word	0x00001bb1

0000178c <chip_wake>:
sint8 chip_wake(void)
{
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
    178e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    1790:	2300      	movs	r3, #0
    1792:	9301      	str	r3, [sp, #4]
    1794:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1796:	a901      	add	r1, sp, #4
    1798:	200b      	movs	r0, #11
    179a:	4b28      	ldr	r3, [pc, #160]	; (183c <chip_wake+0xb0>)
    179c:	4798      	blx	r3
    179e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    17a0:	d130      	bne.n	1804 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    17a2:	9901      	ldr	r1, [sp, #4]
    17a4:	07cb      	lsls	r3, r1, #31
    17a6:	d406      	bmi.n	17b6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    17a8:	2301      	movs	r3, #1
    17aa:	4319      	orrs	r1, r3
    17ac:	200b      	movs	r0, #11
    17ae:	4b24      	ldr	r3, [pc, #144]	; (1840 <chip_wake+0xb4>)
    17b0:	4798      	blx	r3
    17b2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    17b4:	d126      	bne.n	1804 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    17b6:	a901      	add	r1, sp, #4
    17b8:	2001      	movs	r0, #1
    17ba:	4b20      	ldr	r3, [pc, #128]	; (183c <chip_wake+0xb0>)
    17bc:	4798      	blx	r3
    17be:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    17c0:	d120      	bne.n	1804 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    17c2:	9901      	ldr	r1, [sp, #4]
    17c4:	078b      	lsls	r3, r1, #30
    17c6:	d520      	bpl.n	180a <chip_wake+0x7e>
{
    17c8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    17ca:	4f1c      	ldr	r7, [pc, #112]	; (183c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    17cc:	4e1d      	ldr	r6, [pc, #116]	; (1844 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    17ce:	4669      	mov	r1, sp
    17d0:	200f      	movs	r0, #15
    17d2:	47b8      	blx	r7
    17d4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    17d6:	d120      	bne.n	181a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    17d8:	9b00      	ldr	r3, [sp, #0]
    17da:	075b      	lsls	r3, r3, #29
    17dc:	d42b      	bmi.n	1836 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    17de:	2002      	movs	r0, #2
    17e0:	47b0      	blx	r6
    17e2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    17e4:	2d00      	cmp	r5, #0
    17e6:	d1f2      	bne.n	17ce <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    17e8:	2262      	movs	r2, #98	; 0x62
    17ea:	32ff      	adds	r2, #255	; 0xff
    17ec:	4916      	ldr	r1, [pc, #88]	; (1848 <chip_wake+0xbc>)
    17ee:	4817      	ldr	r0, [pc, #92]	; (184c <chip_wake+0xc0>)
    17f0:	4b17      	ldr	r3, [pc, #92]	; (1850 <chip_wake+0xc4>)
    17f2:	4798      	blx	r3
    17f4:	4817      	ldr	r0, [pc, #92]	; (1854 <chip_wake+0xc8>)
    17f6:	4b18      	ldr	r3, [pc, #96]	; (1858 <chip_wake+0xcc>)
    17f8:	4798      	blx	r3
    17fa:	200d      	movs	r0, #13
    17fc:	4b17      	ldr	r3, [pc, #92]	; (185c <chip_wake+0xd0>)
    17fe:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    1800:	2404      	movs	r4, #4
    1802:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    1804:	0020      	movs	r0, r4
    1806:	b003      	add	sp, #12
    1808:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    180a:	2302      	movs	r3, #2
    180c:	4319      	orrs	r1, r3
    180e:	2001      	movs	r0, #1
    1810:	4b0b      	ldr	r3, [pc, #44]	; (1840 <chip_wake+0xb4>)
    1812:	4798      	blx	r3
    1814:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    1816:	d0d7      	beq.n	17c8 <chip_wake+0x3c>
    1818:	e7f4      	b.n	1804 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    181a:	2258      	movs	r2, #88	; 0x58
    181c:	32ff      	adds	r2, #255	; 0xff
    181e:	490a      	ldr	r1, [pc, #40]	; (1848 <chip_wake+0xbc>)
    1820:	480a      	ldr	r0, [pc, #40]	; (184c <chip_wake+0xc0>)
    1822:	4d0b      	ldr	r5, [pc, #44]	; (1850 <chip_wake+0xc4>)
    1824:	47a8      	blx	r5
    1826:	9a00      	ldr	r2, [sp, #0]
    1828:	0021      	movs	r1, r4
    182a:	480d      	ldr	r0, [pc, #52]	; (1860 <chip_wake+0xd4>)
    182c:	47a8      	blx	r5
    182e:	200d      	movs	r0, #13
    1830:	4b0a      	ldr	r3, [pc, #40]	; (185c <chip_wake+0xd0>)
    1832:	4798      	blx	r3
			goto _WAKE_EXIT;
    1834:	e7e6      	b.n	1804 <chip_wake+0x78>
	nm_bus_reset();
    1836:	4b0b      	ldr	r3, [pc, #44]	; (1864 <chip_wake+0xd8>)
    1838:	4798      	blx	r3
    183a:	e7e3      	b.n	1804 <chip_wake+0x78>
    183c:	00001ba5 	.word	0x00001ba5
    1840:	00001bb1 	.word	0x00001bb1
    1844:	00000205 	.word	0x00000205
    1848:	00007fb8 	.word	0x00007fb8
    184c:	00007a78 	.word	0x00007a78
    1850:	000058d9 	.word	0x000058d9
    1854:	00008000 	.word	0x00008000
    1858:	000059f5 	.word	0x000059f5
    185c:	0000590d 	.word	0x0000590d
    1860:	00007fe8 	.word	0x00007fe8
    1864:	00001b8d 	.word	0x00001b8d

00001868 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    186c:	4d2d      	ldr	r5, [pc, #180]	; (1924 <wait_for_bootrom+0xbc>)
    186e:	4c2e      	ldr	r4, [pc, #184]	; (1928 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1870:	4e2e      	ldr	r6, [pc, #184]	; (192c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1872:	0028      	movs	r0, r5
    1874:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1876:	2800      	cmp	r0, #0
    1878:	db02      	blt.n	1880 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    187a:	2001      	movs	r0, #1
    187c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    187e:	e7f8      	b.n	1872 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    1880:	482b      	ldr	r0, [pc, #172]	; (1930 <wait_for_bootrom+0xc8>)
    1882:	4b29      	ldr	r3, [pc, #164]	; (1928 <wait_for_bootrom+0xc0>)
    1884:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1886:	07c3      	lsls	r3, r0, #31
    1888:	d409      	bmi.n	189e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    188a:	4e28      	ldr	r6, [pc, #160]	; (192c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    188c:	4c29      	ldr	r4, [pc, #164]	; (1934 <wait_for_bootrom+0xcc>)
    188e:	4d26      	ldr	r5, [pc, #152]	; (1928 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    1890:	2001      	movs	r0, #1
    1892:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    1894:	0020      	movs	r0, r4
    1896:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    1898:	4b27      	ldr	r3, [pc, #156]	; (1938 <wait_for_bootrom+0xd0>)
    189a:	4298      	cmp	r0, r3
    189c:	d1f8      	bne.n	1890 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    189e:	2f02      	cmp	r7, #2
    18a0:	d021      	beq.n	18e6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    18a2:	2f03      	cmp	r7, #3
    18a4:	d029      	beq.n	18fa <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    18a6:	2f04      	cmp	r7, #4
    18a8:	d030      	beq.n	190c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    18aa:	4924      	ldr	r1, [pc, #144]	; (193c <wait_for_bootrom+0xd4>)
    18ac:	4824      	ldr	r0, [pc, #144]	; (1940 <wait_for_bootrom+0xd8>)
    18ae:	4b25      	ldr	r3, [pc, #148]	; (1944 <wait_for_bootrom+0xdc>)
    18b0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    18b2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    18b4:	4b24      	ldr	r3, [pc, #144]	; (1948 <wait_for_bootrom+0xe0>)
    18b6:	4798      	blx	r3
    18b8:	0500      	lsls	r0, r0, #20
    18ba:	0d00      	lsrs	r0, r0, #20
    18bc:	4b23      	ldr	r3, [pc, #140]	; (194c <wait_for_bootrom+0xe4>)
    18be:	4298      	cmp	r0, r3
    18c0:	d82a      	bhi.n	1918 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    18c2:	0020      	movs	r0, r4
    18c4:	4b22      	ldr	r3, [pc, #136]	; (1950 <wait_for_bootrom+0xe8>)
    18c6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    18c8:	4822      	ldr	r0, [pc, #136]	; (1954 <wait_for_bootrom+0xec>)
    18ca:	4c23      	ldr	r4, [pc, #140]	; (1958 <wait_for_bootrom+0xf0>)
    18cc:	47a0      	blx	r4
    18ce:	491b      	ldr	r1, [pc, #108]	; (193c <wait_for_bootrom+0xd4>)
    18d0:	4822      	ldr	r0, [pc, #136]	; (195c <wait_for_bootrom+0xf4>)
    18d2:	47a0      	blx	r4
    18d4:	200d      	movs	r0, #13
    18d6:	4b22      	ldr	r3, [pc, #136]	; (1960 <wait_for_bootrom+0xf8>)
    18d8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    18da:	4922      	ldr	r1, [pc, #136]	; (1964 <wait_for_bootrom+0xfc>)
    18dc:	4815      	ldr	r0, [pc, #84]	; (1934 <wait_for_bootrom+0xcc>)
    18de:	4b19      	ldr	r3, [pc, #100]	; (1944 <wait_for_bootrom+0xdc>)
    18e0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    18e2:	2000      	movs	r0, #0
    18e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    18e6:	4920      	ldr	r1, [pc, #128]	; (1968 <wait_for_bootrom+0x100>)
    18e8:	4820      	ldr	r0, [pc, #128]	; (196c <wait_for_bootrom+0x104>)
    18ea:	4c16      	ldr	r4, [pc, #88]	; (1944 <wait_for_bootrom+0xdc>)
    18ec:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    18ee:	2180      	movs	r1, #128	; 0x80
    18f0:	0349      	lsls	r1, r1, #13
    18f2:	4813      	ldr	r0, [pc, #76]	; (1940 <wait_for_bootrom+0xd8>)
    18f4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    18f6:	2400      	movs	r4, #0
    18f8:	e7dc      	b.n	18b4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    18fa:	491b      	ldr	r1, [pc, #108]	; (1968 <wait_for_bootrom+0x100>)
    18fc:	481b      	ldr	r0, [pc, #108]	; (196c <wait_for_bootrom+0x104>)
    18fe:	4c11      	ldr	r4, [pc, #68]	; (1944 <wait_for_bootrom+0xdc>)
    1900:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    1902:	2100      	movs	r1, #0
    1904:	480e      	ldr	r0, [pc, #56]	; (1940 <wait_for_bootrom+0xd8>)
    1906:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    1908:	2400      	movs	r4, #0
    190a:	e7d3      	b.n	18b4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    190c:	490b      	ldr	r1, [pc, #44]	; (193c <wait_for_bootrom+0xd4>)
    190e:	480c      	ldr	r0, [pc, #48]	; (1940 <wait_for_bootrom+0xd8>)
    1910:	4b0c      	ldr	r3, [pc, #48]	; (1944 <wait_for_bootrom+0xdc>)
    1912:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1914:	2480      	movs	r4, #128	; 0x80
    1916:	e7cd      	b.n	18b4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    1918:	2002      	movs	r0, #2
    191a:	4320      	orrs	r0, r4
    191c:	4b0c      	ldr	r3, [pc, #48]	; (1950 <wait_for_bootrom+0xe8>)
    191e:	4798      	blx	r3
    1920:	e7d2      	b.n	18c8 <wait_for_bootrom+0x60>
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	00001014 	.word	0x00001014
    1928:	00001b99 	.word	0x00001b99
    192c:	00000205 	.word	0x00000205
    1930:	000207bc 	.word	0x000207bc
    1934:	000c000c 	.word	0x000c000c
    1938:	10add09e 	.word	0x10add09e
    193c:	13301353 	.word	0x13301353
    1940:	0000108c 	.word	0x0000108c
    1944:	00001bb1 	.word	0x00001bb1
    1948:	00001655 	.word	0x00001655
    194c:	0000039f 	.word	0x0000039f
    1950:	000015c1 	.word	0x000015c1
    1954:	00007da8 	.word	0x00007da8
    1958:	000058d9 	.word	0x000058d9
    195c:	0000801c 	.word	0x0000801c
    1960:	0000590d 	.word	0x0000590d
    1964:	ef522f61 	.word	0xef522f61
    1968:	3c1cd57d 	.word	0x3c1cd57d
    196c:	000207ac 	.word	0x000207ac

00001970 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1970:	b570      	push	{r4, r5, r6, lr}
    1972:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    1974:	4b15      	ldr	r3, [pc, #84]	; (19cc <wait_for_firmware_start+0x5c>)
    1976:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1978:	4b15      	ldr	r3, [pc, #84]	; (19d0 <wait_for_firmware_start+0x60>)
    197a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    197c:	3802      	subs	r0, #2
    197e:	2801      	cmp	r0, #1
    1980:	d911      	bls.n	19a6 <wait_for_firmware_start+0x36>
{
    1982:	2401      	movs	r4, #1
    1984:	4264      	negs	r4, r4
    1986:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1988:	4e12      	ldr	r6, [pc, #72]	; (19d4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    198a:	4d13      	ldr	r5, [pc, #76]	; (19d8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    198c:	9b00      	ldr	r3, [sp, #0]
    198e:	4298      	cmp	r0, r3
    1990:	d00e      	beq.n	19b0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1992:	2002      	movs	r0, #2
    1994:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    1996:	9801      	ldr	r0, [sp, #4]
    1998:	47a8      	blx	r5
    199a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    199c:	2c00      	cmp	r4, #0
    199e:	d1f5      	bne.n	198c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    19a0:	2005      	movs	r0, #5
    19a2:	4240      	negs	r0, r0
    19a4:	e009      	b.n	19ba <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    19a6:	4b0d      	ldr	r3, [pc, #52]	; (19dc <wait_for_firmware_start+0x6c>)
    19a8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    19aa:	4b0d      	ldr	r3, [pc, #52]	; (19e0 <wait_for_firmware_start+0x70>)
    19ac:	9300      	str	r3, [sp, #0]
    19ae:	e7e8      	b.n	1982 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    19b0:	9a00      	ldr	r2, [sp, #0]
    19b2:	4b07      	ldr	r3, [pc, #28]	; (19d0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    19b4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    19b6:	429a      	cmp	r2, r3
    19b8:	d001      	beq.n	19be <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    19ba:	b002      	add	sp, #8
    19bc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    19be:	2100      	movs	r1, #0
    19c0:	4802      	ldr	r0, [pc, #8]	; (19cc <wait_for_firmware_start+0x5c>)
    19c2:	4b08      	ldr	r3, [pc, #32]	; (19e4 <wait_for_firmware_start+0x74>)
    19c4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    19c6:	2000      	movs	r0, #0
    19c8:	e7f7      	b.n	19ba <wait_for_firmware_start+0x4a>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	0000108c 	.word	0x0000108c
    19d0:	02532636 	.word	0x02532636
    19d4:	00000205 	.word	0x00000205
    19d8:	00001b99 	.word	0x00001b99
    19dc:	000207ac 	.word	0x000207ac
    19e0:	d75dc1c3 	.word	0xd75dc1c3
    19e4:	00001bb1 	.word	0x00001bb1

000019e8 <chip_deinit>:

sint8 chip_deinit(void)
{
    19e8:	b510      	push	{r4, lr}
    19ea:	b082      	sub	sp, #8
	uint32 reg = 0;
    19ec:	2300      	movs	r3, #0
    19ee:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    19f0:	a901      	add	r1, sp, #4
    19f2:	20a0      	movs	r0, #160	; 0xa0
    19f4:	0140      	lsls	r0, r0, #5
    19f6:	4b14      	ldr	r3, [pc, #80]	; (1a48 <chip_deinit+0x60>)
    19f8:	4798      	blx	r3
    19fa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    19fc:	d115      	bne.n	1a2a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    19fe:	4913      	ldr	r1, [pc, #76]	; (1a4c <chip_deinit+0x64>)
    1a00:	9b01      	ldr	r3, [sp, #4]
    1a02:	4019      	ands	r1, r3
    1a04:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1a06:	20a0      	movs	r0, #160	; 0xa0
    1a08:	0140      	lsls	r0, r0, #5
    1a0a:	4b11      	ldr	r3, [pc, #68]	; (1a50 <chip_deinit+0x68>)
    1a0c:	4798      	blx	r3
    1a0e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1a10:	d017      	beq.n	1a42 <chip_deinit+0x5a>
		M2M_ERR("failed to de-initialize\n");
    1a12:	4a10      	ldr	r2, [pc, #64]	; (1a54 <chip_deinit+0x6c>)
    1a14:	4910      	ldr	r1, [pc, #64]	; (1a58 <chip_deinit+0x70>)
    1a16:	4811      	ldr	r0, [pc, #68]	; (1a5c <chip_deinit+0x74>)
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <chip_deinit+0x78>)
    1a1a:	4798      	blx	r3
    1a1c:	4811      	ldr	r0, [pc, #68]	; (1a64 <chip_deinit+0x7c>)
    1a1e:	4b12      	ldr	r3, [pc, #72]	; (1a68 <chip_deinit+0x80>)
    1a20:	4798      	blx	r3
    1a22:	200d      	movs	r0, #13
    1a24:	4b11      	ldr	r3, [pc, #68]	; (1a6c <chip_deinit+0x84>)
    1a26:	4798      	blx	r3
		goto ERR1;
    1a28:	e00b      	b.n	1a42 <chip_deinit+0x5a>
		M2M_ERR("failed to de-initialize\n");
    1a2a:	2282      	movs	r2, #130	; 0x82
    1a2c:	0092      	lsls	r2, r2, #2
    1a2e:	490a      	ldr	r1, [pc, #40]	; (1a58 <chip_deinit+0x70>)
    1a30:	480a      	ldr	r0, [pc, #40]	; (1a5c <chip_deinit+0x74>)
    1a32:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <chip_deinit+0x78>)
    1a34:	4798      	blx	r3
    1a36:	480b      	ldr	r0, [pc, #44]	; (1a64 <chip_deinit+0x7c>)
    1a38:	4b0b      	ldr	r3, [pc, #44]	; (1a68 <chip_deinit+0x80>)
    1a3a:	4798      	blx	r3
    1a3c:	200d      	movs	r0, #13
    1a3e:	4b0b      	ldr	r3, [pc, #44]	; (1a6c <chip_deinit+0x84>)
    1a40:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1a42:	0020      	movs	r0, r4
    1a44:	b002      	add	sp, #8
    1a46:	bd10      	pop	{r4, pc}
    1a48:	00001ba5 	.word	0x00001ba5
    1a4c:	fffffbff 	.word	0xfffffbff
    1a50:	00001bb1 	.word	0x00001bb1
    1a54:	0000020e 	.word	0x0000020e
    1a58:	00007fc4 	.word	0x00007fc4
    1a5c:	00007a78 	.word	0x00007a78
    1a60:	000058d9 	.word	0x000058d9
    1a64:	00007fd0 	.word	0x00007fd0
    1a68:	000059f5 	.word	0x000059f5
    1a6c:	0000590d 	.word	0x0000590d

00001a70 <nmi_get_otp_mac_address>:
	return s8Ret;
}
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    1a70:	b570      	push	{r4, r5, r6, lr}
    1a72:	b086      	sub	sp, #24
    1a74:	0006      	movs	r6, r0
    1a76:	000d      	movs	r5, r1
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    1a78:	2208      	movs	r2, #8
    1a7a:	2100      	movs	r1, #0
    1a7c:	a801      	add	r0, sp, #4
    1a7e:	4b1b      	ldr	r3, [pc, #108]	; (1aec <nmi_get_otp_mac_address+0x7c>)
    1a80:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    1a82:	a905      	add	r1, sp, #20
    1a84:	481a      	ldr	r0, [pc, #104]	; (1af0 <nmi_get_otp_mac_address+0x80>)
    1a86:	4b1b      	ldr	r3, [pc, #108]	; (1af4 <nmi_get_otp_mac_address+0x84>)
    1a88:	4798      	blx	r3
    1a8a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    1a8c:	d006      	beq.n	1a9c <nmi_get_otp_mac_address+0x2c>
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    1a8e:	2d00      	cmp	r5, #0
    1a90:	d001      	beq.n	1a96 <nmi_get_otp_mac_address+0x26>
    1a92:	2300      	movs	r3, #0
    1a94:	702b      	strb	r3, [r5, #0]
	return ret;
}
    1a96:	0020      	movs	r0, r4
    1a98:	b006      	add	sp, #24
    1a9a:	bd70      	pop	{r4, r5, r6, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1a9c:	20c0      	movs	r0, #192	; 0xc0
    1a9e:	0280      	lsls	r0, r0, #10
    1aa0:	9b05      	ldr	r3, [sp, #20]
    1aa2:	4318      	orrs	r0, r3
    1aa4:	2208      	movs	r2, #8
    1aa6:	a901      	add	r1, sp, #4
    1aa8:	4b13      	ldr	r3, [pc, #76]	; (1af8 <nmi_get_otp_mac_address+0x88>)
    1aaa:	4798      	blx	r3
    1aac:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    1aae:	d1ee      	bne.n	1a8e <nmi_get_otp_mac_address+0x1e>
	u32RegValue = strgp.u32Mac_efuse_mib;
    1ab0:	9801      	ldr	r0, [sp, #4]
    1ab2:	9005      	str	r0, [sp, #20]
	if(!EFUSED_MAC(u32RegValue)) {
    1ab4:	0c03      	lsrs	r3, r0, #16
    1ab6:	d105      	bne.n	1ac4 <nmi_get_otp_mac_address+0x54>
		m2m_memset(pu8MacAddr, 0, 6);
    1ab8:	2206      	movs	r2, #6
    1aba:	2100      	movs	r1, #0
    1abc:	0030      	movs	r0, r6
    1abe:	4b0f      	ldr	r3, [pc, #60]	; (1afc <nmi_get_otp_mac_address+0x8c>)
    1ac0:	4798      	blx	r3
		goto _EXIT_ERR;
    1ac2:	e7e4      	b.n	1a8e <nmi_get_otp_mac_address+0x1e>
	u32RegValue >>=16;
    1ac4:	0c00      	lsrs	r0, r0, #16
    1ac6:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    1ac8:	23c0      	movs	r3, #192	; 0xc0
    1aca:	029b      	lsls	r3, r3, #10
    1acc:	4318      	orrs	r0, r3
    1ace:	2206      	movs	r2, #6
    1ad0:	a903      	add	r1, sp, #12
    1ad2:	4b09      	ldr	r3, [pc, #36]	; (1af8 <nmi_get_otp_mac_address+0x88>)
    1ad4:	4798      	blx	r3
    1ad6:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr,mac,6);
    1ad8:	2206      	movs	r2, #6
    1ada:	a903      	add	r1, sp, #12
    1adc:	0030      	movs	r0, r6
    1ade:	4b08      	ldr	r3, [pc, #32]	; (1b00 <nmi_get_otp_mac_address+0x90>)
    1ae0:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    1ae2:	2d00      	cmp	r5, #0
    1ae4:	d0d7      	beq.n	1a96 <nmi_get_otp_mac_address+0x26>
    1ae6:	2301      	movs	r3, #1
    1ae8:	702b      	strb	r3, [r5, #0]
    1aea:	e7d4      	b.n	1a96 <nmi_get_otp_mac_address+0x26>
    1aec:	000058c9 	.word	0x000058c9
    1af0:	000c0008 	.word	0x000c0008
    1af4:	00001ba5 	.word	0x00001ba5
    1af8:	00001bbd 	.word	0x00001bbd
    1afc:	0000058d 	.word	0x0000058d
    1b00:	00000579 	.word	0x00000579

00001b04 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    1b04:	b530      	push	{r4, r5, lr}
    1b06:	b087      	sub	sp, #28
    1b08:	0005      	movs	r5, r0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    1b0a:	2208      	movs	r2, #8
    1b0c:	2100      	movs	r1, #0
    1b0e:	a801      	add	r0, sp, #4
    1b10:	4b13      	ldr	r3, [pc, #76]	; (1b60 <nmi_get_mac_address+0x5c>)
    1b12:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    1b14:	a905      	add	r1, sp, #20
    1b16:	4813      	ldr	r0, [pc, #76]	; (1b64 <nmi_get_mac_address+0x60>)
    1b18:	4b13      	ldr	r3, [pc, #76]	; (1b68 <nmi_get_mac_address+0x64>)
    1b1a:	4798      	blx	r3
    1b1c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    1b1e:	d002      	beq.n	1b26 <nmi_get_mac_address+0x22>

	return ret;

_EXIT_ERR:
	return ret;
}
    1b20:	0020      	movs	r0, r4
    1b22:	b007      	add	sp, #28
    1b24:	bd30      	pop	{r4, r5, pc}
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1b26:	20c0      	movs	r0, #192	; 0xc0
    1b28:	0280      	lsls	r0, r0, #10
    1b2a:	9b05      	ldr	r3, [sp, #20]
    1b2c:	4318      	orrs	r0, r3
    1b2e:	2208      	movs	r2, #8
    1b30:	a901      	add	r1, sp, #4
    1b32:	4b0e      	ldr	r3, [pc, #56]	; (1b6c <nmi_get_mac_address+0x68>)
    1b34:	4798      	blx	r3
    1b36:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    1b38:	d1f2      	bne.n	1b20 <nmi_get_mac_address+0x1c>
	u32RegValue &=0x0000ffff;
    1b3a:	9b01      	ldr	r3, [sp, #4]
    1b3c:	0418      	lsls	r0, r3, #16
    1b3e:	0c00      	lsrs	r0, r0, #16
    1b40:	9005      	str	r0, [sp, #20]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    1b42:	23c0      	movs	r3, #192	; 0xc0
    1b44:	029b      	lsls	r3, r3, #10
    1b46:	4318      	orrs	r0, r3
    1b48:	2206      	movs	r2, #6
    1b4a:	a903      	add	r1, sp, #12
    1b4c:	4b07      	ldr	r3, [pc, #28]	; (1b6c <nmi_get_mac_address+0x68>)
    1b4e:	4798      	blx	r3
    1b50:	0004      	movs	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
    1b52:	2206      	movs	r2, #6
    1b54:	a903      	add	r1, sp, #12
    1b56:	0028      	movs	r0, r5
    1b58:	4b05      	ldr	r3, [pc, #20]	; (1b70 <nmi_get_mac_address+0x6c>)
    1b5a:	4798      	blx	r3
	return ret;
    1b5c:	e7e0      	b.n	1b20 <nmi_get_mac_address+0x1c>
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	000058c9 	.word	0x000058c9
    1b64:	000c0008 	.word	0x000c0008
    1b68:	00001ba5 	.word	0x00001ba5
    1b6c:	00001bbd 	.word	0x00001bbd
    1b70:	00000579 	.word	0x00000579

00001b74 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1b74:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <nm_bus_iface_init+0x8>)
    1b78:	4798      	blx	r3
	return ret;
}
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	000002bd 	.word	0x000002bd

00001b80 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1b80:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1b82:	4b01      	ldr	r3, [pc, #4]	; (1b88 <nm_bus_iface_deinit+0x8>)
    1b84:	4798      	blx	r3

	return ret;
}
    1b86:	bd10      	pop	{r4, pc}
    1b88:	0000050d 	.word	0x0000050d

00001b8c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1b8c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1b8e:	4b01      	ldr	r3, [pc, #4]	; (1b94 <nm_bus_reset+0x8>)
    1b90:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    1b92:	bd10      	pop	{r4, pc}
    1b94:	0000253d 	.word	0x0000253d

00001b98 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1b98:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1b9a:	4b01      	ldr	r3, [pc, #4]	; (1ba0 <nm_read_reg+0x8>)
    1b9c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	00002575 	.word	0x00002575

00001ba4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1ba4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1ba6:	4b01      	ldr	r3, [pc, #4]	; (1bac <nm_read_reg_with_ret+0x8>)
    1ba8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1baa:	bd10      	pop	{r4, pc}
    1bac:	00002589 	.word	0x00002589

00001bb0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1bb0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1bb2:	4b01      	ldr	r3, [pc, #4]	; (1bb8 <nm_write_reg+0x8>)
    1bb4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1bb6:	bd10      	pop	{r4, pc}
    1bb8:	000025a1 	.word	0x000025a1

00001bbc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bbe:	46d6      	mov	lr, sl
    1bc0:	464f      	mov	r7, r9
    1bc2:	4646      	mov	r6, r8
    1bc4:	b5c0      	push	{r6, r7, lr}
    1bc6:	b082      	sub	sp, #8
    1bc8:	4680      	mov	r8, r0
    1bca:	4689      	mov	r9, r1
    1bcc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1bce:	4b13      	ldr	r3, [pc, #76]	; (1c1c <nm_read_block+0x60>)
    1bd0:	881f      	ldrh	r7, [r3, #0]
    1bd2:	3f08      	subs	r7, #8
    1bd4:	b2bb      	uxth	r3, r7
    1bd6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1bd8:	001e      	movs	r6, r3
    1bda:	0004      	movs	r4, r0
    1bdc:	429a      	cmp	r2, r3
    1bde:	d91a      	bls.n	1c16 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1be0:	4b0f      	ldr	r3, [pc, #60]	; (1c20 <nm_read_block+0x64>)
    1be2:	469a      	mov	sl, r3
    1be4:	1a37      	subs	r7, r6, r0
    1be6:	4643      	mov	r3, r8
    1be8:	1ae1      	subs	r1, r4, r3
    1bea:	4449      	add	r1, r9
    1bec:	9a01      	ldr	r2, [sp, #4]
    1bee:	0020      	movs	r0, r4
    1bf0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1bf2:	2800      	cmp	r0, #0
    1bf4:	d109      	bne.n	1c0a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1bf6:	1bad      	subs	r5, r5, r6
    1bf8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1bfa:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1bfc:	42b5      	cmp	r5, r6
    1bfe:	d8f2      	bhi.n	1be6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1c00:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1c02:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1c04:	0020      	movs	r0, r4
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <nm_read_block+0x64>)
    1c08:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1c0a:	b002      	add	sp, #8
    1c0c:	bc1c      	pop	{r2, r3, r4}
    1c0e:	4690      	mov	r8, r2
    1c10:	4699      	mov	r9, r3
    1c12:	46a2      	mov	sl, r4
    1c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1c16:	2100      	movs	r1, #0
    1c18:	e7f2      	b.n	1c00 <nm_read_block+0x44>
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	20000008 	.word	0x20000008
    1c20:	000026e5 	.word	0x000026e5

00001c24 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c26:	46d6      	mov	lr, sl
    1c28:	464f      	mov	r7, r9
    1c2a:	4646      	mov	r6, r8
    1c2c:	b5c0      	push	{r6, r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	4680      	mov	r8, r0
    1c32:	4689      	mov	r9, r1
    1c34:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1c36:	4b13      	ldr	r3, [pc, #76]	; (1c84 <nm_write_block+0x60>)
    1c38:	881f      	ldrh	r7, [r3, #0]
    1c3a:	3f08      	subs	r7, #8
    1c3c:	b2bb      	uxth	r3, r7
    1c3e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1c40:	001e      	movs	r6, r3
    1c42:	0004      	movs	r4, r0
    1c44:	429a      	cmp	r2, r3
    1c46:	d91a      	bls.n	1c7e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1c48:	4b0f      	ldr	r3, [pc, #60]	; (1c88 <nm_write_block+0x64>)
    1c4a:	469a      	mov	sl, r3
    1c4c:	1a37      	subs	r7, r6, r0
    1c4e:	4643      	mov	r3, r8
    1c50:	1ae1      	subs	r1, r4, r3
    1c52:	4449      	add	r1, r9
    1c54:	9a01      	ldr	r2, [sp, #4]
    1c56:	0020      	movs	r0, r4
    1c58:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1c5a:	2800      	cmp	r0, #0
    1c5c:	d109      	bne.n	1c72 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1c5e:	1bad      	subs	r5, r5, r6
    1c60:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1c62:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1c64:	42b5      	cmp	r5, r6
    1c66:	d8f2      	bhi.n	1c4e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1c68:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1c6a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1c6c:	0020      	movs	r0, r4
    1c6e:	4b06      	ldr	r3, [pc, #24]	; (1c88 <nm_write_block+0x64>)
    1c70:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1c72:	b002      	add	sp, #8
    1c74:	bc1c      	pop	{r2, r3, r4}
    1c76:	4690      	mov	r8, r2
    1c78:	4699      	mov	r9, r3
    1c7a:	46a2      	mov	sl, r4
    1c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1c7e:	2100      	movs	r1, #0
    1c80:	e7f2      	b.n	1c68 <nm_write_block+0x44>
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	20000008 	.word	0x20000008
    1c88:	00002841 	.word	0x00002841

00001c8c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1c8c:	b570      	push	{r4, r5, r6, lr}
    1c8e:	b084      	sub	sp, #16
    1c90:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1c92:	2300      	movs	r3, #0
    1c94:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1c96:	2208      	movs	r2, #8
    1c98:	2100      	movs	r1, #0
    1c9a:	a801      	add	r0, sp, #4
    1c9c:	4b2d      	ldr	r3, [pc, #180]	; (1d54 <nm_get_firmware_full_info+0xc8>)
    1c9e:	4798      	blx	r3
	if (pstrRev != NULL)
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	d044      	beq.n	1d2e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1ca4:	2228      	movs	r2, #40	; 0x28
    1ca6:	2100      	movs	r1, #0
    1ca8:	0020      	movs	r0, r4
    1caa:	4b2b      	ldr	r3, [pc, #172]	; (1d58 <nm_get_firmware_full_info+0xcc>)
    1cac:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1cae:	a903      	add	r1, sp, #12
    1cb0:	482a      	ldr	r0, [pc, #168]	; (1d5c <nm_get_firmware_full_info+0xd0>)
    1cb2:	4b2b      	ldr	r3, [pc, #172]	; (1d60 <nm_get_firmware_full_info+0xd4>)
    1cb4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1cb6:	2800      	cmp	r0, #0
    1cb8:	d13a      	bne.n	1d30 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1cba:	9b03      	ldr	r3, [sp, #12]
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d039      	beq.n	1d34 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1cc0:	20c0      	movs	r0, #192	; 0xc0
    1cc2:	0280      	lsls	r0, r0, #10
    1cc4:	4318      	orrs	r0, r3
    1cc6:	2208      	movs	r2, #8
    1cc8:	a901      	add	r1, sp, #4
    1cca:	4b26      	ldr	r3, [pc, #152]	; (1d64 <nm_get_firmware_full_info+0xd8>)
    1ccc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1cce:	2800      	cmp	r0, #0
    1cd0:	d12e      	bne.n	1d30 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1cd2:	9b02      	ldr	r3, [sp, #8]
    1cd4:	0418      	lsls	r0, r3, #16
    1cd6:	0c00      	lsrs	r0, r0, #16
    1cd8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1cda:	d02e      	beq.n	1d3a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1cdc:	23c0      	movs	r3, #192	; 0xc0
    1cde:	029b      	lsls	r3, r3, #10
    1ce0:	4318      	orrs	r0, r3
    1ce2:	2228      	movs	r2, #40	; 0x28
    1ce4:	0021      	movs	r1, r4
    1ce6:	4b1f      	ldr	r3, [pc, #124]	; (1d64 <nm_get_firmware_full_info+0xd8>)
    1ce8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1cea:	2800      	cmp	r0, #0
    1cec:	d120      	bne.n	1d30 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1cee:	7921      	ldrb	r1, [r4, #4]
    1cf0:	0209      	lsls	r1, r1, #8
    1cf2:	79a2      	ldrb	r2, [r4, #6]
    1cf4:	230f      	movs	r3, #15
    1cf6:	401a      	ands	r2, r3
    1cf8:	430a      	orrs	r2, r1
    1cfa:	7961      	ldrb	r1, [r4, #5]
    1cfc:	0109      	lsls	r1, r1, #4
    1cfe:	25ff      	movs	r5, #255	; 0xff
    1d00:	4029      	ands	r1, r5
    1d02:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1d04:	79e1      	ldrb	r1, [r4, #7]
    1d06:	0209      	lsls	r1, r1, #8
    1d08:	7a66      	ldrb	r6, [r4, #9]
    1d0a:	4033      	ands	r3, r6
    1d0c:	430b      	orrs	r3, r1
    1d0e:	7a21      	ldrb	r1, [r4, #8]
    1d10:	0109      	lsls	r1, r1, #4
    1d12:	400d      	ands	r5, r1
    1d14:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1d16:	2a00      	cmp	r2, #0
    1d18:	d012      	beq.n	1d40 <nm_get_firmware_full_info+0xb4>
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d013      	beq.n	1d46 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1d1e:	4912      	ldr	r1, [pc, #72]	; (1d68 <nm_get_firmware_full_info+0xdc>)
    1d20:	428b      	cmp	r3, r1
    1d22:	d813      	bhi.n	1d4c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1d24:	4b11      	ldr	r3, [pc, #68]	; (1d6c <nm_get_firmware_full_info+0xe0>)
    1d26:	429a      	cmp	r2, r3
    1d28:	d802      	bhi.n	1d30 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1d2a:	380d      	subs	r0, #13
    1d2c:	e000      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1d2e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1d30:	b004      	add	sp, #16
    1d32:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1d34:	200c      	movs	r0, #12
    1d36:	4240      	negs	r0, r0
    1d38:	e7fa      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1d3a:	200c      	movs	r0, #12
    1d3c:	4240      	negs	r0, r0
    1d3e:	e7f7      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1d40:	200c      	movs	r0, #12
    1d42:	4240      	negs	r0, r0
    1d44:	e7f4      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
    1d46:	200c      	movs	r0, #12
    1d48:	4240      	negs	r0, r0
    1d4a:	e7f1      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1d4c:	200d      	movs	r0, #13
    1d4e:	4240      	negs	r0, r0
    1d50:	e7ee      	b.n	1d30 <nm_get_firmware_full_info+0xa4>
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	000058c9 	.word	0x000058c9
    1d58:	0000058d 	.word	0x0000058d
    1d5c:	000c0008 	.word	0x000c0008
    1d60:	00001ba5 	.word	0x00001ba5
    1d64:	00001bbd 	.word	0x00001bbd
    1d68:	00001353 	.word	0x00001353
    1d6c:	00001352 	.word	0x00001352

00001d70 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1d70:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1d72:	2800      	cmp	r0, #0
    1d74:	d037      	beq.n	1de6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    1d76:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1d78:	1e6b      	subs	r3, r5, #1
    1d7a:	2b03      	cmp	r3, #3
    1d7c:	d900      	bls.n	1d80 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1d7e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1d80:	2000      	movs	r0, #0
    1d82:	4b20      	ldr	r3, [pc, #128]	; (1e04 <nm_drv_init+0x94>)
    1d84:	4798      	blx	r3
    1d86:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1d88:	d12f      	bne.n	1dea <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1d8a:	481f      	ldr	r0, [pc, #124]	; (1e08 <nm_drv_init+0x98>)
    1d8c:	4c1f      	ldr	r4, [pc, #124]	; (1e0c <nm_drv_init+0x9c>)
    1d8e:	47a0      	blx	r4
    1d90:	4b1f      	ldr	r3, [pc, #124]	; (1e10 <nm_drv_init+0xa0>)
    1d92:	4798      	blx	r3
    1d94:	0001      	movs	r1, r0
    1d96:	481f      	ldr	r0, [pc, #124]	; (1e14 <nm_drv_init+0xa4>)
    1d98:	47a0      	blx	r4
    1d9a:	200d      	movs	r0, #13
    1d9c:	4b1e      	ldr	r3, [pc, #120]	; (1e18 <nm_drv_init+0xa8>)
    1d9e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1da0:	4b1e      	ldr	r3, [pc, #120]	; (1e1c <nm_drv_init+0xac>)
    1da2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1da4:	0028      	movs	r0, r5
    1da6:	4b1e      	ldr	r3, [pc, #120]	; (1e20 <nm_drv_init+0xb0>)
    1da8:	4798      	blx	r3
    1daa:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1dac:	d117      	bne.n	1dde <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1dae:	0028      	movs	r0, r5
    1db0:	4b1c      	ldr	r3, [pc, #112]	; (1e24 <nm_drv_init+0xb4>)
    1db2:	4798      	blx	r3
    1db4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1db6:	d112      	bne.n	1dde <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1db8:	3d02      	subs	r5, #2
    1dba:	2d01      	cmp	r5, #1
    1dbc:	d911      	bls.n	1de2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1dbe:	4b1a      	ldr	r3, [pc, #104]	; (1e28 <nm_drv_init+0xb8>)
    1dc0:	4798      	blx	r3
    1dc2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1dc4:	d00d      	beq.n	1de2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    1dc6:	2256      	movs	r2, #86	; 0x56
    1dc8:	32ff      	adds	r2, #255	; 0xff
    1dca:	4918      	ldr	r1, [pc, #96]	; (1e2c <nm_drv_init+0xbc>)
    1dcc:	4818      	ldr	r0, [pc, #96]	; (1e30 <nm_drv_init+0xc0>)
    1dce:	4b0f      	ldr	r3, [pc, #60]	; (1e0c <nm_drv_init+0x9c>)
    1dd0:	4798      	blx	r3
    1dd2:	4818      	ldr	r0, [pc, #96]	; (1e34 <nm_drv_init+0xc4>)
    1dd4:	4b18      	ldr	r3, [pc, #96]	; (1e38 <nm_drv_init+0xc8>)
    1dd6:	4798      	blx	r3
    1dd8:	200d      	movs	r0, #13
    1dda:	4b0f      	ldr	r3, [pc, #60]	; (1e18 <nm_drv_init+0xa8>)
    1ddc:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1dde:	4b17      	ldr	r3, [pc, #92]	; (1e3c <nm_drv_init+0xcc>)
    1de0:	4798      	blx	r3
ERR1:
	return ret;
}
    1de2:	0020      	movs	r0, r4
    1de4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1de6:	2501      	movs	r5, #1
    1de8:	e7ca      	b.n	1d80 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1dea:	2228      	movs	r2, #40	; 0x28
    1dec:	32ff      	adds	r2, #255	; 0xff
    1dee:	490f      	ldr	r1, [pc, #60]	; (1e2c <nm_drv_init+0xbc>)
    1df0:	480f      	ldr	r0, [pc, #60]	; (1e30 <nm_drv_init+0xc0>)
    1df2:	4b06      	ldr	r3, [pc, #24]	; (1e0c <nm_drv_init+0x9c>)
    1df4:	4798      	blx	r3
    1df6:	4812      	ldr	r0, [pc, #72]	; (1e40 <nm_drv_init+0xd0>)
    1df8:	4b0f      	ldr	r3, [pc, #60]	; (1e38 <nm_drv_init+0xc8>)
    1dfa:	4798      	blx	r3
    1dfc:	200d      	movs	r0, #13
    1dfe:	4b06      	ldr	r3, [pc, #24]	; (1e18 <nm_drv_init+0xa8>)
    1e00:	4798      	blx	r3
		goto ERR1;
    1e02:	e7ee      	b.n	1de2 <nm_drv_init+0x72>
    1e04:	00001b75 	.word	0x00001b75
    1e08:	00007da8 	.word	0x00007da8
    1e0c:	000058d9 	.word	0x000058d9
    1e10:	00001655 	.word	0x00001655
    1e14:	000080ec 	.word	0x000080ec
    1e18:	0000590d 	.word	0x0000590d
    1e1c:	000025b9 	.word	0x000025b9
    1e20:	00001869 	.word	0x00001869
    1e24:	00001971 	.word	0x00001971
    1e28:	000015f9 	.word	0x000015f9
    1e2c:	00008034 	.word	0x00008034
    1e30:	00007a78 	.word	0x00007a78
    1e34:	000080b0 	.word	0x000080b0
    1e38:	000059f5 	.word	0x000059f5
    1e3c:	00001b81 	.word	0x00001b81
    1e40:	000080d0 	.word	0x000080d0

00001e44 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1e44:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1e46:	4b1c      	ldr	r3, [pc, #112]	; (1eb8 <nm_drv_deinit+0x74>)
    1e48:	4798      	blx	r3
    1e4a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1e4c:	d10b      	bne.n	1e66 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1e4e:	2000      	movs	r0, #0
    1e50:	4b1a      	ldr	r3, [pc, #104]	; (1ebc <nm_drv_deinit+0x78>)
    1e52:	4798      	blx	r3
    1e54:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1e56:	d114      	bne.n	1e82 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1e58:	4b19      	ldr	r3, [pc, #100]	; (1ec0 <nm_drv_deinit+0x7c>)
    1e5a:	4798      	blx	r3
    1e5c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1e5e:	d11d      	bne.n	1e9c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1e60:	4b18      	ldr	r3, [pc, #96]	; (1ec4 <nm_drv_deinit+0x80>)
    1e62:	4798      	blx	r3
    1e64:	e00b      	b.n	1e7e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1e66:	22b6      	movs	r2, #182	; 0xb6
    1e68:	0052      	lsls	r2, r2, #1
    1e6a:	4917      	ldr	r1, [pc, #92]	; (1ec8 <nm_drv_deinit+0x84>)
    1e6c:	4817      	ldr	r0, [pc, #92]	; (1ecc <nm_drv_deinit+0x88>)
    1e6e:	4b18      	ldr	r3, [pc, #96]	; (1ed0 <nm_drv_deinit+0x8c>)
    1e70:	4798      	blx	r3
    1e72:	4818      	ldr	r0, [pc, #96]	; (1ed4 <nm_drv_deinit+0x90>)
    1e74:	4b18      	ldr	r3, [pc, #96]	; (1ed8 <nm_drv_deinit+0x94>)
    1e76:	4798      	blx	r3
    1e78:	200d      	movs	r0, #13
    1e7a:	4b18      	ldr	r3, [pc, #96]	; (1edc <nm_drv_deinit+0x98>)
    1e7c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1e7e:	0020      	movs	r0, r4
    1e80:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1e82:	2274      	movs	r2, #116	; 0x74
    1e84:	32ff      	adds	r2, #255	; 0xff
    1e86:	4910      	ldr	r1, [pc, #64]	; (1ec8 <nm_drv_deinit+0x84>)
    1e88:	4810      	ldr	r0, [pc, #64]	; (1ecc <nm_drv_deinit+0x88>)
    1e8a:	4b11      	ldr	r3, [pc, #68]	; (1ed0 <nm_drv_deinit+0x8c>)
    1e8c:	4798      	blx	r3
    1e8e:	4814      	ldr	r0, [pc, #80]	; (1ee0 <nm_drv_deinit+0x9c>)
    1e90:	4b11      	ldr	r3, [pc, #68]	; (1ed8 <nm_drv_deinit+0x94>)
    1e92:	4798      	blx	r3
    1e94:	200d      	movs	r0, #13
    1e96:	4b11      	ldr	r3, [pc, #68]	; (1edc <nm_drv_deinit+0x98>)
    1e98:	4798      	blx	r3
		goto ERR1;
    1e9a:	e7f0      	b.n	1e7e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1e9c:	227a      	movs	r2, #122	; 0x7a
    1e9e:	32ff      	adds	r2, #255	; 0xff
    1ea0:	4909      	ldr	r1, [pc, #36]	; (1ec8 <nm_drv_deinit+0x84>)
    1ea2:	480a      	ldr	r0, [pc, #40]	; (1ecc <nm_drv_deinit+0x88>)
    1ea4:	4b0a      	ldr	r3, [pc, #40]	; (1ed0 <nm_drv_deinit+0x8c>)
    1ea6:	4798      	blx	r3
    1ea8:	480e      	ldr	r0, [pc, #56]	; (1ee4 <nm_drv_deinit+0xa0>)
    1eaa:	4b0b      	ldr	r3, [pc, #44]	; (1ed8 <nm_drv_deinit+0x94>)
    1eac:	4798      	blx	r3
    1eae:	200d      	movs	r0, #13
    1eb0:	4b0a      	ldr	r3, [pc, #40]	; (1edc <nm_drv_deinit+0x98>)
    1eb2:	4798      	blx	r3
		goto ERR1;
    1eb4:	e7e3      	b.n	1e7e <nm_drv_deinit+0x3a>
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	000019e9 	.word	0x000019e9
    1ebc:	0000336d 	.word	0x0000336d
    1ec0:	00001b81 	.word	0x00001b81
    1ec4:	00002565 	.word	0x00002565
    1ec8:	00008040 	.word	0x00008040
    1ecc:	00007a78 	.word	0x00007a78
    1ed0:	000058d9 	.word	0x000058d9
    1ed4:	00008050 	.word	0x00008050
    1ed8:	000059f5 	.word	0x000059f5
    1edc:	0000590d 	.word	0x0000590d
    1ee0:	00008070 	.word	0x00008070
    1ee4:	00008094 	.word	0x00008094

00001ee8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1ee8:	b500      	push	{lr}
    1eea:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1eec:	ab01      	add	r3, sp, #4
    1eee:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1ef0:	2200      	movs	r2, #0
    1ef2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ef4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1ef6:	0019      	movs	r1, r3
    1ef8:	2003      	movs	r0, #3
    1efa:	4b02      	ldr	r3, [pc, #8]	; (1f04 <nmi_spi_write+0x1c>)
    1efc:	4798      	blx	r3
}
    1efe:	b005      	add	sp, #20
    1f00:	bd00      	pop	{pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	000003c1 	.word	0x000003c1

00001f08 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1f08:	b570      	push	{r4, r5, r6, lr}
    1f0a:	b084      	sub	sp, #16
    1f0c:	ac08      	add	r4, sp, #32
    1f0e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1f10:	ac01      	add	r4, sp, #4
    1f12:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1f14:	303f      	adds	r0, #63	; 0x3f
    1f16:	b2c4      	uxtb	r4, r0
    1f18:	2c0e      	cmp	r4, #14
    1f1a:	d900      	bls.n	1f1e <spi_cmd+0x16>
    1f1c:	e084      	b.n	2028 <STACK_SIZE+0x28>
    1f1e:	00a0      	lsls	r0, r4, #2
    1f20:	4c4f      	ldr	r4, [pc, #316]	; (2060 <STACK_SIZE+0x60>)
    1f22:	5820      	ldr	r0, [r4, r0]
    1f24:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1f26:	ab01      	add	r3, sp, #4
    1f28:	0c0a      	lsrs	r2, r1, #16
    1f2a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f2c:	0a0a      	lsrs	r2, r1, #8
    1f2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f30:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1f32:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    1f34:	4b4b      	ldr	r3, [pc, #300]	; (2064 <STACK_SIZE+0x64>)
    1f36:	781b      	ldrb	r3, [r3, #0]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d077      	beq.n	202c <STACK_SIZE+0x2c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1f3c:	3901      	subs	r1, #1
    1f3e:	b2c9      	uxtb	r1, r1
    1f40:	e083      	b.n	204a <STACK_SIZE+0x4a>
		bc[1] = (uint8)(adr >> 8);
    1f42:	0a0b      	lsrs	r3, r1, #8
    1f44:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1f46:	2d00      	cmp	r5, #0
    1f48:	d107      	bne.n	1f5a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1f4a:	aa01      	add	r2, sp, #4
    1f4c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1f4e:	ab01      	add	r3, sp, #4
    1f50:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1f52:	2200      	movs	r2, #0
    1f54:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f56:	2105      	movs	r1, #5
		break;
    1f58:	e7ec      	b.n	1f34 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1f5a:	2280      	movs	r2, #128	; 0x80
    1f5c:	4252      	negs	r2, r2
    1f5e:	4313      	orrs	r3, r2
    1f60:	aa01      	add	r2, sp, #4
    1f62:	7053      	strb	r3, [r2, #1]
    1f64:	e7f3      	b.n	1f4e <spi_cmd+0x46>
		bc[1] = 0x00;
    1f66:	ab01      	add	r3, sp, #4
    1f68:	2200      	movs	r2, #0
    1f6a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1f6c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f6e:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f70:	2105      	movs	r1, #5
		break;
    1f72:	e7df      	b.n	1f34 <spi_cmd+0x2c>
		bc[1] = 0x00;
    1f74:	ab01      	add	r3, sp, #4
    1f76:	2200      	movs	r2, #0
    1f78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1f7a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f7c:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f7e:	2105      	movs	r1, #5
		break;
    1f80:	e7d8      	b.n	1f34 <spi_cmd+0x2c>
		bc[1] = 0xff;
    1f82:	ab01      	add	r3, sp, #4
    1f84:	22ff      	movs	r2, #255	; 0xff
    1f86:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1f88:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1f8a:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f8c:	2105      	movs	r1, #5
		break;
    1f8e:	e7d1      	b.n	1f34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1f90:	aa01      	add	r2, sp, #4
    1f92:	0c08      	lsrs	r0, r1, #16
    1f94:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1f96:	0a08      	lsrs	r0, r1, #8
    1f98:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1f9a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1f9c:	0a19      	lsrs	r1, r3, #8
    1f9e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1fa0:	7153      	strb	r3, [r2, #5]
		len = 7;
    1fa2:	2107      	movs	r1, #7
		break;
    1fa4:	e7c6      	b.n	1f34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1fa6:	aa01      	add	r2, sp, #4
    1fa8:	0c08      	lsrs	r0, r1, #16
    1faa:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1fac:	0a08      	lsrs	r0, r1, #8
    1fae:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1fb0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1fb2:	0c19      	lsrs	r1, r3, #16
    1fb4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1fb6:	0a19      	lsrs	r1, r3, #8
    1fb8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1fba:	7193      	strb	r3, [r2, #6]
		len = 8;
    1fbc:	2108      	movs	r1, #8
		break;
    1fbe:	e7b9      	b.n	1f34 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1fc0:	0a0b      	lsrs	r3, r1, #8
    1fc2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1fc4:	2d00      	cmp	r5, #0
    1fc6:	d10c      	bne.n	1fe2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1fc8:	a801      	add	r0, sp, #4
    1fca:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1fcc:	ab01      	add	r3, sp, #4
    1fce:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1fd0:	0e11      	lsrs	r1, r2, #24
    1fd2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1fd4:	0c11      	lsrs	r1, r2, #16
    1fd6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1fd8:	0a11      	lsrs	r1, r2, #8
    1fda:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1fdc:	719a      	strb	r2, [r3, #6]
		len = 8;
    1fde:	2108      	movs	r1, #8
		break;
    1fe0:	e7a8      	b.n	1f34 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1fe2:	2080      	movs	r0, #128	; 0x80
    1fe4:	4240      	negs	r0, r0
    1fe6:	4303      	orrs	r3, r0
    1fe8:	a801      	add	r0, sp, #4
    1fea:	7043      	strb	r3, [r0, #1]
    1fec:	e7ee      	b.n	1fcc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1fee:	ab01      	add	r3, sp, #4
    1ff0:	0c08      	lsrs	r0, r1, #16
    1ff2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1ff4:	0a08      	lsrs	r0, r1, #8
    1ff6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1ff8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1ffa:	0e11      	lsrs	r1, r2, #24
    1ffc:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1ffe:	0c11      	lsrs	r1, r2, #16
    2000:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2002:	0a11      	lsrs	r1, r2, #8
    2004:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2006:	71da      	strb	r2, [r3, #7]
		len = 9;
    2008:	2109      	movs	r1, #9
		break;
    200a:	e793      	b.n	1f34 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    200c:	2228      	movs	r2, #40	; 0x28
    200e:	32ff      	adds	r2, #255	; 0xff
    2010:	4915      	ldr	r1, [pc, #84]	; (2068 <STACK_SIZE+0x68>)
    2012:	4816      	ldr	r0, [pc, #88]	; (206c <STACK_SIZE+0x6c>)
    2014:	4b16      	ldr	r3, [pc, #88]	; (2070 <STACK_SIZE+0x70>)
    2016:	4798      	blx	r3
    2018:	4816      	ldr	r0, [pc, #88]	; (2074 <STACK_SIZE+0x74>)
    201a:	4b17      	ldr	r3, [pc, #92]	; (2078 <STACK_SIZE+0x78>)
    201c:	4798      	blx	r3
    201e:	200d      	movs	r0, #13
    2020:	4b16      	ldr	r3, [pc, #88]	; (207c <STACK_SIZE+0x7c>)
    2022:	4798      	blx	r3
			result = N_FAIL;
    2024:	2300      	movs	r3, #0
    2026:	e017      	b.n	2058 <STACK_SIZE+0x58>
	switch (cmd) {
    2028:	2300      	movs	r3, #0
    202a:	e015      	b.n	2058 <STACK_SIZE+0x58>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    202c:	1e4e      	subs	r6, r1, #1
    202e:	aa01      	add	r2, sp, #4
    2030:	1995      	adds	r5, r2, r6
    2032:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2034:	4c12      	ldr	r4, [pc, #72]	; (2080 <STACK_SIZE+0x80>)
    2036:	005b      	lsls	r3, r3, #1
    2038:	7810      	ldrb	r0, [r2, #0]
    203a:	4043      	eors	r3, r0
    203c:	5ce3      	ldrb	r3, [r4, r3]
    203e:	3201      	adds	r2, #1
	while (len--)
    2040:	42aa      	cmp	r2, r5
    2042:	d1f8      	bne.n	2036 <STACK_SIZE+0x36>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2044:	005b      	lsls	r3, r3, #1
    2046:	aa01      	add	r2, sp, #4
    2048:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    204a:	b289      	uxth	r1, r1
    204c:	a801      	add	r0, sp, #4
    204e:	4b0d      	ldr	r3, [pc, #52]	; (2084 <STACK_SIZE+0x84>)
    2050:	4798      	blx	r3
    2052:	2301      	movs	r3, #1
    2054:	2800      	cmp	r0, #0
    2056:	d1d9      	bne.n	200c <STACK_SIZE+0xc>
		}
	}

	return result;
}
    2058:	0018      	movs	r0, r3
    205a:	b004      	add	sp, #16
    205c:	bd70      	pop	{r4, r5, r6, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	000080fc 	.word	0x000080fc
    2064:	200002ac 	.word	0x200002ac
    2068:	0000813c 	.word	0x0000813c
    206c:	00007a78 	.word	0x00007a78
    2070:	000058d9 	.word	0x000058d9
    2074:	000085cc 	.word	0x000085cc
    2078:	000059f5 	.word	0x000059f5
    207c:	0000590d 	.word	0x0000590d
    2080:	000081c8 	.word	0x000081c8
    2084:	00001ee9 	.word	0x00001ee9

00002088 <nmi_spi_read>:
{
    2088:	b500      	push	{lr}
    208a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    208c:	ab01      	add	r3, sp, #4
    208e:	2200      	movs	r2, #0
    2090:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2092:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2094:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2096:	0019      	movs	r1, r3
    2098:	2003      	movs	r0, #3
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <nmi_spi_read+0x1c>)
    209c:	4798      	blx	r3
}
    209e:	b005      	add	sp, #20
    20a0:	bd00      	pop	{pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	000003c1 	.word	0x000003c1

000020a8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    20a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20aa:	46c6      	mov	lr, r8
    20ac:	b500      	push	{lr}
    20ae:	b082      	sub	sp, #8
    20b0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    20b2:	28cf      	cmp	r0, #207	; 0xcf
    20b4:	d02b      	beq.n	210e <spi_cmd_rsp+0x66>
    20b6:	0003      	movs	r3, r0
    20b8:	333b      	adds	r3, #59	; 0x3b
    20ba:	b2db      	uxtb	r3, r3
    20bc:	2b01      	cmp	r3, #1
    20be:	d926      	bls.n	210e <spi_cmd_rsp+0x66>
{
    20c0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    20c2:	466b      	mov	r3, sp
    20c4:	1dde      	adds	r6, r3, #7
    20c6:	4b26      	ldr	r3, [pc, #152]	; (2160 <spi_cmd_rsp+0xb8>)
    20c8:	4698      	mov	r8, r3
    20ca:	2101      	movs	r1, #1
    20cc:	0030      	movs	r0, r6
    20ce:	47c0      	blx	r8
    20d0:	1e05      	subs	r5, r0, #0
    20d2:	d125      	bne.n	2120 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    20d4:	7833      	ldrb	r3, [r6, #0]
    20d6:	42bb      	cmp	r3, r7
    20d8:	d030      	beq.n	213c <spi_cmd_rsp+0x94>
    20da:	3c01      	subs	r4, #1
    20dc:	b2e4      	uxtb	r4, r4
    20de:	2c00      	cmp	r4, #0
    20e0:	d1f3      	bne.n	20ca <spi_cmd_rsp+0x22>
    20e2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    20e4:	466b      	mov	r3, sp
    20e6:	1dde      	adds	r6, r3, #7
    20e8:	4f1d      	ldr	r7, [pc, #116]	; (2160 <spi_cmd_rsp+0xb8>)
    20ea:	2101      	movs	r1, #1
    20ec:	0030      	movs	r0, r6
    20ee:	47b8      	blx	r7
    20f0:	2800      	cmp	r0, #0
    20f2:	d125      	bne.n	2140 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    20f4:	7833      	ldrb	r3, [r6, #0]
    20f6:	2b00      	cmp	r3, #0
    20f8:	d02f      	beq.n	215a <spi_cmd_rsp+0xb2>
    20fa:	3c01      	subs	r4, #1
    20fc:	b2e4      	uxtb	r4, r4
    20fe:	2c00      	cmp	r4, #0
    2100:	d1f3      	bne.n	20ea <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2102:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2104:	0028      	movs	r0, r5
    2106:	b002      	add	sp, #8
    2108:	bc04      	pop	{r2}
    210a:	4690      	mov	r8, r2
    210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    210e:	2101      	movs	r1, #1
    2110:	466b      	mov	r3, sp
    2112:	1dd8      	adds	r0, r3, #7
    2114:	4b12      	ldr	r3, [pc, #72]	; (2160 <spi_cmd_rsp+0xb8>)
    2116:	4798      	blx	r3
			result = N_FAIL;
    2118:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    211a:	2800      	cmp	r0, #0
    211c:	d0d0      	beq.n	20c0 <spi_cmd_rsp+0x18>
    211e:	e7f1      	b.n	2104 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2120:	22b1      	movs	r2, #177	; 0xb1
    2122:	0052      	lsls	r2, r2, #1
    2124:	490f      	ldr	r1, [pc, #60]	; (2164 <spi_cmd_rsp+0xbc>)
    2126:	4810      	ldr	r0, [pc, #64]	; (2168 <spi_cmd_rsp+0xc0>)
    2128:	4b10      	ldr	r3, [pc, #64]	; (216c <spi_cmd_rsp+0xc4>)
    212a:	4798      	blx	r3
    212c:	4810      	ldr	r0, [pc, #64]	; (2170 <spi_cmd_rsp+0xc8>)
    212e:	4b11      	ldr	r3, [pc, #68]	; (2174 <spi_cmd_rsp+0xcc>)
    2130:	4798      	blx	r3
    2132:	200d      	movs	r0, #13
    2134:	4b10      	ldr	r3, [pc, #64]	; (2178 <spi_cmd_rsp+0xd0>)
    2136:	4798      	blx	r3
			result = N_FAIL;
    2138:	2500      	movs	r5, #0
			goto _fail_;
    213a:	e7e3      	b.n	2104 <spi_cmd_rsp+0x5c>
    213c:	240b      	movs	r4, #11
    213e:	e7d1      	b.n	20e4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2140:	22b8      	movs	r2, #184	; 0xb8
    2142:	0052      	lsls	r2, r2, #1
    2144:	4907      	ldr	r1, [pc, #28]	; (2164 <spi_cmd_rsp+0xbc>)
    2146:	4808      	ldr	r0, [pc, #32]	; (2168 <spi_cmd_rsp+0xc0>)
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <spi_cmd_rsp+0xc4>)
    214a:	4798      	blx	r3
    214c:	4808      	ldr	r0, [pc, #32]	; (2170 <spi_cmd_rsp+0xc8>)
    214e:	4b09      	ldr	r3, [pc, #36]	; (2174 <spi_cmd_rsp+0xcc>)
    2150:	4798      	blx	r3
    2152:	200d      	movs	r0, #13
    2154:	4b08      	ldr	r3, [pc, #32]	; (2178 <spi_cmd_rsp+0xd0>)
    2156:	4798      	blx	r3
			goto _fail_;
    2158:	e7d4      	b.n	2104 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    215a:	2501      	movs	r5, #1
    215c:	e7d2      	b.n	2104 <spi_cmd_rsp+0x5c>
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	00002089 	.word	0x00002089
    2164:	00008154 	.word	0x00008154
    2168:	00007a78 	.word	0x00007a78
    216c:	000058d9 	.word	0x000058d9
    2170:	000085f8 	.word	0x000085f8
    2174:	000059f5 	.word	0x000059f5
    2178:	0000590d 	.word	0x0000590d

0000217c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
    217e:	46de      	mov	lr, fp
    2180:	4657      	mov	r7, sl
    2182:	464e      	mov	r6, r9
    2184:	4645      	mov	r5, r8
    2186:	b5e0      	push	{r5, r6, r7, lr}
    2188:	b087      	sub	sp, #28
    218a:	9001      	str	r0, [sp, #4]
    218c:	4689      	mov	r9, r1
    218e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2190:	2300      	movs	r3, #0
    2192:	469a      	mov	sl, r3
    2194:	2380      	movs	r3, #128	; 0x80
    2196:	019b      	lsls	r3, r3, #6
    2198:	469b      	mov	fp, r3
    219a:	466a      	mov	r2, sp
    219c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    219e:	4b3b      	ldr	r3, [pc, #236]	; (228c <spi_data_read+0x110>)
    21a0:	4698      	mov	r8, r3
    21a2:	e02e      	b.n	2202 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    21a4:	4a3a      	ldr	r2, [pc, #232]	; (2290 <spi_data_read+0x114>)
    21a6:	493b      	ldr	r1, [pc, #236]	; (2294 <spi_data_read+0x118>)
    21a8:	483b      	ldr	r0, [pc, #236]	; (2298 <spi_data_read+0x11c>)
    21aa:	4b3c      	ldr	r3, [pc, #240]	; (229c <spi_data_read+0x120>)
    21ac:	4798      	blx	r3
    21ae:	483c      	ldr	r0, [pc, #240]	; (22a0 <spi_data_read+0x124>)
    21b0:	4b3c      	ldr	r3, [pc, #240]	; (22a4 <spi_data_read+0x128>)
    21b2:	4798      	blx	r3
    21b4:	200d      	movs	r0, #13
    21b6:	4b3c      	ldr	r3, [pc, #240]	; (22a8 <spi_data_read+0x12c>)
    21b8:	4798      	blx	r3
    21ba:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    21bc:	0028      	movs	r0, r5
    21be:	b007      	add	sp, #28
    21c0:	bc3c      	pop	{r2, r3, r4, r5}
    21c2:	4690      	mov	r8, r2
    21c4:	4699      	mov	r9, r3
    21c6:	46a2      	mov	sl, r4
    21c8:	46ab      	mov	fp, r5
    21ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    21cc:	2c00      	cmp	r4, #0
    21ce:	dd2e      	ble.n	222e <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    21d0:	9b01      	ldr	r3, [sp, #4]
    21d2:	4453      	add	r3, sl
    21d4:	0018      	movs	r0, r3
    21d6:	0039      	movs	r1, r7
    21d8:	4b2c      	ldr	r3, [pc, #176]	; (228c <spi_data_read+0x110>)
    21da:	4798      	blx	r3
    21dc:	1e04      	subs	r4, r0, #0
    21de:	d133      	bne.n	2248 <spi_data_read+0xcc>
		if(!clockless)
    21e0:	9b02      	ldr	r3, [sp, #8]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d103      	bne.n	21ee <spi_data_read+0x72>
			if (!gu8Crc_off) {
    21e6:	4b31      	ldr	r3, [pc, #196]	; (22ac <spi_data_read+0x130>)
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d039      	beq.n	2262 <spi_data_read+0xe6>
		ix += nbytes;
    21ee:	4653      	mov	r3, sl
    21f0:	18fb      	adds	r3, r7, r3
    21f2:	b21b      	sxth	r3, r3
    21f4:	469a      	mov	sl, r3
		sz -= nbytes;
    21f6:	464b      	mov	r3, r9
    21f8:	1bdf      	subs	r7, r3, r7
    21fa:	b2bb      	uxth	r3, r7
    21fc:	4699      	mov	r9, r3
	} while (sz);
    21fe:	2b00      	cmp	r3, #0
    2200:	d042      	beq.n	2288 <spi_data_read+0x10c>
    2202:	464f      	mov	r7, r9
    2204:	45d9      	cmp	r9, fp
    2206:	d901      	bls.n	220c <spi_data_read+0x90>
    2208:	466b      	mov	r3, sp
    220a:	89df      	ldrh	r7, [r3, #14]
    220c:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    220e:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2210:	ab04      	add	r3, sp, #16
    2212:	1cde      	adds	r6, r3, #3
    2214:	2101      	movs	r1, #1
    2216:	0030      	movs	r0, r6
    2218:	47c0      	blx	r8
    221a:	1e05      	subs	r5, r0, #0
    221c:	d1c2      	bne.n	21a4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    221e:	7833      	ldrb	r3, [r6, #0]
    2220:	091b      	lsrs	r3, r3, #4
    2222:	2b0f      	cmp	r3, #15
    2224:	d0d2      	beq.n	21cc <spi_data_read+0x50>
    2226:	3c01      	subs	r4, #1
    2228:	b224      	sxth	r4, r4
		} while (retry--);
    222a:	1c63      	adds	r3, r4, #1
    222c:	d1f2      	bne.n	2214 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    222e:	4a20      	ldr	r2, [pc, #128]	; (22b0 <spi_data_read+0x134>)
    2230:	4918      	ldr	r1, [pc, #96]	; (2294 <spi_data_read+0x118>)
    2232:	4819      	ldr	r0, [pc, #100]	; (2298 <spi_data_read+0x11c>)
    2234:	4c19      	ldr	r4, [pc, #100]	; (229c <spi_data_read+0x120>)
    2236:	47a0      	blx	r4
    2238:	ab04      	add	r3, sp, #16
    223a:	78d9      	ldrb	r1, [r3, #3]
    223c:	481d      	ldr	r0, [pc, #116]	; (22b4 <spi_data_read+0x138>)
    223e:	47a0      	blx	r4
    2240:	200d      	movs	r0, #13
    2242:	4b19      	ldr	r3, [pc, #100]	; (22a8 <spi_data_read+0x12c>)
    2244:	4798      	blx	r3
			break;
    2246:	e7b9      	b.n	21bc <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2248:	22c5      	movs	r2, #197	; 0xc5
    224a:	0092      	lsls	r2, r2, #2
    224c:	4911      	ldr	r1, [pc, #68]	; (2294 <spi_data_read+0x118>)
    224e:	4812      	ldr	r0, [pc, #72]	; (2298 <spi_data_read+0x11c>)
    2250:	4b12      	ldr	r3, [pc, #72]	; (229c <spi_data_read+0x120>)
    2252:	4798      	blx	r3
    2254:	4818      	ldr	r0, [pc, #96]	; (22b8 <spi_data_read+0x13c>)
    2256:	4b13      	ldr	r3, [pc, #76]	; (22a4 <spi_data_read+0x128>)
    2258:	4798      	blx	r3
    225a:	200d      	movs	r0, #13
    225c:	4b12      	ldr	r3, [pc, #72]	; (22a8 <spi_data_read+0x12c>)
    225e:	4798      	blx	r3
			break;
    2260:	e7ac      	b.n	21bc <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2262:	2102      	movs	r1, #2
    2264:	a805      	add	r0, sp, #20
    2266:	4b09      	ldr	r3, [pc, #36]	; (228c <spi_data_read+0x110>)
    2268:	4798      	blx	r3
    226a:	2800      	cmp	r0, #0
    226c:	d0bf      	beq.n	21ee <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    226e:	4a13      	ldr	r2, [pc, #76]	; (22bc <spi_data_read+0x140>)
    2270:	4908      	ldr	r1, [pc, #32]	; (2294 <spi_data_read+0x118>)
    2272:	4809      	ldr	r0, [pc, #36]	; (2298 <spi_data_read+0x11c>)
    2274:	4b09      	ldr	r3, [pc, #36]	; (229c <spi_data_read+0x120>)
    2276:	4798      	blx	r3
    2278:	4811      	ldr	r0, [pc, #68]	; (22c0 <spi_data_read+0x144>)
    227a:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <spi_data_read+0x128>)
    227c:	4798      	blx	r3
    227e:	200d      	movs	r0, #13
    2280:	4b09      	ldr	r3, [pc, #36]	; (22a8 <spi_data_read+0x12c>)
    2282:	4798      	blx	r3
					result = N_FAIL;
    2284:	0025      	movs	r5, r4
					break;
    2286:	e799      	b.n	21bc <spi_data_read+0x40>
    2288:	2501      	movs	r5, #1
    228a:	e797      	b.n	21bc <spi_data_read+0x40>
    228c:	00002089 	.word	0x00002089
    2290:	000002ff 	.word	0x000002ff
    2294:	00008160 	.word	0x00008160
    2298:	00007a78 	.word	0x00007a78
    229c:	000058d9 	.word	0x000058d9
    22a0:	0000862c 	.word	0x0000862c
    22a4:	000059f5 	.word	0x000059f5
    22a8:	0000590d 	.word	0x0000590d
    22ac:	200002ac 	.word	0x200002ac
    22b0:	0000030b 	.word	0x0000030b
    22b4:	00008660 	.word	0x00008660
    22b8:	00008690 	.word	0x00008690
    22bc:	0000031f 	.word	0x0000031f
    22c0:	000086c0 	.word	0x000086c0

000022c4 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    22c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22c6:	46d6      	mov	lr, sl
    22c8:	464f      	mov	r7, r9
    22ca:	4646      	mov	r6, r8
    22cc:	b5c0      	push	{r6, r7, lr}
    22ce:	b086      	sub	sp, #24
    22d0:	9003      	str	r0, [sp, #12]
    22d2:	9104      	str	r1, [sp, #16]
    22d4:	2830      	cmp	r0, #48	; 0x30
    22d6:	d80f      	bhi.n	22f8 <spi_write_reg+0x34>
    22d8:	4b30      	ldr	r3, [pc, #192]	; (239c <spi_write_reg+0xd8>)
    22da:	781f      	ldrb	r7, [r3, #0]
    22dc:	b2fb      	uxtb	r3, r7
    22de:	9305      	str	r3, [sp, #20]
    22e0:	2300      	movs	r3, #0
    22e2:	2230      	movs	r2, #48	; 0x30
    22e4:	9903      	ldr	r1, [sp, #12]
    22e6:	428a      	cmp	r2, r1
    22e8:	415b      	adcs	r3, r3
    22ea:	b2db      	uxtb	r3, r3
    22ec:	469a      	mov	sl, r3
    22ee:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    22f0:	4b2b      	ldr	r3, [pc, #172]	; (23a0 <spi_write_reg+0xdc>)
    22f2:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    22f4:	46d1      	mov	r9, sl
    22f6:	e033      	b.n	2360 <spi_write_reg+0x9c>
    22f8:	4b2a      	ldr	r3, [pc, #168]	; (23a4 <spi_write_reg+0xe0>)
    22fa:	781f      	ldrb	r7, [r3, #0]
    22fc:	e7ee      	b.n	22dc <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    22fe:	9805      	ldr	r0, [sp, #20]
    2300:	4b29      	ldr	r3, [pc, #164]	; (23a8 <spi_write_reg+0xe4>)
    2302:	4798      	blx	r3
    2304:	0004      	movs	r4, r0
	if (result != N_OK) {
    2306:	2801      	cmp	r0, #1
    2308:	d041      	beq.n	238e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    230a:	22e7      	movs	r2, #231	; 0xe7
    230c:	0092      	lsls	r2, r2, #2
    230e:	4927      	ldr	r1, [pc, #156]	; (23ac <spi_write_reg+0xe8>)
    2310:	4827      	ldr	r0, [pc, #156]	; (23b0 <spi_write_reg+0xec>)
    2312:	4e28      	ldr	r6, [pc, #160]	; (23b4 <spi_write_reg+0xf0>)
    2314:	47b0      	blx	r6
    2316:	9903      	ldr	r1, [sp, #12]
    2318:	4827      	ldr	r0, [pc, #156]	; (23b8 <spi_write_reg+0xf4>)
    231a:	47b0      	blx	r6
    231c:	200d      	movs	r0, #13
    231e:	4b27      	ldr	r3, [pc, #156]	; (23bc <spi_write_reg+0xf8>)
    2320:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2322:	2001      	movs	r0, #1
    2324:	4e26      	ldr	r6, [pc, #152]	; (23c0 <spi_write_reg+0xfc>)
    2326:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2328:	2300      	movs	r3, #0
    232a:	9300      	str	r3, [sp, #0]
    232c:	2200      	movs	r2, #0
    232e:	2100      	movs	r1, #0
    2330:	20cf      	movs	r0, #207	; 0xcf
    2332:	4f1b      	ldr	r7, [pc, #108]	; (23a0 <spi_write_reg+0xdc>)
    2334:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2336:	20cf      	movs	r0, #207	; 0xcf
    2338:	4b1b      	ldr	r3, [pc, #108]	; (23a8 <spi_write_reg+0xe4>)
    233a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    233c:	4a21      	ldr	r2, [pc, #132]	; (23c4 <spi_write_reg+0x100>)
    233e:	491b      	ldr	r1, [pc, #108]	; (23ac <spi_write_reg+0xe8>)
    2340:	481b      	ldr	r0, [pc, #108]	; (23b0 <spi_write_reg+0xec>)
    2342:	4f1c      	ldr	r7, [pc, #112]	; (23b4 <spi_write_reg+0xf0>)
    2344:	47b8      	blx	r7
    2346:	9b04      	ldr	r3, [sp, #16]
    2348:	9a03      	ldr	r2, [sp, #12]
    234a:	0029      	movs	r1, r5
    234c:	481e      	ldr	r0, [pc, #120]	; (23c8 <spi_write_reg+0x104>)
    234e:	47b8      	blx	r7
    2350:	200d      	movs	r0, #13
    2352:	4b1a      	ldr	r3, [pc, #104]	; (23bc <spi_write_reg+0xf8>)
    2354:	4798      	blx	r3
		nm_bsp_sleep(1);
    2356:	2001      	movs	r0, #1
    2358:	47b0      	blx	r6
    235a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    235c:	2d00      	cmp	r5, #0
    235e:	d016      	beq.n	238e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2360:	464b      	mov	r3, r9
    2362:	9300      	str	r3, [sp, #0]
    2364:	2304      	movs	r3, #4
    2366:	9a04      	ldr	r2, [sp, #16]
    2368:	9f03      	ldr	r7, [sp, #12]
    236a:	0039      	movs	r1, r7
    236c:	9805      	ldr	r0, [sp, #20]
    236e:	47c0      	blx	r8
    2370:	0004      	movs	r4, r0
	if (result != N_OK) {
    2372:	2801      	cmp	r0, #1
    2374:	d0c3      	beq.n	22fe <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2376:	4a15      	ldr	r2, [pc, #84]	; (23cc <spi_write_reg+0x108>)
    2378:	490c      	ldr	r1, [pc, #48]	; (23ac <spi_write_reg+0xe8>)
    237a:	480d      	ldr	r0, [pc, #52]	; (23b0 <spi_write_reg+0xec>)
    237c:	4e0d      	ldr	r6, [pc, #52]	; (23b4 <spi_write_reg+0xf0>)
    237e:	47b0      	blx	r6
    2380:	0039      	movs	r1, r7
    2382:	4813      	ldr	r0, [pc, #76]	; (23d0 <spi_write_reg+0x10c>)
    2384:	47b0      	blx	r6
    2386:	200d      	movs	r0, #13
    2388:	4b0c      	ldr	r3, [pc, #48]	; (23bc <spi_write_reg+0xf8>)
    238a:	4798      	blx	r3
		goto _FAIL_;
    238c:	e7c9      	b.n	2322 <spi_write_reg+0x5e>
	}

	return result;
}
    238e:	0020      	movs	r0, r4
    2390:	b006      	add	sp, #24
    2392:	bc1c      	pop	{r2, r3, r4}
    2394:	4690      	mov	r8, r2
    2396:	4699      	mov	r9, r3
    2398:	46a2      	mov	sl, r4
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239c:	00008138 	.word	0x00008138
    23a0:	00001f09 	.word	0x00001f09
    23a4:	00008139 	.word	0x00008139
    23a8:	000020a9 	.word	0x000020a9
    23ac:	00008180 	.word	0x00008180
    23b0:	00007a78 	.word	0x00007a78
    23b4:	000058d9 	.word	0x000058d9
    23b8:	000087b8 	.word	0x000087b8
    23bc:	0000590d 	.word	0x0000590d
    23c0:	00000205 	.word	0x00000205
    23c4:	000003af 	.word	0x000003af
    23c8:	000087f0 	.word	0x000087f0
    23cc:	00000396 	.word	0x00000396
    23d0:	0000878c 	.word	0x0000878c

000023d4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	46de      	mov	lr, fp
    23d8:	4657      	mov	r7, sl
    23da:	464e      	mov	r6, r9
    23dc:	4645      	mov	r5, r8
    23de:	b5e0      	push	{r5, r6, r7, lr}
    23e0:	b087      	sub	sp, #28
    23e2:	9002      	str	r0, [sp, #8]
    23e4:	468b      	mov	fp, r1
    23e6:	28ff      	cmp	r0, #255	; 0xff
    23e8:	d80f      	bhi.n	240a <spi_read_reg+0x36>
    23ea:	4b41      	ldr	r3, [pc, #260]	; (24f0 <spi_read_reg+0x11c>)
    23ec:	781f      	ldrb	r7, [r3, #0]
    23ee:	b2fb      	uxtb	r3, r7
    23f0:	9303      	str	r3, [sp, #12]
    23f2:	2300      	movs	r3, #0
    23f4:	22ff      	movs	r2, #255	; 0xff
    23f6:	9902      	ldr	r1, [sp, #8]
    23f8:	428a      	cmp	r2, r1
    23fa:	415b      	adcs	r3, r3
    23fc:	b2db      	uxtb	r3, r3
    23fe:	469a      	mov	sl, r3
    2400:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2402:	4b3c      	ldr	r3, [pc, #240]	; (24f4 <spi_read_reg+0x120>)
    2404:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2406:	46d1      	mov	r9, sl
    2408:	e031      	b.n	246e <spi_read_reg+0x9a>
    240a:	4b3b      	ldr	r3, [pc, #236]	; (24f8 <spi_read_reg+0x124>)
    240c:	781f      	ldrb	r7, [r3, #0]
    240e:	e7ee      	b.n	23ee <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2410:	9803      	ldr	r0, [sp, #12]
    2412:	4b3a      	ldr	r3, [pc, #232]	; (24fc <spi_read_reg+0x128>)
    2414:	4798      	blx	r3
    2416:	0004      	movs	r4, r0
	if (result != N_OK) {
    2418:	2801      	cmp	r0, #1
    241a:	d03f      	beq.n	249c <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    241c:	4a38      	ldr	r2, [pc, #224]	; (2500 <spi_read_reg+0x12c>)
    241e:	4939      	ldr	r1, [pc, #228]	; (2504 <spi_read_reg+0x130>)
    2420:	4839      	ldr	r0, [pc, #228]	; (2508 <spi_read_reg+0x134>)
    2422:	4e3a      	ldr	r6, [pc, #232]	; (250c <spi_read_reg+0x138>)
    2424:	47b0      	blx	r6
    2426:	9902      	ldr	r1, [sp, #8]
    2428:	4839      	ldr	r0, [pc, #228]	; (2510 <spi_read_reg+0x13c>)
    242a:	47b0      	blx	r6
    242c:	200d      	movs	r0, #13
    242e:	4b39      	ldr	r3, [pc, #228]	; (2514 <spi_read_reg+0x140>)
    2430:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2432:	2001      	movs	r0, #1
    2434:	4e38      	ldr	r6, [pc, #224]	; (2518 <spi_read_reg+0x144>)
    2436:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2438:	2300      	movs	r3, #0
    243a:	9300      	str	r3, [sp, #0]
    243c:	2200      	movs	r2, #0
    243e:	2100      	movs	r1, #0
    2440:	20cf      	movs	r0, #207	; 0xcf
    2442:	4f2c      	ldr	r7, [pc, #176]	; (24f4 <spi_read_reg+0x120>)
    2444:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2446:	20cf      	movs	r0, #207	; 0xcf
    2448:	4b2c      	ldr	r3, [pc, #176]	; (24fc <spi_read_reg+0x128>)
    244a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    244c:	4a33      	ldr	r2, [pc, #204]	; (251c <spi_read_reg+0x148>)
    244e:	492d      	ldr	r1, [pc, #180]	; (2504 <spi_read_reg+0x130>)
    2450:	482d      	ldr	r0, [pc, #180]	; (2508 <spi_read_reg+0x134>)
    2452:	4f2e      	ldr	r7, [pc, #184]	; (250c <spi_read_reg+0x138>)
    2454:	47b8      	blx	r7
    2456:	9a02      	ldr	r2, [sp, #8]
    2458:	0029      	movs	r1, r5
    245a:	4831      	ldr	r0, [pc, #196]	; (2520 <spi_read_reg+0x14c>)
    245c:	47b8      	blx	r7
    245e:	200d      	movs	r0, #13
    2460:	4b2c      	ldr	r3, [pc, #176]	; (2514 <spi_read_reg+0x140>)
    2462:	4798      	blx	r3
		nm_bsp_sleep(1);
    2464:	2001      	movs	r0, #1
    2466:	47b0      	blx	r6
    2468:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    246a:	2d00      	cmp	r5, #0
    246c:	d037      	beq.n	24de <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    246e:	464b      	mov	r3, r9
    2470:	9300      	str	r3, [sp, #0]
    2472:	2304      	movs	r3, #4
    2474:	2200      	movs	r2, #0
    2476:	9f02      	ldr	r7, [sp, #8]
    2478:	0039      	movs	r1, r7
    247a:	9803      	ldr	r0, [sp, #12]
    247c:	47c0      	blx	r8
    247e:	0004      	movs	r4, r0
	if (result != N_OK) {
    2480:	2801      	cmp	r0, #1
    2482:	d0c5      	beq.n	2410 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2484:	4a27      	ldr	r2, [pc, #156]	; (2524 <spi_read_reg+0x150>)
    2486:	491f      	ldr	r1, [pc, #124]	; (2504 <spi_read_reg+0x130>)
    2488:	481f      	ldr	r0, [pc, #124]	; (2508 <spi_read_reg+0x134>)
    248a:	4e20      	ldr	r6, [pc, #128]	; (250c <spi_read_reg+0x138>)
    248c:	47b0      	blx	r6
    248e:	0039      	movs	r1, r7
    2490:	4825      	ldr	r0, [pc, #148]	; (2528 <spi_read_reg+0x154>)
    2492:	47b0      	blx	r6
    2494:	200d      	movs	r0, #13
    2496:	4b1f      	ldr	r3, [pc, #124]	; (2514 <spi_read_reg+0x140>)
    2498:	4798      	blx	r3
		goto _FAIL_;
    249a:	e7ca      	b.n	2432 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    249c:	464a      	mov	r2, r9
    249e:	2104      	movs	r1, #4
    24a0:	a805      	add	r0, sp, #20
    24a2:	4b22      	ldr	r3, [pc, #136]	; (252c <spi_read_reg+0x158>)
    24a4:	4798      	blx	r3
    24a6:	0004      	movs	r4, r0
	if (result != N_OK) {
    24a8:	2801      	cmp	r0, #1
    24aa:	d00b      	beq.n	24c4 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    24ac:	4a20      	ldr	r2, [pc, #128]	; (2530 <spi_read_reg+0x15c>)
    24ae:	4915      	ldr	r1, [pc, #84]	; (2504 <spi_read_reg+0x130>)
    24b0:	4815      	ldr	r0, [pc, #84]	; (2508 <spi_read_reg+0x134>)
    24b2:	4b16      	ldr	r3, [pc, #88]	; (250c <spi_read_reg+0x138>)
    24b4:	4798      	blx	r3
    24b6:	481f      	ldr	r0, [pc, #124]	; (2534 <spi_read_reg+0x160>)
    24b8:	4b1f      	ldr	r3, [pc, #124]	; (2538 <spi_read_reg+0x164>)
    24ba:	4798      	blx	r3
    24bc:	200d      	movs	r0, #13
    24be:	4b15      	ldr	r3, [pc, #84]	; (2514 <spi_read_reg+0x140>)
    24c0:	4798      	blx	r3
		goto _FAIL_;
    24c2:	e7b6      	b.n	2432 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    24c4:	aa05      	add	r2, sp, #20
    24c6:	7853      	ldrb	r3, [r2, #1]
    24c8:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    24ca:	7891      	ldrb	r1, [r2, #2]
    24cc:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    24ce:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    24d0:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    24d2:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    24d4:	78d2      	ldrb	r2, [r2, #3]
    24d6:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    24d8:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    24da:	465a      	mov	r2, fp
    24dc:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    24de:	0020      	movs	r0, r4
    24e0:	b007      	add	sp, #28
    24e2:	bc3c      	pop	{r2, r3, r4, r5}
    24e4:	4690      	mov	r8, r2
    24e6:	4699      	mov	r9, r3
    24e8:	46a2      	mov	sl, r4
    24ea:	46ab      	mov	fp, r5
    24ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	0000813a 	.word	0x0000813a
    24f4:	00001f09 	.word	0x00001f09
    24f8:	0000813b 	.word	0x0000813b
    24fc:	000020a9 	.word	0x000020a9
    2500:	0000041d 	.word	0x0000041d
    2504:	000081a0 	.word	0x000081a0
    2508:	00007a78 	.word	0x00007a78
    250c:	000058d9 	.word	0x000058d9
    2510:	00008720 	.word	0x00008720
    2514:	0000590d 	.word	0x0000590d
    2518:	00000205 	.word	0x00000205
    251c:	0000043c 	.word	0x0000043c
    2520:	00008774 	.word	0x00008774
    2524:	00000417 	.word	0x00000417
    2528:	000086f4 	.word	0x000086f4
    252c:	0000217d 	.word	0x0000217d
    2530:	00000424 	.word	0x00000424
    2534:	00008754 	.word	0x00008754
    2538:	000059f5 	.word	0x000059f5

0000253c <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    253c:	b510      	push	{r4, lr}
    253e:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2540:	2300      	movs	r3, #0
    2542:	9300      	str	r3, [sp, #0]
    2544:	2200      	movs	r2, #0
    2546:	2100      	movs	r1, #0
    2548:	20cf      	movs	r0, #207	; 0xcf
    254a:	4c04      	ldr	r4, [pc, #16]	; (255c <nm_spi_reset+0x20>)
    254c:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    254e:	20cf      	movs	r0, #207	; 0xcf
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <nm_spi_reset+0x24>)
    2552:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2554:	2000      	movs	r0, #0
    2556:	b002      	add	sp, #8
    2558:	bd10      	pop	{r4, pc}
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	00001f09 	.word	0x00001f09
    2560:	000020a9 	.word	0x000020a9

00002564 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2564:	2200      	movs	r2, #0
    2566:	4b02      	ldr	r3, [pc, #8]	; (2570 <nm_spi_deinit+0xc>)
    2568:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    256a:	2000      	movs	r0, #0
    256c:	4770      	bx	lr
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	200002ac 	.word	0x200002ac

00002574 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2574:	b500      	push	{lr}
    2576:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2578:	a901      	add	r1, sp, #4
    257a:	4b02      	ldr	r3, [pc, #8]	; (2584 <nm_spi_read_reg+0x10>)
    257c:	4798      	blx	r3

	return u32Val;
}
    257e:	9801      	ldr	r0, [sp, #4]
    2580:	b003      	add	sp, #12
    2582:	bd00      	pop	{pc}
    2584:	000023d5 	.word	0x000023d5

00002588 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2588:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    258a:	4b04      	ldr	r3, [pc, #16]	; (259c <nm_spi_read_reg_with_ret+0x14>)
    258c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    258e:	2300      	movs	r3, #0
    2590:	2801      	cmp	r0, #1
    2592:	d101      	bne.n	2598 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2594:	0018      	movs	r0, r3
    2596:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2598:	3b06      	subs	r3, #6
    259a:	e7fb      	b.n	2594 <nm_spi_read_reg_with_ret+0xc>
    259c:	000023d5 	.word	0x000023d5

000025a0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    25a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    25a2:	4b04      	ldr	r3, [pc, #16]	; (25b4 <nm_spi_write_reg+0x14>)
    25a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    25a6:	2300      	movs	r3, #0
    25a8:	2801      	cmp	r0, #1
    25aa:	d101      	bne.n	25b0 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    25ac:	0018      	movs	r0, r3
    25ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    25b0:	3b06      	subs	r3, #6
    25b2:	e7fb      	b.n	25ac <nm_spi_write_reg+0xc>
    25b4:	000022c5 	.word	0x000022c5

000025b8 <nm_spi_init>:
{
    25b8:	b510      	push	{r4, lr}
    25ba:	b082      	sub	sp, #8
	uint32 reg = 0;
    25bc:	2300      	movs	r3, #0
    25be:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    25c0:	4a35      	ldr	r2, [pc, #212]	; (2698 <nm_spi_init+0xe0>)
    25c2:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    25c4:	4669      	mov	r1, sp
    25c6:	4835      	ldr	r0, [pc, #212]	; (269c <nm_spi_init+0xe4>)
    25c8:	4b35      	ldr	r3, [pc, #212]	; (26a0 <nm_spi_init+0xe8>)
    25ca:	4798      	blx	r3
    25cc:	2800      	cmp	r0, #0
    25ce:	d028      	beq.n	2622 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    25d0:	4b31      	ldr	r3, [pc, #196]	; (2698 <nm_spi_init+0xe0>)
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	2b00      	cmp	r3, #0
    25d6:	d10d      	bne.n	25f4 <nm_spi_init+0x3c>
		reg &= ~0x70;
    25d8:	337c      	adds	r3, #124	; 0x7c
    25da:	9900      	ldr	r1, [sp, #0]
    25dc:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    25de:	3b2c      	subs	r3, #44	; 0x2c
    25e0:	4319      	orrs	r1, r3
    25e2:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    25e4:	482d      	ldr	r0, [pc, #180]	; (269c <nm_spi_init+0xe4>)
    25e6:	4b2f      	ldr	r3, [pc, #188]	; (26a4 <nm_spi_init+0xec>)
    25e8:	4798      	blx	r3
    25ea:	1e04      	subs	r4, r0, #0
    25ec:	d039      	beq.n	2662 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    25ee:	2201      	movs	r2, #1
    25f0:	4b29      	ldr	r3, [pc, #164]	; (2698 <nm_spi_init+0xe0>)
    25f2:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    25f4:	a901      	add	r1, sp, #4
    25f6:	2080      	movs	r0, #128	; 0x80
    25f8:	0140      	lsls	r0, r0, #5
    25fa:	4b29      	ldr	r3, [pc, #164]	; (26a0 <nm_spi_init+0xe8>)
    25fc:	4798      	blx	r3
    25fe:	2800      	cmp	r0, #0
    2600:	d03b      	beq.n	267a <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2602:	4c26      	ldr	r4, [pc, #152]	; (269c <nm_spi_init+0xe4>)
    2604:	0020      	movs	r0, r4
    2606:	4b28      	ldr	r3, [pc, #160]	; (26a8 <nm_spi_init+0xf0>)
    2608:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    260a:	2370      	movs	r3, #112	; 0x70
    260c:	0001      	movs	r1, r0
    260e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2610:	2050      	movs	r0, #80	; 0x50
    2612:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2614:	0020      	movs	r0, r4
    2616:	4b25      	ldr	r3, [pc, #148]	; (26ac <nm_spi_init+0xf4>)
    2618:	4798      	blx	r3
	return M2M_SUCCESS;
    261a:	2400      	movs	r4, #0
}
    261c:	0020      	movs	r0, r4
    261e:	b002      	add	sp, #8
    2620:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2622:	2201      	movs	r2, #1
    2624:	4b1c      	ldr	r3, [pc, #112]	; (2698 <nm_spi_init+0xe0>)
    2626:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2628:	4a21      	ldr	r2, [pc, #132]	; (26b0 <nm_spi_init+0xf8>)
    262a:	4922      	ldr	r1, [pc, #136]	; (26b4 <nm_spi_init+0xfc>)
    262c:	4822      	ldr	r0, [pc, #136]	; (26b8 <nm_spi_init+0x100>)
    262e:	4b23      	ldr	r3, [pc, #140]	; (26bc <nm_spi_init+0x104>)
    2630:	4798      	blx	r3
    2632:	4823      	ldr	r0, [pc, #140]	; (26c0 <nm_spi_init+0x108>)
    2634:	4b23      	ldr	r3, [pc, #140]	; (26c4 <nm_spi_init+0x10c>)
    2636:	4798      	blx	r3
    2638:	200d      	movs	r0, #13
    263a:	4b23      	ldr	r3, [pc, #140]	; (26c8 <nm_spi_init+0x110>)
    263c:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    263e:	4669      	mov	r1, sp
    2640:	4816      	ldr	r0, [pc, #88]	; (269c <nm_spi_init+0xe4>)
    2642:	4b17      	ldr	r3, [pc, #92]	; (26a0 <nm_spi_init+0xe8>)
    2644:	4798      	blx	r3
    2646:	1e04      	subs	r4, r0, #0
    2648:	d1c2      	bne.n	25d0 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    264a:	4a20      	ldr	r2, [pc, #128]	; (26cc <nm_spi_init+0x114>)
    264c:	4919      	ldr	r1, [pc, #100]	; (26b4 <nm_spi_init+0xfc>)
    264e:	481a      	ldr	r0, [pc, #104]	; (26b8 <nm_spi_init+0x100>)
    2650:	4b1a      	ldr	r3, [pc, #104]	; (26bc <nm_spi_init+0x104>)
    2652:	4798      	blx	r3
    2654:	481e      	ldr	r0, [pc, #120]	; (26d0 <nm_spi_init+0x118>)
    2656:	4b1b      	ldr	r3, [pc, #108]	; (26c4 <nm_spi_init+0x10c>)
    2658:	4798      	blx	r3
    265a:	200d      	movs	r0, #13
    265c:	4b1a      	ldr	r3, [pc, #104]	; (26c8 <nm_spi_init+0x110>)
    265e:	4798      	blx	r3
			return 0;
    2660:	e7dc      	b.n	261c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2662:	4a1c      	ldr	r2, [pc, #112]	; (26d4 <nm_spi_init+0x11c>)
    2664:	4913      	ldr	r1, [pc, #76]	; (26b4 <nm_spi_init+0xfc>)
    2666:	4814      	ldr	r0, [pc, #80]	; (26b8 <nm_spi_init+0x100>)
    2668:	4b14      	ldr	r3, [pc, #80]	; (26bc <nm_spi_init+0x104>)
    266a:	4798      	blx	r3
    266c:	481a      	ldr	r0, [pc, #104]	; (26d8 <nm_spi_init+0x120>)
    266e:	4b15      	ldr	r3, [pc, #84]	; (26c4 <nm_spi_init+0x10c>)
    2670:	4798      	blx	r3
    2672:	200d      	movs	r0, #13
    2674:	4b14      	ldr	r3, [pc, #80]	; (26c8 <nm_spi_init+0x110>)
    2676:	4798      	blx	r3
			return 0;
    2678:	e7d0      	b.n	261c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    267a:	4a18      	ldr	r2, [pc, #96]	; (26dc <nm_spi_init+0x124>)
    267c:	490d      	ldr	r1, [pc, #52]	; (26b4 <nm_spi_init+0xfc>)
    267e:	480e      	ldr	r0, [pc, #56]	; (26b8 <nm_spi_init+0x100>)
    2680:	4b0e      	ldr	r3, [pc, #56]	; (26bc <nm_spi_init+0x104>)
    2682:	4798      	blx	r3
    2684:	4816      	ldr	r0, [pc, #88]	; (26e0 <nm_spi_init+0x128>)
    2686:	4b0f      	ldr	r3, [pc, #60]	; (26c4 <nm_spi_init+0x10c>)
    2688:	4798      	blx	r3
    268a:	200d      	movs	r0, #13
    268c:	4b0e      	ldr	r3, [pc, #56]	; (26c8 <nm_spi_init+0x110>)
    268e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2690:	2406      	movs	r4, #6
    2692:	4264      	negs	r4, r4
    2694:	e7c2      	b.n	261c <nm_spi_init+0x64>
    2696:	46c0      	nop			; (mov r8, r8)
    2698:	200002ac 	.word	0x200002ac
    269c:	0000e824 	.word	0x0000e824
    26a0:	000023d5 	.word	0x000023d5
    26a4:	000022c5 	.word	0x000022c5
    26a8:	00002575 	.word	0x00002575
    26ac:	000025a1 	.word	0x000025a1
    26b0:	000004c7 	.word	0x000004c7
    26b4:	000081bc 	.word	0x000081bc
    26b8:	00007a78 	.word	0x00007a78
    26bc:	000058d9 	.word	0x000058d9
    26c0:	000082c8 	.word	0x000082c8
    26c4:	000059f5 	.word	0x000059f5
    26c8:	0000590d 	.word	0x0000590d
    26cc:	000004ca 	.word	0x000004ca
    26d0:	00008318 	.word	0x00008318
    26d4:	000004d4 	.word	0x000004d4
    26d8:	00008344 	.word	0x00008344
    26dc:	000004de 	.word	0x000004de
    26e0:	00008378 	.word	0x00008378

000026e4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	46de      	mov	lr, fp
    26e8:	4657      	mov	r7, sl
    26ea:	464e      	mov	r6, r9
    26ec:	4645      	mov	r5, r8
    26ee:	b5e0      	push	{r5, r6, r7, lr}
    26f0:	b087      	sub	sp, #28
    26f2:	9002      	str	r0, [sp, #8]
    26f4:	9103      	str	r1, [sp, #12]
    26f6:	0016      	movs	r6, r2
    26f8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    26fa:	2300      	movs	r3, #0
    26fc:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    26fe:	2400      	movs	r4, #0
    2700:	4b3e      	ldr	r3, [pc, #248]	; (27fc <nm_spi_read_block+0x118>)
    2702:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    2704:	46a9      	mov	r9, r5
    2706:	e037      	b.n	2778 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    2708:	2301      	movs	r3, #1
    270a:	469b      	mov	fp, r3
		size = 2;
    270c:	3601      	adds	r6, #1
    270e:	e035      	b.n	277c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    2710:	20c8      	movs	r0, #200	; 0xc8
    2712:	4b3b      	ldr	r3, [pc, #236]	; (2800 <nm_spi_read_block+0x11c>)
    2714:	4798      	blx	r3
	if (result != N_OK) {
    2716:	2801      	cmp	r0, #1
    2718:	d045      	beq.n	27a6 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    271a:	4a3a      	ldr	r2, [pc, #232]	; (2804 <nm_spi_read_block+0x120>)
    271c:	493a      	ldr	r1, [pc, #232]	; (2808 <nm_spi_read_block+0x124>)
    271e:	483b      	ldr	r0, [pc, #236]	; (280c <nm_spi_read_block+0x128>)
    2720:	4f3b      	ldr	r7, [pc, #236]	; (2810 <nm_spi_read_block+0x12c>)
    2722:	47b8      	blx	r7
    2724:	9902      	ldr	r1, [sp, #8]
    2726:	483b      	ldr	r0, [pc, #236]	; (2814 <nm_spi_read_block+0x130>)
    2728:	47b8      	blx	r7
    272a:	200d      	movs	r0, #13
    272c:	4b3a      	ldr	r3, [pc, #232]	; (2818 <nm_spi_read_block+0x134>)
    272e:	4798      	blx	r3
		nm_bsp_sleep(1);
    2730:	2001      	movs	r0, #1
    2732:	4f3a      	ldr	r7, [pc, #232]	; (281c <nm_spi_read_block+0x138>)
    2734:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2736:	9400      	str	r4, [sp, #0]
    2738:	0023      	movs	r3, r4
    273a:	0022      	movs	r2, r4
    273c:	0021      	movs	r1, r4
    273e:	20cf      	movs	r0, #207	; 0xcf
    2740:	4d2e      	ldr	r5, [pc, #184]	; (27fc <nm_spi_read_block+0x118>)
    2742:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    2744:	20cf      	movs	r0, #207	; 0xcf
    2746:	4b2e      	ldr	r3, [pc, #184]	; (2800 <nm_spi_read_block+0x11c>)
    2748:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    274a:	4a35      	ldr	r2, [pc, #212]	; (2820 <nm_spi_read_block+0x13c>)
    274c:	492e      	ldr	r1, [pc, #184]	; (2808 <nm_spi_read_block+0x124>)
    274e:	482f      	ldr	r0, [pc, #188]	; (280c <nm_spi_read_block+0x128>)
    2750:	4b2f      	ldr	r3, [pc, #188]	; (2810 <nm_spi_read_block+0x12c>)
    2752:	469a      	mov	sl, r3
    2754:	4798      	blx	r3
    2756:	0033      	movs	r3, r6
    2758:	9a02      	ldr	r2, [sp, #8]
    275a:	4649      	mov	r1, r9
    275c:	4831      	ldr	r0, [pc, #196]	; (2824 <nm_spi_read_block+0x140>)
    275e:	47d0      	blx	sl
    2760:	200d      	movs	r0, #13
    2762:	4b2d      	ldr	r3, [pc, #180]	; (2818 <nm_spi_read_block+0x134>)
    2764:	4798      	blx	r3
		nm_bsp_sleep(1);
    2766:	2001      	movs	r0, #1
    2768:	47b8      	blx	r7
    276a:	2301      	movs	r3, #1
    276c:	425b      	negs	r3, r3
    276e:	469c      	mov	ip, r3
    2770:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    2772:	464b      	mov	r3, r9
    2774:	2b00      	cmp	r3, #0
    2776:	d038      	beq.n	27ea <nm_spi_read_block+0x106>
	if (size == 1)
    2778:	2e01      	cmp	r6, #1
    277a:	d0c5      	beq.n	2708 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    277c:	9400      	str	r4, [sp, #0]
    277e:	0033      	movs	r3, r6
    2780:	0022      	movs	r2, r4
    2782:	9d02      	ldr	r5, [sp, #8]
    2784:	0029      	movs	r1, r5
    2786:	20c8      	movs	r0, #200	; 0xc8
    2788:	47c0      	blx	r8
	if (result != N_OK) {
    278a:	2801      	cmp	r0, #1
    278c:	d0c0      	beq.n	2710 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    278e:	4a26      	ldr	r2, [pc, #152]	; (2828 <nm_spi_read_block+0x144>)
    2790:	491d      	ldr	r1, [pc, #116]	; (2808 <nm_spi_read_block+0x124>)
    2792:	481e      	ldr	r0, [pc, #120]	; (280c <nm_spi_read_block+0x128>)
    2794:	4f1e      	ldr	r7, [pc, #120]	; (2810 <nm_spi_read_block+0x12c>)
    2796:	47b8      	blx	r7
    2798:	0029      	movs	r1, r5
    279a:	4824      	ldr	r0, [pc, #144]	; (282c <nm_spi_read_block+0x148>)
    279c:	47b8      	blx	r7
    279e:	200d      	movs	r0, #13
    27a0:	4b1d      	ldr	r3, [pc, #116]	; (2818 <nm_spi_read_block+0x134>)
    27a2:	4798      	blx	r3
    27a4:	e7c4      	b.n	2730 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    27a6:	465b      	mov	r3, fp
    27a8:	2b00      	cmp	r3, #0
    27aa:	d016      	beq.n	27da <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    27ac:	af05      	add	r7, sp, #20
    27ae:	0022      	movs	r2, r4
    27b0:	0031      	movs	r1, r6
    27b2:	0038      	movs	r0, r7
    27b4:	4b1e      	ldr	r3, [pc, #120]	; (2830 <nm_spi_read_block+0x14c>)
    27b6:	4798      	blx	r3
		buf[0] = tmp[0];
    27b8:	783b      	ldrb	r3, [r7, #0]
    27ba:	9a03      	ldr	r2, [sp, #12]
    27bc:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    27be:	2801      	cmp	r0, #1
    27c0:	d011      	beq.n	27e6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    27c2:	4a1c      	ldr	r2, [pc, #112]	; (2834 <nm_spi_read_block+0x150>)
    27c4:	4910      	ldr	r1, [pc, #64]	; (2808 <nm_spi_read_block+0x124>)
    27c6:	4811      	ldr	r0, [pc, #68]	; (280c <nm_spi_read_block+0x128>)
    27c8:	4b11      	ldr	r3, [pc, #68]	; (2810 <nm_spi_read_block+0x12c>)
    27ca:	4798      	blx	r3
    27cc:	481a      	ldr	r0, [pc, #104]	; (2838 <nm_spi_read_block+0x154>)
    27ce:	4b1b      	ldr	r3, [pc, #108]	; (283c <nm_spi_read_block+0x158>)
    27d0:	4798      	blx	r3
    27d2:	200d      	movs	r0, #13
    27d4:	4b10      	ldr	r3, [pc, #64]	; (2818 <nm_spi_read_block+0x134>)
    27d6:	4798      	blx	r3
    27d8:	e7aa      	b.n	2730 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    27da:	0022      	movs	r2, r4
    27dc:	0031      	movs	r1, r6
    27de:	9803      	ldr	r0, [sp, #12]
    27e0:	4b13      	ldr	r3, [pc, #76]	; (2830 <nm_spi_read_block+0x14c>)
    27e2:	4798      	blx	r3
    27e4:	e7eb      	b.n	27be <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    27e6:	2000      	movs	r0, #0
    27e8:	e001      	b.n	27ee <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    27ea:	2006      	movs	r0, #6
    27ec:	4240      	negs	r0, r0

	return s8Ret;
}
    27ee:	b007      	add	sp, #28
    27f0:	bc3c      	pop	{r2, r3, r4, r5}
    27f2:	4690      	mov	r8, r2
    27f4:	4699      	mov	r9, r3
    27f6:	46a2      	mov	sl, r4
    27f8:	46ab      	mov	fp, r5
    27fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27fc:	00001f09 	.word	0x00001f09
    2800:	000020a9 	.word	0x000020a9
    2804:	00000463 	.word	0x00000463
    2808:	000081b0 	.word	0x000081b0
    280c:	00007a78 	.word	0x00007a78
    2810:	000058d9 	.word	0x000058d9
    2814:	000083cc 	.word	0x000083cc
    2818:	0000590d 	.word	0x0000590d
    281c:	00000205 	.word	0x00000205
    2820:	00000484 	.word	0x00000484
    2824:	0000842c 	.word	0x0000842c
    2828:	0000045d 	.word	0x0000045d
    282c:	0000839c 	.word	0x0000839c
    2830:	0000217d 	.word	0x0000217d
    2834:	00000473 	.word	0x00000473
    2838:	00008404 	.word	0x00008404
    283c:	000059f5 	.word	0x000059f5

00002840 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2840:	b5f0      	push	{r4, r5, r6, r7, lr}
    2842:	46de      	mov	lr, fp
    2844:	4647      	mov	r7, r8
    2846:	b580      	push	{r7, lr}
    2848:	b089      	sub	sp, #36	; 0x24
    284a:	9004      	str	r0, [sp, #16]
    284c:	468b      	mov	fp, r1
    284e:	9203      	str	r2, [sp, #12]
    2850:	260a      	movs	r6, #10
    2852:	2780      	movs	r7, #128	; 0x80
    2854:	01bf      	lsls	r7, r7, #6
    2856:	466b      	mov	r3, sp
    2858:	82df      	strh	r7, [r3, #22]
    285a:	0035      	movs	r5, r6
    285c:	e02d      	b.n	28ba <nm_spi_write_block+0x7a>
		size = 2;
    285e:	3301      	adds	r3, #1
    2860:	9303      	str	r3, [sp, #12]
    2862:	e02d      	b.n	28c0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2864:	4a83      	ldr	r2, [pc, #524]	; (2a74 <nm_spi_write_block+0x234>)
    2866:	4984      	ldr	r1, [pc, #528]	; (2a78 <nm_spi_write_block+0x238>)
    2868:	4884      	ldr	r0, [pc, #528]	; (2a7c <nm_spi_write_block+0x23c>)
    286a:	4c85      	ldr	r4, [pc, #532]	; (2a80 <nm_spi_write_block+0x240>)
    286c:	47a0      	blx	r4
    286e:	0031      	movs	r1, r6
    2870:	4884      	ldr	r0, [pc, #528]	; (2a84 <nm_spi_write_block+0x244>)
    2872:	47a0      	blx	r4
    2874:	200d      	movs	r0, #13
    2876:	4b84      	ldr	r3, [pc, #528]	; (2a88 <nm_spi_write_block+0x248>)
    2878:	4798      	blx	r3
		nm_bsp_sleep(1);
    287a:	2001      	movs	r0, #1
    287c:	4c83      	ldr	r4, [pc, #524]	; (2a8c <nm_spi_write_block+0x24c>)
    287e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2880:	2300      	movs	r3, #0
    2882:	9300      	str	r3, [sp, #0]
    2884:	2200      	movs	r2, #0
    2886:	2100      	movs	r1, #0
    2888:	20cf      	movs	r0, #207	; 0xcf
    288a:	4e81      	ldr	r6, [pc, #516]	; (2a90 <nm_spi_write_block+0x250>)
    288c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    288e:	20cf      	movs	r0, #207	; 0xcf
    2890:	4b80      	ldr	r3, [pc, #512]	; (2a94 <nm_spi_write_block+0x254>)
    2892:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    2894:	4a80      	ldr	r2, [pc, #512]	; (2a98 <nm_spi_write_block+0x258>)
    2896:	4978      	ldr	r1, [pc, #480]	; (2a78 <nm_spi_write_block+0x238>)
    2898:	4878      	ldr	r0, [pc, #480]	; (2a7c <nm_spi_write_block+0x23c>)
    289a:	4e79      	ldr	r6, [pc, #484]	; (2a80 <nm_spi_write_block+0x240>)
    289c:	47b0      	blx	r6
    289e:	9b03      	ldr	r3, [sp, #12]
    28a0:	9a04      	ldr	r2, [sp, #16]
    28a2:	0029      	movs	r1, r5
    28a4:	487d      	ldr	r0, [pc, #500]	; (2a9c <nm_spi_write_block+0x25c>)
    28a6:	47b0      	blx	r6
    28a8:	200d      	movs	r0, #13
    28aa:	4b77      	ldr	r3, [pc, #476]	; (2a88 <nm_spi_write_block+0x248>)
    28ac:	4798      	blx	r3
		nm_bsp_sleep(1);
    28ae:	2001      	movs	r0, #1
    28b0:	47a0      	blx	r4
    28b2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    28b4:	2d00      	cmp	r5, #0
    28b6:	d100      	bne.n	28ba <nm_spi_write_block+0x7a>
    28b8:	e0d5      	b.n	2a66 <nm_spi_write_block+0x226>
	if (size == 1)
    28ba:	9b03      	ldr	r3, [sp, #12]
    28bc:	2b01      	cmp	r3, #1
    28be:	d0ce      	beq.n	285e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    28c0:	2300      	movs	r3, #0
    28c2:	9300      	str	r3, [sp, #0]
    28c4:	9b03      	ldr	r3, [sp, #12]
    28c6:	2200      	movs	r2, #0
    28c8:	9e04      	ldr	r6, [sp, #16]
    28ca:	0031      	movs	r1, r6
    28cc:	20c7      	movs	r0, #199	; 0xc7
    28ce:	4c70      	ldr	r4, [pc, #448]	; (2a90 <nm_spi_write_block+0x250>)
    28d0:	47a0      	blx	r4
	if (result != N_OK) {
    28d2:	2801      	cmp	r0, #1
    28d4:	d1c6      	bne.n	2864 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    28d6:	20c7      	movs	r0, #199	; 0xc7
    28d8:	4b6e      	ldr	r3, [pc, #440]	; (2a94 <nm_spi_write_block+0x254>)
    28da:	4798      	blx	r3
	if (result != N_OK) {
    28dc:	2801      	cmp	r0, #1
    28de:	d00c      	beq.n	28fa <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    28e0:	22f4      	movs	r2, #244	; 0xf4
    28e2:	0092      	lsls	r2, r2, #2
    28e4:	4964      	ldr	r1, [pc, #400]	; (2a78 <nm_spi_write_block+0x238>)
    28e6:	4865      	ldr	r0, [pc, #404]	; (2a7c <nm_spi_write_block+0x23c>)
    28e8:	4c65      	ldr	r4, [pc, #404]	; (2a80 <nm_spi_write_block+0x240>)
    28ea:	47a0      	blx	r4
    28ec:	9904      	ldr	r1, [sp, #16]
    28ee:	486c      	ldr	r0, [pc, #432]	; (2aa0 <nm_spi_write_block+0x260>)
    28f0:	47a0      	blx	r4
    28f2:	200d      	movs	r0, #13
    28f4:	4b64      	ldr	r3, [pc, #400]	; (2a88 <nm_spi_write_block+0x248>)
    28f6:	4798      	blx	r3
    28f8:	e7bf      	b.n	287a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    28fa:	2200      	movs	r2, #0
    28fc:	ab07      	add	r3, sp, #28
    28fe:	801a      	strh	r2, [r3, #0]
    2900:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    2902:	2600      	movs	r6, #0
				order = 0x1;
    2904:	46a8      	mov	r8, r5
    2906:	0035      	movs	r5, r6
    2908:	0026      	movs	r6, r4
    290a:	e021      	b.n	2950 <nm_spi_write_block+0x110>
				order = 0x2;
    290c:	2300      	movs	r3, #0
    290e:	42b7      	cmp	r7, r6
    2910:	415b      	adcs	r3, r3
    2912:	3302      	adds	r3, #2
		cmd |= order;
    2914:	200b      	movs	r0, #11
    2916:	aa04      	add	r2, sp, #16
    2918:	4694      	mov	ip, r2
    291a:	4460      	add	r0, ip
    291c:	2210      	movs	r2, #16
    291e:	4252      	negs	r2, r2
    2920:	4313      	orrs	r3, r2
    2922:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2924:	2101      	movs	r1, #1
    2926:	4b5f      	ldr	r3, [pc, #380]	; (2aa4 <nm_spi_write_block+0x264>)
    2928:	4798      	blx	r3
    292a:	2800      	cmp	r0, #0
    292c:	d11d      	bne.n	296a <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    292e:	465b      	mov	r3, fp
    2930:	1958      	adds	r0, r3, r5
    2932:	0021      	movs	r1, r4
    2934:	4b5b      	ldr	r3, [pc, #364]	; (2aa4 <nm_spi_write_block+0x264>)
    2936:	4798      	blx	r3
    2938:	2800      	cmp	r0, #0
    293a:	d130      	bne.n	299e <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    293c:	4b5a      	ldr	r3, [pc, #360]	; (2aa8 <nm_spi_write_block+0x268>)
    293e:	781b      	ldrb	r3, [r3, #0]
    2940:	2b00      	cmp	r3, #0
    2942:	d039      	beq.n	29b8 <nm_spi_write_block+0x178>
		ix += nbytes;
    2944:	1965      	adds	r5, r4, r5
    2946:	b22d      	sxth	r5, r5
		sz -= nbytes;
    2948:	1b36      	subs	r6, r6, r4
    294a:	b2b6      	uxth	r6, r6
	} while (sz);
    294c:	2e00      	cmp	r6, #0
    294e:	d053      	beq.n	29f8 <nm_spi_write_block+0x1b8>
    2950:	1c34      	adds	r4, r6, #0
    2952:	42be      	cmp	r6, r7
    2954:	d901      	bls.n	295a <nm_spi_write_block+0x11a>
    2956:	466b      	mov	r3, sp
    2958:	8adc      	ldrh	r4, [r3, #22]
    295a:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    295c:	2d00      	cmp	r5, #0
    295e:	d1d5      	bne.n	290c <nm_spi_write_block+0xcc>
				order = 0x3;
    2960:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2962:	42be      	cmp	r6, r7
    2964:	d9d6      	bls.n	2914 <nm_spi_write_block+0xd4>
				order = 0x1;
    2966:	3b02      	subs	r3, #2
    2968:	e7d4      	b.n	2914 <nm_spi_write_block+0xd4>
    296a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    296c:	22d4      	movs	r2, #212	; 0xd4
    296e:	0092      	lsls	r2, r2, #2
    2970:	494e      	ldr	r1, [pc, #312]	; (2aac <nm_spi_write_block+0x26c>)
    2972:	4842      	ldr	r0, [pc, #264]	; (2a7c <nm_spi_write_block+0x23c>)
    2974:	4b42      	ldr	r3, [pc, #264]	; (2a80 <nm_spi_write_block+0x240>)
    2976:	4798      	blx	r3
    2978:	484d      	ldr	r0, [pc, #308]	; (2ab0 <nm_spi_write_block+0x270>)
    297a:	4b4e      	ldr	r3, [pc, #312]	; (2ab4 <nm_spi_write_block+0x274>)
    297c:	4798      	blx	r3
    297e:	200d      	movs	r0, #13
    2980:	4b41      	ldr	r3, [pc, #260]	; (2a88 <nm_spi_write_block+0x248>)
    2982:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2984:	22f8      	movs	r2, #248	; 0xf8
    2986:	0092      	lsls	r2, r2, #2
    2988:	493b      	ldr	r1, [pc, #236]	; (2a78 <nm_spi_write_block+0x238>)
    298a:	483c      	ldr	r0, [pc, #240]	; (2a7c <nm_spi_write_block+0x23c>)
    298c:	4b3c      	ldr	r3, [pc, #240]	; (2a80 <nm_spi_write_block+0x240>)
    298e:	4798      	blx	r3
    2990:	4849      	ldr	r0, [pc, #292]	; (2ab8 <nm_spi_write_block+0x278>)
    2992:	4b48      	ldr	r3, [pc, #288]	; (2ab4 <nm_spi_write_block+0x274>)
    2994:	4798      	blx	r3
    2996:	200d      	movs	r0, #13
    2998:	4b3b      	ldr	r3, [pc, #236]	; (2a88 <nm_spi_write_block+0x248>)
    299a:	4798      	blx	r3
    299c:	e76d      	b.n	287a <nm_spi_write_block+0x3a>
    299e:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    29a0:	4a46      	ldr	r2, [pc, #280]	; (2abc <nm_spi_write_block+0x27c>)
    29a2:	4942      	ldr	r1, [pc, #264]	; (2aac <nm_spi_write_block+0x26c>)
    29a4:	4835      	ldr	r0, [pc, #212]	; (2a7c <nm_spi_write_block+0x23c>)
    29a6:	4b36      	ldr	r3, [pc, #216]	; (2a80 <nm_spi_write_block+0x240>)
    29a8:	4798      	blx	r3
    29aa:	4845      	ldr	r0, [pc, #276]	; (2ac0 <nm_spi_write_block+0x280>)
    29ac:	4b41      	ldr	r3, [pc, #260]	; (2ab4 <nm_spi_write_block+0x274>)
    29ae:	4798      	blx	r3
    29b0:	200d      	movs	r0, #13
    29b2:	4b35      	ldr	r3, [pc, #212]	; (2a88 <nm_spi_write_block+0x248>)
    29b4:	4798      	blx	r3
    29b6:	e7e5      	b.n	2984 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    29b8:	2102      	movs	r1, #2
    29ba:	a807      	add	r0, sp, #28
    29bc:	4b39      	ldr	r3, [pc, #228]	; (2aa4 <nm_spi_write_block+0x264>)
    29be:	4798      	blx	r3
    29c0:	2800      	cmp	r0, #0
    29c2:	d0bf      	beq.n	2944 <nm_spi_write_block+0x104>
    29c4:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    29c6:	4a3f      	ldr	r2, [pc, #252]	; (2ac4 <nm_spi_write_block+0x284>)
    29c8:	4938      	ldr	r1, [pc, #224]	; (2aac <nm_spi_write_block+0x26c>)
    29ca:	482c      	ldr	r0, [pc, #176]	; (2a7c <nm_spi_write_block+0x23c>)
    29cc:	4b2c      	ldr	r3, [pc, #176]	; (2a80 <nm_spi_write_block+0x240>)
    29ce:	4798      	blx	r3
    29d0:	483d      	ldr	r0, [pc, #244]	; (2ac8 <nm_spi_write_block+0x288>)
    29d2:	4b38      	ldr	r3, [pc, #224]	; (2ab4 <nm_spi_write_block+0x274>)
    29d4:	4798      	blx	r3
    29d6:	200d      	movs	r0, #13
    29d8:	4b2b      	ldr	r3, [pc, #172]	; (2a88 <nm_spi_write_block+0x248>)
    29da:	4798      	blx	r3
    29dc:	e7d2      	b.n	2984 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    29de:	223c      	movs	r2, #60	; 0x3c
    29e0:	32ff      	adds	r2, #255	; 0xff
    29e2:	493a      	ldr	r1, [pc, #232]	; (2acc <nm_spi_write_block+0x28c>)
    29e4:	4825      	ldr	r0, [pc, #148]	; (2a7c <nm_spi_write_block+0x23c>)
    29e6:	4b26      	ldr	r3, [pc, #152]	; (2a80 <nm_spi_write_block+0x240>)
    29e8:	4798      	blx	r3
    29ea:	4839      	ldr	r0, [pc, #228]	; (2ad0 <nm_spi_write_block+0x290>)
    29ec:	4b31      	ldr	r3, [pc, #196]	; (2ab4 <nm_spi_write_block+0x274>)
    29ee:	4798      	blx	r3
    29f0:	200d      	movs	r0, #13
    29f2:	4b25      	ldr	r3, [pc, #148]	; (2a88 <nm_spi_write_block+0x248>)
    29f4:	4798      	blx	r3
    29f6:	e027      	b.n	2a48 <nm_spi_write_block+0x208>
    29f8:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    29fa:	4b2b      	ldr	r3, [pc, #172]	; (2aa8 <nm_spi_write_block+0x268>)
    29fc:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    29fe:	1e63      	subs	r3, r4, #1
    2a00:	419c      	sbcs	r4, r3
    2a02:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    2a04:	b2a1      	uxth	r1, r4
    2a06:	a807      	add	r0, sp, #28
    2a08:	4b32      	ldr	r3, [pc, #200]	; (2ad4 <nm_spi_write_block+0x294>)
    2a0a:	4798      	blx	r3
    2a0c:	2800      	cmp	r0, #0
    2a0e:	d1e6      	bne.n	29de <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    2a10:	ab08      	add	r3, sp, #32
    2a12:	191b      	adds	r3, r3, r4
    2a14:	3b05      	subs	r3, #5
    2a16:	781b      	ldrb	r3, [r3, #0]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d106      	bne.n	2a2a <nm_spi_write_block+0x1ea>
    2a1c:	ab08      	add	r3, sp, #32
    2a1e:	469c      	mov	ip, r3
    2a20:	4464      	add	r4, ip
    2a22:	3c06      	subs	r4, #6
    2a24:	7823      	ldrb	r3, [r4, #0]
    2a26:	2bc3      	cmp	r3, #195	; 0xc3
    2a28:	d01b      	beq.n	2a62 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    2a2a:	22a1      	movs	r2, #161	; 0xa1
    2a2c:	0052      	lsls	r2, r2, #1
    2a2e:	4927      	ldr	r1, [pc, #156]	; (2acc <nm_spi_write_block+0x28c>)
    2a30:	4812      	ldr	r0, [pc, #72]	; (2a7c <nm_spi_write_block+0x23c>)
    2a32:	4c13      	ldr	r4, [pc, #76]	; (2a80 <nm_spi_write_block+0x240>)
    2a34:	47a0      	blx	r4
    2a36:	a907      	add	r1, sp, #28
    2a38:	788b      	ldrb	r3, [r1, #2]
    2a3a:	784a      	ldrb	r2, [r1, #1]
    2a3c:	7809      	ldrb	r1, [r1, #0]
    2a3e:	4826      	ldr	r0, [pc, #152]	; (2ad8 <nm_spi_write_block+0x298>)
    2a40:	47a0      	blx	r4
    2a42:	200d      	movs	r0, #13
    2a44:	4b10      	ldr	r3, [pc, #64]	; (2a88 <nm_spi_write_block+0x248>)
    2a46:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2a48:	22fa      	movs	r2, #250	; 0xfa
    2a4a:	0092      	lsls	r2, r2, #2
    2a4c:	490a      	ldr	r1, [pc, #40]	; (2a78 <nm_spi_write_block+0x238>)
    2a4e:	480b      	ldr	r0, [pc, #44]	; (2a7c <nm_spi_write_block+0x23c>)
    2a50:	4b0b      	ldr	r3, [pc, #44]	; (2a80 <nm_spi_write_block+0x240>)
    2a52:	4798      	blx	r3
    2a54:	4818      	ldr	r0, [pc, #96]	; (2ab8 <nm_spi_write_block+0x278>)
    2a56:	4b17      	ldr	r3, [pc, #92]	; (2ab4 <nm_spi_write_block+0x274>)
    2a58:	4798      	blx	r3
    2a5a:	200d      	movs	r0, #13
    2a5c:	4b0a      	ldr	r3, [pc, #40]	; (2a88 <nm_spi_write_block+0x248>)
    2a5e:	4798      	blx	r3
    2a60:	e70b      	b.n	287a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2a62:	2000      	movs	r0, #0
    2a64:	e001      	b.n	2a6a <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2a66:	2006      	movs	r0, #6
    2a68:	4240      	negs	r0, r0

	return s8Ret;
}
    2a6a:	b009      	add	sp, #36	; 0x24
    2a6c:	bc0c      	pop	{r2, r3}
    2a6e:	4690      	mov	r8, r2
    2a70:	469b      	mov	fp, r3
    2a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a74:	000003ca 	.word	0x000003ca
    2a78:	00008190 	.word	0x00008190
    2a7c:	00007a78 	.word	0x00007a78
    2a80:	000058d9 	.word	0x000058d9
    2a84:	00008448 	.word	0x00008448
    2a88:	0000590d 	.word	0x0000590d
    2a8c:	00000205 	.word	0x00000205
    2a90:	00001f09 	.word	0x00001f09
    2a94:	000020a9 	.word	0x000020a9
    2a98:	000003f2 	.word	0x000003f2
    2a9c:	0000842c 	.word	0x0000842c
    2aa0:	00008478 	.word	0x00008478
    2aa4:	00001ee9 	.word	0x00001ee9
    2aa8:	200002ac 	.word	0x200002ac
    2aac:	00008170 	.word	0x00008170
    2ab0:	000084b0 	.word	0x000084b0
    2ab4:	000059f5 	.word	0x000059f5
    2ab8:	000085a4 	.word	0x000085a4
    2abc:	00000359 	.word	0x00000359
    2ac0:	000084e8 	.word	0x000084e8
    2ac4:	00000363 	.word	0x00000363
    2ac8:	0000851c 	.word	0x0000851c
    2acc:	00008144 	.word	0x00008144
    2ad0:	00008554 	.word	0x00008554
    2ad4:	00002089 	.word	0x00002089
    2ad8:	00008574 	.word	0x00008574

00002adc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ade:	46de      	mov	lr, fp
    2ae0:	4657      	mov	r7, sl
    2ae2:	464e      	mov	r6, r9
    2ae4:	4645      	mov	r5, r8
    2ae6:	b5e0      	push	{r5, r6, r7, lr}
    2ae8:	b085      	sub	sp, #20
    2aea:	9001      	str	r0, [sp, #4]
    2aec:	000e      	movs	r6, r1
    2aee:	9202      	str	r2, [sp, #8]
    2af0:	001d      	movs	r5, r3
    2af2:	ab0e      	add	r3, sp, #56	; 0x38
    2af4:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    2af6:	2c00      	cmp	r4, #0
    2af8:	d064      	beq.n	2bc4 <Socket_ReadSocketData+0xe8>
    2afa:	0103      	lsls	r3, r0, #4
    2afc:	4935      	ldr	r1, [pc, #212]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2afe:	585b      	ldr	r3, [r3, r1]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d05f      	beq.n	2bc4 <Socket_ReadSocketData+0xe8>
    2b04:	0101      	lsls	r1, r0, #4
    2b06:	4b33      	ldr	r3, [pc, #204]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2b08:	185b      	adds	r3, r3, r1
    2b0a:	889b      	ldrh	r3, [r3, #4]
    2b0c:	b29b      	uxth	r3, r3
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d058      	beq.n	2bc4 <Socket_ReadSocketData+0xe8>
    2b12:	4b30      	ldr	r3, [pc, #192]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2b14:	185b      	adds	r3, r3, r1
    2b16:	7a9b      	ldrb	r3, [r3, #10]
    2b18:	2b01      	cmp	r3, #1
    2b1a:	d153      	bne.n	2bc4 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    2b1c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2b1e:	4b2d      	ldr	r3, [pc, #180]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2b20:	469b      	mov	fp, r3
    2b22:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2b24:	465b      	mov	r3, fp
    2b26:	220a      	movs	r2, #10
    2b28:	4690      	mov	r8, r2
    2b2a:	44d8      	add	r8, fp
    2b2c:	468a      	mov	sl, r1
    2b2e:	9500      	str	r5, [sp, #0]
    2b30:	9303      	str	r3, [sp, #12]
    2b32:	e015      	b.n	2b60 <Socket_ReadSocketData+0x84>
    2b34:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    2b36:	2301      	movs	r3, #1
    2b38:	e01c      	b.n	2b74 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2b3a:	3301      	adds	r3, #1
    2b3c:	2200      	movs	r2, #0
    2b3e:	2100      	movs	r1, #0
    2b40:	2000      	movs	r0, #0
    2b42:	4c25      	ldr	r4, [pc, #148]	; (2bd8 <Socket_ReadSocketData+0xfc>)
    2b44:	47a0      	blx	r4
    2b46:	e03d      	b.n	2bc4 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    2b48:	4824      	ldr	r0, [pc, #144]	; (2bdc <Socket_ReadSocketData+0x100>)
    2b4a:	4d25      	ldr	r5, [pc, #148]	; (2be0 <Socket_ReadSocketData+0x104>)
    2b4c:	47a8      	blx	r5
    2b4e:	0021      	movs	r1, r4
    2b50:	4824      	ldr	r0, [pc, #144]	; (2be4 <Socket_ReadSocketData+0x108>)
    2b52:	47a8      	blx	r5
    2b54:	200d      	movs	r0, #13
    2b56:	4b24      	ldr	r3, [pc, #144]	; (2be8 <Socket_ReadSocketData+0x10c>)
    2b58:	4798      	blx	r3
				break;
    2b5a:	e033      	b.n	2bc4 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    2b5c:	2c00      	cmp	r4, #0
    2b5e:	d031      	beq.n	2bc4 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2b60:	465b      	mov	r3, fp
    2b62:	889b      	ldrh	r3, [r3, #4]
    2b64:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    2b66:	b21b      	sxth	r3, r3
    2b68:	2b00      	cmp	r3, #0
    2b6a:	dde3      	ble.n	2b34 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2b6c:	9b03      	ldr	r3, [sp, #12]
    2b6e:	889d      	ldrh	r5, [r3, #4]
    2b70:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    2b72:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2b74:	4a17      	ldr	r2, [pc, #92]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2b76:	4651      	mov	r1, sl
    2b78:	5889      	ldr	r1, [r1, r2]
    2b7a:	002a      	movs	r2, r5
    2b7c:	9800      	ldr	r0, [sp, #0]
    2b7e:	4f16      	ldr	r7, [pc, #88]	; (2bd8 <Socket_ReadSocketData+0xfc>)
    2b80:	47b8      	blx	r7
    2b82:	2800      	cmp	r0, #0
    2b84:	d1e0      	bne.n	2b48 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    2b86:	4b13      	ldr	r3, [pc, #76]	; (2bd4 <Socket_ReadSocketData+0xf8>)
    2b88:	4652      	mov	r2, sl
    2b8a:	58d3      	ldr	r3, [r2, r3]
    2b8c:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    2b8e:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    2b90:	88f3      	ldrh	r3, [r6, #6]
    2b92:	1b5b      	subs	r3, r3, r5
    2b94:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    2b96:	4b15      	ldr	r3, [pc, #84]	; (2bec <Socket_ReadSocketData+0x110>)
    2b98:	681b      	ldr	r3, [r3, #0]
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d005      	beq.n	2baa <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    2b9e:	4b13      	ldr	r3, [pc, #76]	; (2bec <Socket_ReadSocketData+0x110>)
    2ba0:	681b      	ldr	r3, [r3, #0]
    2ba2:	0032      	movs	r2, r6
    2ba4:	9902      	ldr	r1, [sp, #8]
    2ba6:	9801      	ldr	r0, [sp, #4]
    2ba8:	4798      	blx	r3
				u16ReadCount -= u16Read;
    2baa:	1b64      	subs	r4, r4, r5
    2bac:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    2bae:	9b00      	ldr	r3, [sp, #0]
    2bb0:	469c      	mov	ip, r3
    2bb2:	44ac      	add	ip, r5
    2bb4:	4663      	mov	r3, ip
    2bb6:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2bb8:	4643      	mov	r3, r8
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d1cd      	bne.n	2b5c <Socket_ReadSocketData+0x80>
    2bc0:	2c00      	cmp	r4, #0
    2bc2:	d1ba      	bne.n	2b3a <Socket_ReadSocketData+0x5e>
	}
}
    2bc4:	b005      	add	sp, #20
    2bc6:	bc3c      	pop	{r2, r3, r4, r5}
    2bc8:	4690      	mov	r8, r2
    2bca:	4699      	mov	r9, r3
    2bcc:	46a2      	mov	sl, r4
    2bce:	46ab      	mov	fp, r5
    2bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	20000934 	.word	0x20000934
    2bd8:	00000cb9 	.word	0x00000cb9
    2bdc:	00007da8 	.word	0x00007da8
    2be0:	000058d9 	.word	0x000058d9
    2be4:	0000880c 	.word	0x0000880c
    2be8:	0000590d 	.word	0x0000590d
    2bec:	200009e4 	.word	0x200009e4

00002bf0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    2bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf2:	46d6      	mov	lr, sl
    2bf4:	464f      	mov	r7, r9
    2bf6:	4646      	mov	r6, r8
    2bf8:	b5c0      	push	{r6, r7, lr}
    2bfa:	b09a      	sub	sp, #104	; 0x68
    2bfc:	000d      	movs	r5, r1
    2bfe:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    2c00:	2841      	cmp	r0, #65	; 0x41
    2c02:	d039      	beq.n	2c78 <m2m_ip_cb+0x88>
    2c04:	2854      	cmp	r0, #84	; 0x54
    2c06:	d037      	beq.n	2c78 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2c08:	2842      	cmp	r0, #66	; 0x42
    2c0a:	d053      	beq.n	2cb4 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2c0c:	2843      	cmp	r0, #67	; 0x43
    2c0e:	d06a      	beq.n	2ce6 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2c10:	2844      	cmp	r0, #68	; 0x44
    2c12:	d100      	bne.n	2c16 <m2m_ip_cb+0x26>
    2c14:	e0af      	b.n	2d76 <m2m_ip_cb+0x186>
    2c16:	284b      	cmp	r0, #75	; 0x4b
    2c18:	d100      	bne.n	2c1c <m2m_ip_cb+0x2c>
    2c1a:	e0ac      	b.n	2d76 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2c1c:	284a      	cmp	r0, #74	; 0x4a
    2c1e:	d100      	bne.n	2c22 <m2m_ip_cb+0x32>
    2c20:	e0cf      	b.n	2dc2 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2c22:	2846      	cmp	r0, #70	; 0x46
    2c24:	d100      	bne.n	2c28 <m2m_ip_cb+0x38>
    2c26:	e0e5      	b.n	2df4 <m2m_ip_cb+0x204>
    2c28:	2848      	cmp	r0, #72	; 0x48
    2c2a:	d100      	bne.n	2c2e <m2m_ip_cb+0x3e>
    2c2c:	e10e      	b.n	2e4c <m2m_ip_cb+0x25c>
    2c2e:	284d      	cmp	r0, #77	; 0x4d
    2c30:	d100      	bne.n	2c34 <m2m_ip_cb+0x44>
    2c32:	e0dc      	b.n	2dee <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2c34:	2845      	cmp	r0, #69	; 0x45
    2c36:	d100      	bne.n	2c3a <m2m_ip_cb+0x4a>
    2c38:	e12c      	b.n	2e94 <m2m_ip_cb+0x2a4>
    2c3a:	2847      	cmp	r0, #71	; 0x47
    2c3c:	d100      	bne.n	2c40 <m2m_ip_cb+0x50>
    2c3e:	e14d      	b.n	2edc <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2c40:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2c42:	284c      	cmp	r0, #76	; 0x4c
    2c44:	d100      	bne.n	2c48 <m2m_ip_cb+0x58>
    2c46:	e126      	b.n	2e96 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2c48:	2852      	cmp	r0, #82	; 0x52
    2c4a:	d12d      	bne.n	2ca8 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2c4c:	2301      	movs	r3, #1
    2c4e:	2214      	movs	r2, #20
    2c50:	a909      	add	r1, sp, #36	; 0x24
    2c52:	0020      	movs	r0, r4
    2c54:	4ca2      	ldr	r4, [pc, #648]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2c56:	47a0      	blx	r4
    2c58:	2800      	cmp	r0, #0
    2c5a:	d125      	bne.n	2ca8 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2c5c:	4ba1      	ldr	r3, [pc, #644]	; (2ee4 <m2m_ip_cb+0x2f4>)
    2c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2c60:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2c62:	681b      	ldr	r3, [r3, #0]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d01f      	beq.n	2ca8 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2c68:	4b9e      	ldr	r3, [pc, #632]	; (2ee4 <m2m_ip_cb+0x2f4>)
    2c6a:	681c      	ldr	r4, [r3, #0]
    2c6c:	ab09      	add	r3, sp, #36	; 0x24
    2c6e:	7c1a      	ldrb	r2, [r3, #16]
    2c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2c72:	9809      	ldr	r0, [sp, #36]	; 0x24
    2c74:	47a0      	blx	r4
			}
		}
	}
}
    2c76:	e017      	b.n	2ca8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2c78:	2300      	movs	r3, #0
    2c7a:	2204      	movs	r2, #4
    2c7c:	a909      	add	r1, sp, #36	; 0x24
    2c7e:	0020      	movs	r0, r4
    2c80:	4c97      	ldr	r4, [pc, #604]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2c82:	47a0      	blx	r4
    2c84:	2800      	cmp	r0, #0
    2c86:	d10f      	bne.n	2ca8 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2c88:	ab09      	add	r3, sp, #36	; 0x24
    2c8a:	785a      	ldrb	r2, [r3, #1]
    2c8c:	ab05      	add	r3, sp, #20
    2c8e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2c90:	4b95      	ldr	r3, [pc, #596]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	2b00      	cmp	r3, #0
    2c96:	d007      	beq.n	2ca8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2c98:	4b93      	ldr	r3, [pc, #588]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2c9a:	681b      	ldr	r3, [r3, #0]
    2c9c:	aa09      	add	r2, sp, #36	; 0x24
    2c9e:	2000      	movs	r0, #0
    2ca0:	5610      	ldrsb	r0, [r2, r0]
    2ca2:	aa05      	add	r2, sp, #20
    2ca4:	2101      	movs	r1, #1
    2ca6:	4798      	blx	r3
}
    2ca8:	b01a      	add	sp, #104	; 0x68
    2caa:	bc1c      	pop	{r2, r3, r4}
    2cac:	4690      	mov	r8, r2
    2cae:	4699      	mov	r9, r3
    2cb0:	46a2      	mov	sl, r4
    2cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2cb4:	2300      	movs	r3, #0
    2cb6:	2204      	movs	r2, #4
    2cb8:	a909      	add	r1, sp, #36	; 0x24
    2cba:	0020      	movs	r0, r4
    2cbc:	4c88      	ldr	r4, [pc, #544]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2cbe:	47a0      	blx	r4
    2cc0:	2800      	cmp	r0, #0
    2cc2:	d1f1      	bne.n	2ca8 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2cc4:	ab09      	add	r3, sp, #36	; 0x24
    2cc6:	785a      	ldrb	r2, [r3, #1]
    2cc8:	ab05      	add	r3, sp, #20
    2cca:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2ccc:	4b86      	ldr	r3, [pc, #536]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2cce:	681b      	ldr	r3, [r3, #0]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d0e9      	beq.n	2ca8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2cd4:	4b84      	ldr	r3, [pc, #528]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2cd6:	681b      	ldr	r3, [r3, #0]
    2cd8:	aa09      	add	r2, sp, #36	; 0x24
    2cda:	2000      	movs	r0, #0
    2cdc:	5610      	ldrsb	r0, [r2, r0]
    2cde:	aa05      	add	r2, sp, #20
    2ce0:	2102      	movs	r1, #2
    2ce2:	4798      	blx	r3
    2ce4:	e7e0      	b.n	2ca8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2ce6:	2300      	movs	r3, #0
    2ce8:	220c      	movs	r2, #12
    2cea:	a905      	add	r1, sp, #20
    2cec:	0020      	movs	r0, r4
    2cee:	4c7c      	ldr	r4, [pc, #496]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2cf0:	47a0      	blx	r4
    2cf2:	2800      	cmp	r0, #0
    2cf4:	d1d8      	bne.n	2ca8 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2cf6:	ab05      	add	r3, sp, #20
    2cf8:	2209      	movs	r2, #9
    2cfa:	569a      	ldrsb	r2, [r3, r2]
    2cfc:	2a00      	cmp	r2, #0
    2cfe:	db24      	blt.n	2d4a <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2d00:	0018      	movs	r0, r3
    2d02:	2108      	movs	r1, #8
    2d04:	5659      	ldrsb	r1, [r3, r1]
    2d06:	4b79      	ldr	r3, [pc, #484]	; (2eec <m2m_ip_cb+0x2fc>)
    2d08:	0109      	lsls	r1, r1, #4
    2d0a:	1859      	adds	r1, r3, r1
    2d0c:	7ac9      	ldrb	r1, [r1, #11]
    2d0e:	b2c9      	uxtb	r1, r1
    2d10:	0114      	lsls	r4, r2, #4
    2d12:	191b      	adds	r3, r3, r4
    2d14:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2d16:	2101      	movs	r1, #1
    2d18:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2d1a:	8941      	ldrh	r1, [r0, #10]
    2d1c:	3908      	subs	r1, #8
    2d1e:	b289      	uxth	r1, r1
    2d20:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2d22:	4973      	ldr	r1, [pc, #460]	; (2ef0 <m2m_ip_cb+0x300>)
    2d24:	880b      	ldrh	r3, [r1, #0]
    2d26:	3301      	adds	r3, #1
    2d28:	b29b      	uxth	r3, r3
    2d2a:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2d2c:	880b      	ldrh	r3, [r1, #0]
    2d2e:	b29b      	uxth	r3, r3
    2d30:	2b00      	cmp	r3, #0
    2d32:	d103      	bne.n	2d3c <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2d34:	880b      	ldrh	r3, [r1, #0]
    2d36:	3301      	adds	r3, #1
    2d38:	b29b      	uxth	r3, r3
    2d3a:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2d3c:	4b6c      	ldr	r3, [pc, #432]	; (2ef0 <m2m_ip_cb+0x300>)
    2d3e:	8819      	ldrh	r1, [r3, #0]
    2d40:	b289      	uxth	r1, r1
    2d42:	0110      	lsls	r0, r2, #4
    2d44:	4b69      	ldr	r3, [pc, #420]	; (2eec <m2m_ip_cb+0x2fc>)
    2d46:	181b      	adds	r3, r3, r0
    2d48:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2d4a:	ab09      	add	r3, sp, #36	; 0x24
    2d4c:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2d4e:	2202      	movs	r2, #2
    2d50:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2d52:	aa05      	add	r2, sp, #20
    2d54:	8851      	ldrh	r1, [r2, #2]
    2d56:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2d58:	9a06      	ldr	r2, [sp, #24]
    2d5a:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2d5c:	4b62      	ldr	r3, [pc, #392]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	2b00      	cmp	r3, #0
    2d62:	d0a1      	beq.n	2ca8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2d64:	4b60      	ldr	r3, [pc, #384]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	aa05      	add	r2, sp, #20
    2d6a:	2008      	movs	r0, #8
    2d6c:	5610      	ldrsb	r0, [r2, r0]
    2d6e:	aa09      	add	r2, sp, #36	; 0x24
    2d70:	2104      	movs	r1, #4
    2d72:	4798      	blx	r3
    2d74:	e798      	b.n	2ca8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2d76:	2300      	movs	r3, #0
    2d78:	2204      	movs	r2, #4
    2d7a:	a909      	add	r1, sp, #36	; 0x24
    2d7c:	0020      	movs	r0, r4
    2d7e:	4c58      	ldr	r4, [pc, #352]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2d80:	47a0      	blx	r4
    2d82:	2800      	cmp	r0, #0
    2d84:	d000      	beq.n	2d88 <m2m_ip_cb+0x198>
    2d86:	e78f      	b.n	2ca8 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2d88:	ab09      	add	r3, sp, #36	; 0x24
    2d8a:	2000      	movs	r0, #0
    2d8c:	5618      	ldrsb	r0, [r3, r0]
    2d8e:	aa05      	add	r2, sp, #20
    2d90:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2d92:	785b      	ldrb	r3, [r3, #1]
    2d94:	b25b      	sxtb	r3, r3
    2d96:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d107      	bne.n	2dac <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2d9c:	ab09      	add	r3, sp, #36	; 0x24
    2d9e:	885b      	ldrh	r3, [r3, #2]
    2da0:	3b08      	subs	r3, #8
    2da2:	b29b      	uxth	r3, r3
    2da4:	0101      	lsls	r1, r0, #4
    2da6:	4a51      	ldr	r2, [pc, #324]	; (2eec <m2m_ip_cb+0x2fc>)
    2da8:	1852      	adds	r2, r2, r1
    2daa:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2dac:	4b4e      	ldr	r3, [pc, #312]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	2b00      	cmp	r3, #0
    2db2:	d100      	bne.n	2db6 <m2m_ip_cb+0x1c6>
    2db4:	e778      	b.n	2ca8 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2db6:	4b4c      	ldr	r3, [pc, #304]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2db8:	681b      	ldr	r3, [r3, #0]
    2dba:	aa05      	add	r2, sp, #20
    2dbc:	2105      	movs	r1, #5
    2dbe:	4798      	blx	r3
	{
    2dc0:	e772      	b.n	2ca8 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2dc2:	2300      	movs	r3, #0
    2dc4:	2244      	movs	r2, #68	; 0x44
    2dc6:	a909      	add	r1, sp, #36	; 0x24
    2dc8:	0020      	movs	r0, r4
    2dca:	4c45      	ldr	r4, [pc, #276]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2dcc:	47a0      	blx	r4
    2dce:	2800      	cmp	r0, #0
    2dd0:	d000      	beq.n	2dd4 <m2m_ip_cb+0x1e4>
    2dd2:	e769      	b.n	2ca8 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2dd4:	4b47      	ldr	r3, [pc, #284]	; (2ef4 <m2m_ip_cb+0x304>)
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	2b00      	cmp	r3, #0
    2dda:	d100      	bne.n	2dde <m2m_ip_cb+0x1ee>
    2ddc:	e764      	b.n	2ca8 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2dde:	4b45      	ldr	r3, [pc, #276]	; (2ef4 <m2m_ip_cb+0x304>)
    2de0:	681b      	ldr	r3, [r3, #0]
    2de2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2de4:	9203      	str	r2, [sp, #12]
    2de6:	0011      	movs	r1, r2
    2de8:	a809      	add	r0, sp, #36	; 0x24
    2dea:	4798      	blx	r3
    2dec:	e75c      	b.n	2ca8 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2dee:	2306      	movs	r3, #6
    2df0:	469a      	mov	sl, r3
    2df2:	e001      	b.n	2df8 <m2m_ip_cb+0x208>
    2df4:	2306      	movs	r3, #6
    2df6:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2df8:	2300      	movs	r3, #0
    2dfa:	2210      	movs	r2, #16
    2dfc:	a905      	add	r1, sp, #20
    2dfe:	0020      	movs	r0, r4
    2e00:	4f37      	ldr	r7, [pc, #220]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2e02:	47b8      	blx	r7
    2e04:	2800      	cmp	r0, #0
    2e06:	d000      	beq.n	2e0a <m2m_ip_cb+0x21a>
    2e08:	e74e      	b.n	2ca8 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2e0a:	aa05      	add	r2, sp, #20
    2e0c:	200c      	movs	r0, #12
    2e0e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2e10:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2e12:	0107      	lsls	r7, r0, #4
    2e14:	4935      	ldr	r1, [pc, #212]	; (2eec <m2m_ip_cb+0x2fc>)
    2e16:	19c9      	adds	r1, r1, r7
    2e18:	2700      	movs	r7, #0
    2e1a:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2e1c:	2608      	movs	r6, #8
    2e1e:	5f97      	ldrsh	r7, [r2, r6]
    2e20:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2e22:	8957      	ldrh	r7, [r2, #10]
    2e24:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2e26:	af09      	add	r7, sp, #36	; 0x24
    2e28:	8856      	ldrh	r6, [r2, #2]
    2e2a:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2e2c:	9a06      	ldr	r2, [sp, #24]
    2e2e:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2e30:	88ca      	ldrh	r2, [r1, #6]
    2e32:	b292      	uxth	r2, r2
    2e34:	4293      	cmp	r3, r2
    2e36:	d00c      	beq.n	2e52 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2e38:	2d10      	cmp	r5, #16
    2e3a:	d800      	bhi.n	2e3e <m2m_ip_cb+0x24e>
    2e3c:	e734      	b.n	2ca8 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2e3e:	2301      	movs	r3, #1
    2e40:	2200      	movs	r2, #0
    2e42:	2100      	movs	r1, #0
    2e44:	2000      	movs	r0, #0
    2e46:	4c26      	ldr	r4, [pc, #152]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2e48:	47a0      	blx	r4
	{
    2e4a:	e72d      	b.n	2ca8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2e4c:	2309      	movs	r3, #9
    2e4e:	469a      	mov	sl, r3
    2e50:	e7d2      	b.n	2df8 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2e52:	4643      	mov	r3, r8
    2e54:	2b00      	cmp	r3, #0
    2e56:	dd01      	ble.n	2e5c <m2m_ip_cb+0x26c>
    2e58:	45a8      	cmp	r8, r5
    2e5a:	db0f      	blt.n	2e7c <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2e5c:	ab09      	add	r3, sp, #36	; 0x24
    2e5e:	4642      	mov	r2, r8
    2e60:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2e62:	2300      	movs	r3, #0
    2e64:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2e66:	4b20      	ldr	r3, [pc, #128]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2e68:	681b      	ldr	r3, [r3, #0]
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d100      	bne.n	2e70 <m2m_ip_cb+0x280>
    2e6e:	e71b      	b.n	2ca8 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2e70:	4b1d      	ldr	r3, [pc, #116]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2e72:	681b      	ldr	r3, [r3, #0]
    2e74:	aa09      	add	r2, sp, #36	; 0x24
    2e76:	4651      	mov	r1, sl
    2e78:	4798      	blx	r3
    2e7a:	e715      	b.n	2ca8 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2e7c:	0023      	movs	r3, r4
    2e7e:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2e80:	4642      	mov	r2, r8
    2e82:	4669      	mov	r1, sp
    2e84:	818a      	strh	r2, [r1, #12]
    2e86:	898a      	ldrh	r2, [r1, #12]
    2e88:	9200      	str	r2, [sp, #0]
    2e8a:	4652      	mov	r2, sl
    2e8c:	0039      	movs	r1, r7
    2e8e:	4c1a      	ldr	r4, [pc, #104]	; (2ef8 <m2m_ip_cb+0x308>)
    2e90:	47a0      	blx	r4
    2e92:	e709      	b.n	2ca8 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2e94:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2e96:	2300      	movs	r3, #0
    2e98:	2208      	movs	r2, #8
    2e9a:	a909      	add	r1, sp, #36	; 0x24
    2e9c:	0020      	movs	r0, r4
    2e9e:	4c10      	ldr	r4, [pc, #64]	; (2ee0 <m2m_ip_cb+0x2f0>)
    2ea0:	47a0      	blx	r4
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d000      	beq.n	2ea8 <m2m_ip_cb+0x2b8>
    2ea6:	e6ff      	b.n	2ca8 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2ea8:	ab09      	add	r3, sp, #36	; 0x24
    2eaa:	2000      	movs	r0, #0
    2eac:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2eae:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2eb0:	8859      	ldrh	r1, [r3, #2]
    2eb2:	ab05      	add	r3, sp, #20
    2eb4:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2eb6:	0101      	lsls	r1, r0, #4
    2eb8:	4b0c      	ldr	r3, [pc, #48]	; (2eec <m2m_ip_cb+0x2fc>)
    2eba:	185b      	adds	r3, r3, r1
    2ebc:	88db      	ldrh	r3, [r3, #6]
    2ebe:	b29b      	uxth	r3, r3
    2ec0:	429a      	cmp	r2, r3
    2ec2:	d000      	beq.n	2ec6 <m2m_ip_cb+0x2d6>
    2ec4:	e6f0      	b.n	2ca8 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2ec6:	4b08      	ldr	r3, [pc, #32]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d100      	bne.n	2ed0 <m2m_ip_cb+0x2e0>
    2ece:	e6eb      	b.n	2ca8 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2ed0:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <m2m_ip_cb+0x2f8>)
    2ed2:	681b      	ldr	r3, [r3, #0]
    2ed4:	aa05      	add	r2, sp, #20
    2ed6:	0029      	movs	r1, r5
    2ed8:	4798      	blx	r3
	{
    2eda:	e6e5      	b.n	2ca8 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2edc:	2508      	movs	r5, #8
    2ede:	e7da      	b.n	2e96 <m2m_ip_cb+0x2a6>
    2ee0:	00000cb9 	.word	0x00000cb9
    2ee4:	200009e8 	.word	0x200009e8
    2ee8:	200009e4 	.word	0x200009e4
    2eec:	20000934 	.word	0x20000934
    2ef0:	200002ae 	.word	0x200002ae
    2ef4:	200009ec 	.word	0x200009ec
    2ef8:	00002add 	.word	0x00002add

00002efc <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2efc:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2efe:	4b0a      	ldr	r3, [pc, #40]	; (2f28 <socketInit+0x2c>)
    2f00:	781b      	ldrb	r3, [r3, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d000      	beq.n	2f08 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2f06:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2f08:	22b0      	movs	r2, #176	; 0xb0
    2f0a:	2100      	movs	r1, #0
    2f0c:	4807      	ldr	r0, [pc, #28]	; (2f2c <socketInit+0x30>)
    2f0e:	4b08      	ldr	r3, [pc, #32]	; (2f30 <socketInit+0x34>)
    2f10:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2f12:	4908      	ldr	r1, [pc, #32]	; (2f34 <socketInit+0x38>)
    2f14:	2002      	movs	r0, #2
    2f16:	4b08      	ldr	r3, [pc, #32]	; (2f38 <socketInit+0x3c>)
    2f18:	4798      	blx	r3
		gbSocketInit	= 1;
    2f1a:	2201      	movs	r2, #1
    2f1c:	4b02      	ldr	r3, [pc, #8]	; (2f28 <socketInit+0x2c>)
    2f1e:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2f20:	2200      	movs	r2, #0
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <socketInit+0x40>)
    2f24:	801a      	strh	r2, [r3, #0]
}
    2f26:	e7ee      	b.n	2f06 <socketInit+0xa>
    2f28:	200002ad 	.word	0x200002ad
    2f2c:	20000934 	.word	0x20000934
    2f30:	0000058d 	.word	0x0000058d
    2f34:	00002bf1 	.word	0x00002bf1
    2f38:	00000da5 	.word	0x00000da5
    2f3c:	200002ae 	.word	0x200002ae

00002f40 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2f40:	4b02      	ldr	r3, [pc, #8]	; (2f4c <registerSocketCallback+0xc>)
    2f42:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2f44:	4b02      	ldr	r3, [pc, #8]	; (2f50 <registerSocketCallback+0x10>)
    2f46:	6019      	str	r1, [r3, #0]
}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	200009e4 	.word	0x200009e4
    2f50:	200009ec 	.word	0x200009ec

00002f54 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f56:	46d6      	mov	lr, sl
    2f58:	4647      	mov	r7, r8
    2f5a:	b580      	push	{r7, lr}
    2f5c:	b089      	sub	sp, #36	; 0x24
    2f5e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2f60:	2802      	cmp	r0, #2
    2f62:	d000      	beq.n	2f66 <socket+0x12>
    2f64:	e09c      	b.n	30a0 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2f66:	2901      	cmp	r1, #1
    2f68:	d00a      	beq.n	2f80 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2f6a:	2902      	cmp	r1, #2
    2f6c:	d100      	bne.n	2f70 <socket+0x1c>
    2f6e:	e070      	b.n	3052 <socket+0xfe>
	SOCKET					sock = -1;
    2f70:	2501      	movs	r5, #1
    2f72:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2f74:	0028      	movs	r0, r5
    2f76:	b009      	add	sp, #36	; 0x24
    2f78:	bc0c      	pop	{r2, r3}
    2f7a:	4690      	mov	r8, r2
    2f7c:	469a      	mov	sl, r3
    2f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2f80:	4c49      	ldr	r4, [pc, #292]	; (30a8 <socket+0x154>)
    2f82:	7827      	ldrb	r7, [r4, #0]
    2f84:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2f86:	7826      	ldrb	r6, [r4, #0]
    2f88:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2f8a:	7820      	ldrb	r0, [r4, #0]
    2f8c:	3001      	adds	r0, #1
    2f8e:	3106      	adds	r1, #6
    2f90:	4b46      	ldr	r3, [pc, #280]	; (30ac <socket+0x158>)
    2f92:	4798      	blx	r3
    2f94:	b2c9      	uxtb	r1, r1
    2f96:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2f98:	0132      	lsls	r2, r6, #4
    2f9a:	4b45      	ldr	r3, [pc, #276]	; (30b0 <socket+0x15c>)
    2f9c:	189b      	adds	r3, r3, r2
    2f9e:	7a9b      	ldrb	r3, [r3, #10]
    2fa0:	2506      	movs	r5, #6
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d018      	beq.n	2fd8 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2fa6:	4e40      	ldr	r6, [pc, #256]	; (30a8 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2fa8:	4b40      	ldr	r3, [pc, #256]	; (30ac <socket+0x158>)
    2faa:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2fac:	4b40      	ldr	r3, [pc, #256]	; (30b0 <socket+0x15c>)
    2fae:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2fb0:	7837      	ldrb	r7, [r6, #0]
    2fb2:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2fb4:	7834      	ldrb	r4, [r6, #0]
    2fb6:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2fb8:	7830      	ldrb	r0, [r6, #0]
    2fba:	3001      	adds	r0, #1
    2fbc:	2107      	movs	r1, #7
    2fbe:	47d0      	blx	sl
    2fc0:	b2c9      	uxtb	r1, r1
    2fc2:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2fc4:	0123      	lsls	r3, r4, #4
    2fc6:	4443      	add	r3, r8
    2fc8:	7a9b      	ldrb	r3, [r3, #10]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d007      	beq.n	2fde <socket+0x8a>
    2fce:	3d01      	subs	r5, #1
    2fd0:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2fd2:	2d00      	cmp	r5, #0
    2fd4:	d1ec      	bne.n	2fb0 <socket+0x5c>
    2fd6:	e7cb      	b.n	2f70 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2fd8:	4b35      	ldr	r3, [pc, #212]	; (30b0 <socket+0x15c>)
    2fda:	18d4      	adds	r4, r2, r3
    2fdc:	e002      	b.n	2fe4 <socket+0x90>
    2fde:	0124      	lsls	r4, r4, #4
    2fe0:	4b33      	ldr	r3, [pc, #204]	; (30b0 <socket+0x15c>)
    2fe2:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2fe4:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2fe6:	2d00      	cmp	r5, #0
    2fe8:	dbc4      	blt.n	2f74 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2fea:	2210      	movs	r2, #16
    2fec:	2100      	movs	r1, #0
    2fee:	0020      	movs	r0, r4
    2ff0:	4b30      	ldr	r3, [pc, #192]	; (30b4 <socket+0x160>)
    2ff2:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2ff4:	2301      	movs	r3, #1
    2ff6:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2ff8:	4a2f      	ldr	r2, [pc, #188]	; (30b8 <socket+0x164>)
    2ffa:	8813      	ldrh	r3, [r2, #0]
    2ffc:	3301      	adds	r3, #1
    2ffe:	b29b      	uxth	r3, r3
    3000:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3002:	8813      	ldrh	r3, [r2, #0]
    3004:	b29b      	uxth	r3, r3
    3006:	2b00      	cmp	r3, #0
    3008:	d103      	bne.n	3012 <socket+0xbe>
				++gu16SessionID;
    300a:	8813      	ldrh	r3, [r2, #0]
    300c:	3301      	adds	r3, #1
    300e:	b29b      	uxth	r3, r3
    3010:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3012:	4e29      	ldr	r6, [pc, #164]	; (30b8 <socket+0x164>)
    3014:	8833      	ldrh	r3, [r6, #0]
    3016:	b29b      	uxth	r3, r3
    3018:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    301a:	4828      	ldr	r0, [pc, #160]	; (30bc <socket+0x168>)
    301c:	4f28      	ldr	r7, [pc, #160]	; (30c0 <socket+0x16c>)
    301e:	47b8      	blx	r7
    3020:	8832      	ldrh	r2, [r6, #0]
    3022:	b292      	uxth	r2, r2
    3024:	0029      	movs	r1, r5
    3026:	4827      	ldr	r0, [pc, #156]	; (30c4 <socket+0x170>)
    3028:	47b8      	blx	r7
    302a:	200d      	movs	r0, #13
    302c:	4b26      	ldr	r3, [pc, #152]	; (30c8 <socket+0x174>)
    302e:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3030:	9b05      	ldr	r3, [sp, #20]
    3032:	07db      	lsls	r3, r3, #31
    3034:	d59e      	bpl.n	2f74 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3036:	aa07      	add	r2, sp, #28
    3038:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    303a:	2321      	movs	r3, #33	; 0x21
    303c:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    303e:	2300      	movs	r3, #0
    3040:	9302      	str	r3, [sp, #8]
    3042:	9301      	str	r3, [sp, #4]
    3044:	9300      	str	r3, [sp, #0]
    3046:	3304      	adds	r3, #4
    3048:	2150      	movs	r1, #80	; 0x50
    304a:	2002      	movs	r0, #2
    304c:	4c1f      	ldr	r4, [pc, #124]	; (30cc <socket+0x178>)
    304e:	47a0      	blx	r4
    3050:	e790      	b.n	2f74 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3052:	4b1f      	ldr	r3, [pc, #124]	; (30d0 <socket+0x17c>)
    3054:	781d      	ldrb	r5, [r3, #0]
    3056:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3058:	781c      	ldrb	r4, [r3, #0]
    305a:	0124      	lsls	r4, r4, #4
    305c:	4a1d      	ldr	r2, [pc, #116]	; (30d4 <socket+0x180>)
    305e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3060:	7819      	ldrb	r1, [r3, #0]
    3062:	3101      	adds	r1, #1
    3064:	2203      	movs	r2, #3
    3066:	400a      	ands	r2, r1
    3068:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    306a:	7aa3      	ldrb	r3, [r4, #10]
    306c:	2b00      	cmp	r3, #0
    306e:	d014      	beq.n	309a <socket+0x146>
    3070:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3072:	4917      	ldr	r1, [pc, #92]	; (30d0 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3074:	4f17      	ldr	r7, [pc, #92]	; (30d4 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3076:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3078:	780d      	ldrb	r5, [r1, #0]
    307a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    307c:	780c      	ldrb	r4, [r1, #0]
    307e:	0124      	lsls	r4, r4, #4
    3080:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3082:	780b      	ldrb	r3, [r1, #0]
    3084:	3301      	adds	r3, #1
    3086:	4003      	ands	r3, r0
    3088:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    308a:	7aa3      	ldrb	r3, [r4, #10]
    308c:	2b00      	cmp	r3, #0
    308e:	d004      	beq.n	309a <socket+0x146>
    3090:	3a01      	subs	r2, #1
    3092:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3094:	2a00      	cmp	r2, #0
    3096:	d1ef      	bne.n	3078 <socket+0x124>
    3098:	e76a      	b.n	2f70 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    309a:	3507      	adds	r5, #7
    309c:	b26d      	sxtb	r5, r5
					break;
    309e:	e7a2      	b.n	2fe6 <socket+0x92>
	SOCKET					sock = -1;
    30a0:	2501      	movs	r5, #1
    30a2:	426d      	negs	r5, r5
    30a4:	e766      	b.n	2f74 <socket+0x20>
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	200002b0 	.word	0x200002b0
    30ac:	00005821 	.word	0x00005821
    30b0:	20000934 	.word	0x20000934
    30b4:	0000058d 	.word	0x0000058d
    30b8:	200002ae 	.word	0x200002ae
    30bc:	00007da8 	.word	0x00007da8
    30c0:	000058d9 	.word	0x000058d9
    30c4:	00008838 	.word	0x00008838
    30c8:	0000590d 	.word	0x0000590d
    30cc:	000006a1 	.word	0x000006a1
    30d0:	200002b1 	.word	0x200002b1
    30d4:	200009a4 	.word	0x200009a4

000030d8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    30d8:	b570      	push	{r4, r5, r6, lr}
    30da:	b088      	sub	sp, #32
    30dc:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    30de:	db30      	blt.n	3142 <connect+0x6a>
    30e0:	2900      	cmp	r1, #0
    30e2:	d031      	beq.n	3148 <connect+0x70>
    30e4:	0100      	lsls	r0, r0, #4
    30e6:	4b1d      	ldr	r3, [pc, #116]	; (315c <connect+0x84>)
    30e8:	181b      	adds	r3, r3, r0
    30ea:	7a9b      	ldrb	r3, [r3, #10]
    30ec:	2b01      	cmp	r3, #1
    30ee:	d12e      	bne.n	314e <connect+0x76>
    30f0:	2a00      	cmp	r2, #0
    30f2:	d02f      	beq.n	3154 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    30f4:	4b19      	ldr	r3, [pc, #100]	; (315c <connect+0x84>)
    30f6:	181b      	adds	r3, r3, r0
    30f8:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    30fa:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    30fc:	07db      	lsls	r3, r3, #31
    30fe:	d505      	bpl.n	310c <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3100:	4b16      	ldr	r3, [pc, #88]	; (315c <connect+0x84>)
    3102:	181b      	adds	r3, r3, r0
    3104:	7ada      	ldrb	r2, [r3, #11]
    3106:	ab05      	add	r3, sp, #20
    3108:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    310a:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    310c:	ad05      	add	r5, sp, #20
    310e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3110:	2208      	movs	r2, #8
    3112:	0028      	movs	r0, r5
    3114:	4b12      	ldr	r3, [pc, #72]	; (3160 <connect+0x88>)
    3116:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3118:	0124      	lsls	r4, r4, #4
    311a:	4b10      	ldr	r3, [pc, #64]	; (315c <connect+0x84>)
    311c:	191c      	adds	r4, r3, r4
    311e:	88e3      	ldrh	r3, [r4, #6]
    3120:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3122:	2300      	movs	r3, #0
    3124:	9302      	str	r3, [sp, #8]
    3126:	9301      	str	r3, [sp, #4]
    3128:	9300      	str	r3, [sp, #0]
    312a:	330c      	adds	r3, #12
    312c:	002a      	movs	r2, r5
    312e:	0031      	movs	r1, r6
    3130:	2002      	movs	r0, #2
    3132:	4c0c      	ldr	r4, [pc, #48]	; (3164 <connect+0x8c>)
    3134:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3136:	2800      	cmp	r0, #0
    3138:	d001      	beq.n	313e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    313a:	2009      	movs	r0, #9
    313c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    313e:	b008      	add	sp, #32
    3140:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3142:	2006      	movs	r0, #6
    3144:	4240      	negs	r0, r0
    3146:	e7fa      	b.n	313e <connect+0x66>
    3148:	2006      	movs	r0, #6
    314a:	4240      	negs	r0, r0
    314c:	e7f7      	b.n	313e <connect+0x66>
    314e:	2006      	movs	r0, #6
    3150:	4240      	negs	r0, r0
    3152:	e7f4      	b.n	313e <connect+0x66>
    3154:	2006      	movs	r0, #6
    3156:	4240      	negs	r0, r0
    3158:	e7f1      	b.n	313e <connect+0x66>
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	20000934 	.word	0x20000934
    3160:	00000579 	.word	0x00000579
    3164:	000006a1 	.word	0x000006a1

00003168 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3168:	b530      	push	{r4, r5, lr}
    316a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    316c:	2800      	cmp	r0, #0
    316e:	db36      	blt.n	31de <send+0x76>
    3170:	2900      	cmp	r1, #0
    3172:	d037      	beq.n	31e4 <send+0x7c>
    3174:	23af      	movs	r3, #175	; 0xaf
    3176:	00db      	lsls	r3, r3, #3
    3178:	429a      	cmp	r2, r3
    317a:	d836      	bhi.n	31ea <send+0x82>
    317c:	0104      	lsls	r4, r0, #4
    317e:	4b1e      	ldr	r3, [pc, #120]	; (31f8 <send+0x90>)
    3180:	191b      	adds	r3, r3, r4
    3182:	7a9b      	ldrb	r3, [r3, #10]
    3184:	2b01      	cmp	r3, #1
    3186:	d133      	bne.n	31f0 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3188:	ab04      	add	r3, sp, #16
    318a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    318c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    318e:	0025      	movs	r5, r4
    3190:	4c19      	ldr	r4, [pc, #100]	; (31f8 <send+0x90>)
    3192:	1964      	adds	r4, r4, r5
    3194:	88e4      	ldrh	r4, [r4, #6]
    3196:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3198:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    319a:	2806      	cmp	r0, #6
    319c:	dd00      	ble.n	31a0 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    319e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    31a0:	0104      	lsls	r4, r0, #4
    31a2:	4b15      	ldr	r3, [pc, #84]	; (31f8 <send+0x90>)
    31a4:	191b      	adds	r3, r3, r4
    31a6:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    31a8:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    31aa:	07e4      	lsls	r4, r4, #31
    31ac:	d505      	bpl.n	31ba <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    31ae:	0100      	lsls	r0, r0, #4
    31b0:	4b11      	ldr	r3, [pc, #68]	; (31f8 <send+0x90>)
    31b2:	1818      	adds	r0, r3, r0
    31b4:	8905      	ldrh	r5, [r0, #8]
    31b6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    31b8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    31ba:	2080      	movs	r0, #128	; 0x80
    31bc:	4318      	orrs	r0, r3
    31be:	9502      	str	r5, [sp, #8]
    31c0:	9201      	str	r2, [sp, #4]
    31c2:	9100      	str	r1, [sp, #0]
    31c4:	2310      	movs	r3, #16
    31c6:	aa04      	add	r2, sp, #16
    31c8:	0001      	movs	r1, r0
    31ca:	2002      	movs	r0, #2
    31cc:	4c0b      	ldr	r4, [pc, #44]	; (31fc <send+0x94>)
    31ce:	47a0      	blx	r4
    31d0:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    31d2:	2800      	cmp	r0, #0
    31d4:	d000      	beq.n	31d8 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    31d6:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    31d8:	0018      	movs	r0, r3
    31da:	b009      	add	sp, #36	; 0x24
    31dc:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    31de:	2306      	movs	r3, #6
    31e0:	425b      	negs	r3, r3
    31e2:	e7f9      	b.n	31d8 <send+0x70>
    31e4:	2306      	movs	r3, #6
    31e6:	425b      	negs	r3, r3
    31e8:	e7f6      	b.n	31d8 <send+0x70>
    31ea:	2306      	movs	r3, #6
    31ec:	425b      	negs	r3, r3
    31ee:	e7f3      	b.n	31d8 <send+0x70>
    31f0:	2306      	movs	r3, #6
    31f2:	425b      	negs	r3, r3
    31f4:	e7f0      	b.n	31d8 <send+0x70>
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	20000934 	.word	0x20000934
    31fc:	000006a1 	.word	0x000006a1

00003200 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3200:	b530      	push	{r4, r5, lr}
    3202:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3204:	2800      	cmp	r0, #0
    3206:	db34      	blt.n	3272 <recv+0x72>
    3208:	2900      	cmp	r1, #0
    320a:	d035      	beq.n	3278 <recv+0x78>
    320c:	2a00      	cmp	r2, #0
    320e:	d036      	beq.n	327e <recv+0x7e>
    3210:	0105      	lsls	r5, r0, #4
    3212:	4c1e      	ldr	r4, [pc, #120]	; (328c <recv+0x8c>)
    3214:	1964      	adds	r4, r4, r5
    3216:	7aa4      	ldrb	r4, [r4, #10]
    3218:	2c01      	cmp	r4, #1
    321a:	d133      	bne.n	3284 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    321c:	4c1b      	ldr	r4, [pc, #108]	; (328c <recv+0x8c>)
    321e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3220:	1964      	adds	r4, r4, r5
    3222:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3224:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3226:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3228:	2900      	cmp	r1, #0
    322a:	d11d      	bne.n	3268 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    322c:	2101      	movs	r1, #1
    322e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3230:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3232:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3234:	07d2      	lsls	r2, r2, #31
    3236:	d500      	bpl.n	323a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3238:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    323a:	2b00      	cmp	r3, #0
    323c:	d117      	bne.n	326e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    323e:	3b01      	subs	r3, #1
    3240:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3242:	aa04      	add	r2, sp, #16
    3244:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3246:	0100      	lsls	r0, r0, #4
    3248:	4b10      	ldr	r3, [pc, #64]	; (328c <recv+0x8c>)
    324a:	1818      	adds	r0, r3, r0
    324c:	88c3      	ldrh	r3, [r0, #6]
    324e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3250:	2300      	movs	r3, #0
    3252:	9302      	str	r3, [sp, #8]
    3254:	9301      	str	r3, [sp, #4]
    3256:	9300      	str	r3, [sp, #0]
    3258:	3308      	adds	r3, #8
    325a:	2002      	movs	r0, #2
    325c:	4c0c      	ldr	r4, [pc, #48]	; (3290 <recv+0x90>)
    325e:	47a0      	blx	r4
    3260:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3262:	2800      	cmp	r0, #0
    3264:	d000      	beq.n	3268 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3266:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3268:	0010      	movs	r0, r2
    326a:	b007      	add	sp, #28
    326c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    326e:	9304      	str	r3, [sp, #16]
    3270:	e7e7      	b.n	3242 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3272:	2206      	movs	r2, #6
    3274:	4252      	negs	r2, r2
    3276:	e7f7      	b.n	3268 <recv+0x68>
    3278:	2206      	movs	r2, #6
    327a:	4252      	negs	r2, r2
    327c:	e7f4      	b.n	3268 <recv+0x68>
    327e:	2206      	movs	r2, #6
    3280:	4252      	negs	r2, r2
    3282:	e7f1      	b.n	3268 <recv+0x68>
    3284:	2206      	movs	r2, #6
    3286:	4252      	negs	r2, r2
    3288:	e7ee      	b.n	3268 <recv+0x68>
    328a:	46c0      	nop			; (mov r8, r8)
    328c:	20000934 	.word	0x20000934
    3290:	000006a1 	.word	0x000006a1

00003294 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3294:	b530      	push	{r4, r5, lr}
    3296:	b087      	sub	sp, #28
    3298:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    329a:	481e      	ldr	r0, [pc, #120]	; (3314 <close+0x80>)
    329c:	4d1e      	ldr	r5, [pc, #120]	; (3318 <close+0x84>)
    329e:	47a8      	blx	r5
    32a0:	0021      	movs	r1, r4
    32a2:	481e      	ldr	r0, [pc, #120]	; (331c <close+0x88>)
    32a4:	47a8      	blx	r5
    32a6:	200d      	movs	r0, #13
    32a8:	4b1d      	ldr	r3, [pc, #116]	; (3320 <close+0x8c>)
    32aa:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    32ac:	2c00      	cmp	r4, #0
    32ae:	db2a      	blt.n	3306 <close+0x72>
    32b0:	0122      	lsls	r2, r4, #4
    32b2:	4b1c      	ldr	r3, [pc, #112]	; (3324 <close+0x90>)
    32b4:	189b      	adds	r3, r3, r2
    32b6:	7a9b      	ldrb	r3, [r3, #10]
    32b8:	2b01      	cmp	r3, #1
    32ba:	d127      	bne.n	330c <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    32bc:	a905      	add	r1, sp, #20
    32be:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    32c0:	4b18      	ldr	r3, [pc, #96]	; (3324 <close+0x90>)
    32c2:	189b      	adds	r3, r3, r2
    32c4:	88da      	ldrh	r2, [r3, #6]
    32c6:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    32c8:	2200      	movs	r2, #0
    32ca:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    32cc:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    32ce:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    32d0:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    32d2:	07db      	lsls	r3, r3, #31
    32d4:	d500      	bpl.n	32d8 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    32d6:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    32d8:	2300      	movs	r3, #0
    32da:	9302      	str	r3, [sp, #8]
    32dc:	9301      	str	r3, [sp, #4]
    32de:	9300      	str	r3, [sp, #0]
    32e0:	3304      	adds	r3, #4
    32e2:	aa05      	add	r2, sp, #20
    32e4:	2002      	movs	r0, #2
    32e6:	4d10      	ldr	r5, [pc, #64]	; (3328 <close+0x94>)
    32e8:	47a8      	blx	r5
    32ea:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    32ec:	d001      	beq.n	32f2 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    32ee:	2509      	movs	r5, #9
    32f0:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    32f2:	0124      	lsls	r4, r4, #4
    32f4:	480b      	ldr	r0, [pc, #44]	; (3324 <close+0x90>)
    32f6:	1820      	adds	r0, r4, r0
    32f8:	2210      	movs	r2, #16
    32fa:	2100      	movs	r1, #0
    32fc:	4b0b      	ldr	r3, [pc, #44]	; (332c <close+0x98>)
    32fe:	4798      	blx	r3
	}
	return s8Ret;
}
    3300:	0028      	movs	r0, r5
    3302:	b007      	add	sp, #28
    3304:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3306:	2506      	movs	r5, #6
    3308:	426d      	negs	r5, r5
    330a:	e7f9      	b.n	3300 <close+0x6c>
    330c:	2506      	movs	r5, #6
    330e:	426d      	negs	r5, r5
    3310:	e7f6      	b.n	3300 <close+0x6c>
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00007da8 	.word	0x00007da8
    3318:	000058d9 	.word	0x000058d9
    331c:	00008820 	.word	0x00008820
    3320:	0000590d 	.word	0x0000590d
    3324:	20000934 	.word	0x20000934
    3328:	000006a1 	.word	0x000006a1
    332c:	0000058d 	.word	0x0000058d

00003330 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3330:	b510      	push	{r4, lr}
    3332:	b084      	sub	sp, #16
    3334:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3336:	4b0b      	ldr	r3, [pc, #44]	; (3364 <gethostbyname+0x34>)
    3338:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    333a:	b2c3      	uxtb	r3, r0
    333c:	2b40      	cmp	r3, #64	; 0x40
    333e:	d80d      	bhi.n	335c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3340:	23ff      	movs	r3, #255	; 0xff
    3342:	4003      	ands	r3, r0
    3344:	3301      	adds	r3, #1
    3346:	2200      	movs	r2, #0
    3348:	9202      	str	r2, [sp, #8]
    334a:	9201      	str	r2, [sp, #4]
    334c:	9200      	str	r2, [sp, #0]
    334e:	0022      	movs	r2, r4
    3350:	214a      	movs	r1, #74	; 0x4a
    3352:	2002      	movs	r0, #2
    3354:	4c04      	ldr	r4, [pc, #16]	; (3368 <gethostbyname+0x38>)
    3356:	47a0      	blx	r4
	}
	return s8Err;
}
    3358:	b004      	add	sp, #16
    335a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    335c:	2006      	movs	r0, #6
    335e:	4240      	negs	r0, r0
    3360:	e7fa      	b.n	3358 <gethostbyname+0x28>
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	0000059d 	.word	0x0000059d
    3368:	000006a1 	.word	0x000006a1

0000336c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    336c:	b570      	push	{r4, r5, r6, lr}
    336e:	b082      	sub	sp, #8
    3370:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3372:	4b2a      	ldr	r3, [pc, #168]	; (341c <spi_flash_enable+0xb0>)
    3374:	4798      	blx	r3
    3376:	0500      	lsls	r0, r0, #20
    3378:	0d00      	lsrs	r0, r0, #20
    337a:	4b29      	ldr	r3, [pc, #164]	; (3420 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    337c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    337e:	4298      	cmp	r0, r3
    3380:	d802      	bhi.n	3388 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3382:	0028      	movs	r0, r5
    3384:	b002      	add	sp, #8
    3386:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3388:	a901      	add	r1, sp, #4
    338a:	4826      	ldr	r0, [pc, #152]	; (3424 <spi_flash_enable+0xb8>)
    338c:	4b26      	ldr	r3, [pc, #152]	; (3428 <spi_flash_enable+0xbc>)
    338e:	4798      	blx	r3
    3390:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3392:	d1f6      	bne.n	3382 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3394:	4b25      	ldr	r3, [pc, #148]	; (342c <spi_flash_enable+0xc0>)
    3396:	9a01      	ldr	r2, [sp, #4]
    3398:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    339a:	4925      	ldr	r1, [pc, #148]	; (3430 <spi_flash_enable+0xc4>)
    339c:	4319      	orrs	r1, r3
    339e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    33a0:	4820      	ldr	r0, [pc, #128]	; (3424 <spi_flash_enable+0xb8>)
    33a2:	4b24      	ldr	r3, [pc, #144]	; (3434 <spi_flash_enable+0xc8>)
    33a4:	4798      	blx	r3
		if(enable) {
    33a6:	2c00      	cmp	r4, #0
    33a8:	d020      	beq.n	33ec <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    33aa:	2100      	movs	r1, #0
    33ac:	4822      	ldr	r0, [pc, #136]	; (3438 <spi_flash_enable+0xcc>)
    33ae:	4c21      	ldr	r4, [pc, #132]	; (3434 <spi_flash_enable+0xc8>)
    33b0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    33b2:	21ab      	movs	r1, #171	; 0xab
    33b4:	4821      	ldr	r0, [pc, #132]	; (343c <spi_flash_enable+0xd0>)
    33b6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    33b8:	2101      	movs	r1, #1
    33ba:	4821      	ldr	r0, [pc, #132]	; (3440 <spi_flash_enable+0xd4>)
    33bc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    33be:	2100      	movs	r1, #0
    33c0:	4820      	ldr	r0, [pc, #128]	; (3444 <spi_flash_enable+0xd8>)
    33c2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    33c4:	2181      	movs	r1, #129	; 0x81
    33c6:	4820      	ldr	r0, [pc, #128]	; (3448 <spi_flash_enable+0xdc>)
    33c8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    33ca:	4e20      	ldr	r6, [pc, #128]	; (344c <spi_flash_enable+0xe0>)
    33cc:	4c20      	ldr	r4, [pc, #128]	; (3450 <spi_flash_enable+0xe4>)
    33ce:	0030      	movs	r0, r6
    33d0:	47a0      	blx	r4
    33d2:	2801      	cmp	r0, #1
    33d4:	d1fb      	bne.n	33ce <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    33d6:	4b15      	ldr	r3, [pc, #84]	; (342c <spi_flash_enable+0xc0>)
    33d8:	9a01      	ldr	r2, [sp, #4]
    33da:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    33dc:	2180      	movs	r1, #128	; 0x80
    33de:	0249      	lsls	r1, r1, #9
    33e0:	4319      	orrs	r1, r3
    33e2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    33e4:	480f      	ldr	r0, [pc, #60]	; (3424 <spi_flash_enable+0xb8>)
    33e6:	4b13      	ldr	r3, [pc, #76]	; (3434 <spi_flash_enable+0xc8>)
    33e8:	4798      	blx	r3
    33ea:	e7ca      	b.n	3382 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    33ec:	2100      	movs	r1, #0
    33ee:	4812      	ldr	r0, [pc, #72]	; (3438 <spi_flash_enable+0xcc>)
    33f0:	4c10      	ldr	r4, [pc, #64]	; (3434 <spi_flash_enable+0xc8>)
    33f2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    33f4:	21b9      	movs	r1, #185	; 0xb9
    33f6:	4811      	ldr	r0, [pc, #68]	; (343c <spi_flash_enable+0xd0>)
    33f8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    33fa:	2101      	movs	r1, #1
    33fc:	4810      	ldr	r0, [pc, #64]	; (3440 <spi_flash_enable+0xd4>)
    33fe:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3400:	2100      	movs	r1, #0
    3402:	4810      	ldr	r0, [pc, #64]	; (3444 <spi_flash_enable+0xd8>)
    3404:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3406:	2181      	movs	r1, #129	; 0x81
    3408:	480f      	ldr	r0, [pc, #60]	; (3448 <spi_flash_enable+0xdc>)
    340a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    340c:	4e0f      	ldr	r6, [pc, #60]	; (344c <spi_flash_enable+0xe0>)
    340e:	4c10      	ldr	r4, [pc, #64]	; (3450 <spi_flash_enable+0xe4>)
    3410:	0030      	movs	r0, r6
    3412:	47a0      	blx	r4
    3414:	2801      	cmp	r0, #1
    3416:	d1fb      	bne.n	3410 <spi_flash_enable+0xa4>
    3418:	e7dd      	b.n	33d6 <spi_flash_enable+0x6a>
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	00001655 	.word	0x00001655
    3420:	0000039f 	.word	0x0000039f
    3424:	00001410 	.word	0x00001410
    3428:	00001ba5 	.word	0x00001ba5
    342c:	f8888fff 	.word	0xf8888fff
    3430:	01111000 	.word	0x01111000
    3434:	00001bb1 	.word	0x00001bb1
    3438:	00010208 	.word	0x00010208
    343c:	0001020c 	.word	0x0001020c
    3440:	00010214 	.word	0x00010214
    3444:	0001021c 	.word	0x0001021c
    3448:	00010204 	.word	0x00010204
    344c:	00010218 	.word	0x00010218
    3450:	00001b99 	.word	0x00001b99

00003454 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3454:	4b0c      	ldr	r3, [pc, #48]	; (3488 <cpu_irq_enter_critical+0x34>)
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	2b00      	cmp	r3, #0
    345a:	d106      	bne.n	346a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    345c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3460:	2b00      	cmp	r3, #0
    3462:	d007      	beq.n	3474 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3464:	2200      	movs	r2, #0
    3466:	4b09      	ldr	r3, [pc, #36]	; (348c <cpu_irq_enter_critical+0x38>)
    3468:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    346a:	4a07      	ldr	r2, [pc, #28]	; (3488 <cpu_irq_enter_critical+0x34>)
    346c:	6813      	ldr	r3, [r2, #0]
    346e:	3301      	adds	r3, #1
    3470:	6013      	str	r3, [r2, #0]
}
    3472:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3474:	b672      	cpsid	i
    3476:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    347a:	2200      	movs	r2, #0
    347c:	4b04      	ldr	r3, [pc, #16]	; (3490 <cpu_irq_enter_critical+0x3c>)
    347e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3480:	3201      	adds	r2, #1
    3482:	4b02      	ldr	r3, [pc, #8]	; (348c <cpu_irq_enter_critical+0x38>)
    3484:	701a      	strb	r2, [r3, #0]
    3486:	e7f0      	b.n	346a <cpu_irq_enter_critical+0x16>
    3488:	200002b4 	.word	0x200002b4
    348c:	200002b8 	.word	0x200002b8
    3490:	2000000a 	.word	0x2000000a

00003494 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3494:	4b08      	ldr	r3, [pc, #32]	; (34b8 <cpu_irq_leave_critical+0x24>)
    3496:	681a      	ldr	r2, [r3, #0]
    3498:	3a01      	subs	r2, #1
    349a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    349c:	681b      	ldr	r3, [r3, #0]
    349e:	2b00      	cmp	r3, #0
    34a0:	d109      	bne.n	34b6 <cpu_irq_leave_critical+0x22>
    34a2:	4b06      	ldr	r3, [pc, #24]	; (34bc <cpu_irq_leave_critical+0x28>)
    34a4:	781b      	ldrb	r3, [r3, #0]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d005      	beq.n	34b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    34aa:	2201      	movs	r2, #1
    34ac:	4b04      	ldr	r3, [pc, #16]	; (34c0 <cpu_irq_leave_critical+0x2c>)
    34ae:	701a      	strb	r2, [r3, #0]
    34b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    34b4:	b662      	cpsie	i
	}
}
    34b6:	4770      	bx	lr
    34b8:	200002b4 	.word	0x200002b4
    34bc:	200002b8 	.word	0x200002b8
    34c0:	2000000a 	.word	0x2000000a

000034c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    34c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34c6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    34c8:	ac01      	add	r4, sp, #4
    34ca:	2501      	movs	r5, #1
    34cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    34ce:	2700      	movs	r7, #0
    34d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    34d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    34d4:	0021      	movs	r1, r4
    34d6:	203e      	movs	r0, #62	; 0x3e
    34d8:	4e06      	ldr	r6, [pc, #24]	; (34f4 <system_board_init+0x30>)
    34da:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    34dc:	2280      	movs	r2, #128	; 0x80
    34de:	05d2      	lsls	r2, r2, #23
    34e0:	4b05      	ldr	r3, [pc, #20]	; (34f8 <system_board_init+0x34>)
    34e2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    34e4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    34e6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    34e8:	0021      	movs	r1, r4
    34ea:	200f      	movs	r0, #15
    34ec:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    34ee:	b003      	add	sp, #12
    34f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	000036cd 	.word	0x000036cd
    34f8:	41004480 	.word	0x41004480

000034fc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    34fc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    34fe:	2a00      	cmp	r2, #0
    3500:	d001      	beq.n	3506 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3502:	0018      	movs	r0, r3
    3504:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    3506:	008b      	lsls	r3, r1, #2
    3508:	4a06      	ldr	r2, [pc, #24]	; (3524 <extint_register_callback+0x28>)
    350a:	589b      	ldr	r3, [r3, r2]
    350c:	2b00      	cmp	r3, #0
    350e:	d003      	beq.n	3518 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3510:	4283      	cmp	r3, r0
    3512:	d005      	beq.n	3520 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3514:	231d      	movs	r3, #29
    3516:	e7f4      	b.n	3502 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    3518:	0089      	lsls	r1, r1, #2
    351a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    351c:	2300      	movs	r3, #0
    351e:	e7f0      	b.n	3502 <extint_register_callback+0x6>
		return STATUS_OK;
    3520:	2300      	movs	r3, #0
    3522:	e7ee      	b.n	3502 <extint_register_callback+0x6>
    3524:	200009f4 	.word	0x200009f4

00003528 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3528:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    352a:	2900      	cmp	r1, #0
    352c:	d001      	beq.n	3532 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    352e:	0018      	movs	r0, r3
    3530:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3532:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3534:	281f      	cmp	r0, #31
    3536:	d800      	bhi.n	353a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3538:	4a02      	ldr	r2, [pc, #8]	; (3544 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    353a:	2301      	movs	r3, #1
    353c:	4083      	lsls	r3, r0
    353e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3540:	2300      	movs	r3, #0
    3542:	e7f4      	b.n	352e <extint_chan_enable_callback+0x6>
    3544:	40001800 	.word	0x40001800

00003548 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3548:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    354a:	2900      	cmp	r1, #0
    354c:	d001      	beq.n	3552 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    354e:	0018      	movs	r0, r3
    3550:	4770      	bx	lr
		return NULL;
    3552:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3554:	281f      	cmp	r0, #31
    3556:	d800      	bhi.n	355a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3558:	4a02      	ldr	r2, [pc, #8]	; (3564 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    355a:	2301      	movs	r3, #1
    355c:	4083      	lsls	r3, r0
    355e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3560:	2300      	movs	r3, #0
    3562:	e7f4      	b.n	354e <extint_chan_disable_callback+0x6>
    3564:	40001800 	.word	0x40001800

00003568 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3568:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    356a:	2200      	movs	r2, #0
    356c:	4b10      	ldr	r3, [pc, #64]	; (35b0 <EIC_Handler+0x48>)
    356e:	701a      	strb	r2, [r3, #0]
    3570:	2300      	movs	r3, #0
    3572:	4910      	ldr	r1, [pc, #64]	; (35b4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3574:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3576:	4e10      	ldr	r6, [pc, #64]	; (35b8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3578:	4c0d      	ldr	r4, [pc, #52]	; (35b0 <EIC_Handler+0x48>)
    357a:	e00a      	b.n	3592 <EIC_Handler+0x2a>
		return eics[eic_index];
    357c:	490d      	ldr	r1, [pc, #52]	; (35b4 <EIC_Handler+0x4c>)
    357e:	e008      	b.n	3592 <EIC_Handler+0x2a>
    3580:	7823      	ldrb	r3, [r4, #0]
    3582:	3301      	adds	r3, #1
    3584:	b2db      	uxtb	r3, r3
    3586:	7023      	strb	r3, [r4, #0]
    3588:	2b0f      	cmp	r3, #15
    358a:	d810      	bhi.n	35ae <EIC_Handler+0x46>
		return NULL;
    358c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    358e:	2b1f      	cmp	r3, #31
    3590:	d9f4      	bls.n	357c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3592:	0028      	movs	r0, r5
    3594:	4018      	ands	r0, r3
    3596:	2201      	movs	r2, #1
    3598:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    359a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    359c:	4210      	tst	r0, r2
    359e:	d0ef      	beq.n	3580 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    35a0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    35a2:	009b      	lsls	r3, r3, #2
    35a4:	599b      	ldr	r3, [r3, r6]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d0ea      	beq.n	3580 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    35aa:	4798      	blx	r3
    35ac:	e7e8      	b.n	3580 <EIC_Handler+0x18>
			}
		}
	}
}
    35ae:	bd70      	pop	{r4, r5, r6, pc}
    35b0:	200009f0 	.word	0x200009f0
    35b4:	40001800 	.word	0x40001800
    35b8:	200009f4 	.word	0x200009f4

000035bc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    35bc:	4a04      	ldr	r2, [pc, #16]	; (35d0 <_extint_enable+0x14>)
    35be:	7813      	ldrb	r3, [r2, #0]
    35c0:	2102      	movs	r1, #2
    35c2:	430b      	orrs	r3, r1
    35c4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    35c6:	7853      	ldrb	r3, [r2, #1]
    35c8:	b25b      	sxtb	r3, r3
    35ca:	2b00      	cmp	r3, #0
    35cc:	dbfb      	blt.n	35c6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    35ce:	4770      	bx	lr
    35d0:	40001800 	.word	0x40001800

000035d4 <_system_extint_init>:
{
    35d4:	b500      	push	{lr}
    35d6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    35d8:	4a12      	ldr	r2, [pc, #72]	; (3624 <_system_extint_init+0x50>)
    35da:	6993      	ldr	r3, [r2, #24]
    35dc:	2140      	movs	r1, #64	; 0x40
    35de:	430b      	orrs	r3, r1
    35e0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    35e2:	a901      	add	r1, sp, #4
    35e4:	2300      	movs	r3, #0
    35e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    35e8:	2005      	movs	r0, #5
    35ea:	4b0f      	ldr	r3, [pc, #60]	; (3628 <_system_extint_init+0x54>)
    35ec:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    35ee:	2005      	movs	r0, #5
    35f0:	4b0e      	ldr	r3, [pc, #56]	; (362c <_system_extint_init+0x58>)
    35f2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    35f4:	4a0e      	ldr	r2, [pc, #56]	; (3630 <_system_extint_init+0x5c>)
    35f6:	7813      	ldrb	r3, [r2, #0]
    35f8:	2101      	movs	r1, #1
    35fa:	430b      	orrs	r3, r1
    35fc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    35fe:	7853      	ldrb	r3, [r2, #1]
    3600:	b25b      	sxtb	r3, r3
    3602:	2b00      	cmp	r3, #0
    3604:	dbfb      	blt.n	35fe <_system_extint_init+0x2a>
    3606:	4b0b      	ldr	r3, [pc, #44]	; (3634 <_system_extint_init+0x60>)
    3608:	0019      	movs	r1, r3
    360a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    360c:	2200      	movs	r2, #0
    360e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3610:	4299      	cmp	r1, r3
    3612:	d1fc      	bne.n	360e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3614:	2210      	movs	r2, #16
    3616:	4b08      	ldr	r3, [pc, #32]	; (3638 <_system_extint_init+0x64>)
    3618:	601a      	str	r2, [r3, #0]
	_extint_enable();
    361a:	4b08      	ldr	r3, [pc, #32]	; (363c <_system_extint_init+0x68>)
    361c:	4798      	blx	r3
}
    361e:	b003      	add	sp, #12
    3620:	bd00      	pop	{pc}
    3622:	46c0      	nop			; (mov r8, r8)
    3624:	40000400 	.word	0x40000400
    3628:	00004b89 	.word	0x00004b89
    362c:	00004afd 	.word	0x00004afd
    3630:	40001800 	.word	0x40001800
    3634:	200009f4 	.word	0x200009f4
    3638:	e000e100 	.word	0xe000e100
    363c:	000035bd 	.word	0x000035bd

00003640 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3640:	2300      	movs	r3, #0
    3642:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3644:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3646:	2201      	movs	r2, #1
    3648:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    364a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    364c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    364e:	3302      	adds	r3, #2
    3650:	72c3      	strb	r3, [r0, #11]
}
    3652:	4770      	bx	lr

00003654 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3654:	b5f0      	push	{r4, r5, r6, r7, lr}
    3656:	b083      	sub	sp, #12
    3658:	0005      	movs	r5, r0
    365a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    365c:	a901      	add	r1, sp, #4
    365e:	2300      	movs	r3, #0
    3660:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3662:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3664:	7923      	ldrb	r3, [r4, #4]
    3666:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3668:	7a23      	ldrb	r3, [r4, #8]
    366a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    366c:	7820      	ldrb	r0, [r4, #0]
    366e:	4b15      	ldr	r3, [pc, #84]	; (36c4 <extint_chan_set_config+0x70>)
    3670:	4798      	blx	r3
		return NULL;
    3672:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    3674:	2d1f      	cmp	r5, #31
    3676:	d800      	bhi.n	367a <extint_chan_set_config+0x26>
		return eics[eic_index];
    3678:	4813      	ldr	r0, [pc, #76]	; (36c8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    367a:	2207      	movs	r2, #7
    367c:	402a      	ands	r2, r5
    367e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3680:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3682:	7aa3      	ldrb	r3, [r4, #10]
    3684:	2b00      	cmp	r3, #0
    3686:	d001      	beq.n	368c <extint_chan_set_config+0x38>
    3688:	2308      	movs	r3, #8
    368a:	431f      	orrs	r7, r3
    368c:	08eb      	lsrs	r3, r5, #3
    368e:	009b      	lsls	r3, r3, #2
    3690:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3692:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3694:	260f      	movs	r6, #15
    3696:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    3698:	43b1      	bics	r1, r6
			(new_config << config_pos);
    369a:	4097      	lsls	r7, r2
    369c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    369e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    36a0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    36a2:	7a63      	ldrb	r3, [r4, #9]
    36a4:	2b00      	cmp	r3, #0
    36a6:	d106      	bne.n	36b6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    36a8:	6943      	ldr	r3, [r0, #20]
    36aa:	2201      	movs	r2, #1
    36ac:	40aa      	lsls	r2, r5
    36ae:	4393      	bics	r3, r2
    36b0:	6143      	str	r3, [r0, #20]
	}
}
    36b2:	b003      	add	sp, #12
    36b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    36b6:	6942      	ldr	r2, [r0, #20]
    36b8:	2301      	movs	r3, #1
    36ba:	40ab      	lsls	r3, r5
    36bc:	4313      	orrs	r3, r2
    36be:	6143      	str	r3, [r0, #20]
    36c0:	e7f7      	b.n	36b2 <extint_chan_set_config+0x5e>
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	00004c81 	.word	0x00004c81
    36c8:	40001800 	.word	0x40001800

000036cc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    36cc:	b500      	push	{lr}
    36ce:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    36d0:	ab01      	add	r3, sp, #4
    36d2:	2280      	movs	r2, #128	; 0x80
    36d4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    36d6:	780a      	ldrb	r2, [r1, #0]
    36d8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    36da:	784a      	ldrb	r2, [r1, #1]
    36dc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    36de:	788a      	ldrb	r2, [r1, #2]
    36e0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    36e2:	0019      	movs	r1, r3
    36e4:	4b01      	ldr	r3, [pc, #4]	; (36ec <port_pin_set_config+0x20>)
    36e6:	4798      	blx	r3
}
    36e8:	b003      	add	sp, #12
    36ea:	bd00      	pop	{pc}
    36ec:	00004c81 	.word	0x00004c81

000036f0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    36f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36f2:	46de      	mov	lr, fp
    36f4:	4657      	mov	r7, sl
    36f6:	464e      	mov	r6, r9
    36f8:	4645      	mov	r5, r8
    36fa:	b5e0      	push	{r5, r6, r7, lr}
    36fc:	b087      	sub	sp, #28
    36fe:	4680      	mov	r8, r0
    3700:	9104      	str	r1, [sp, #16]
    3702:	0016      	movs	r6, r2
    3704:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3706:	2200      	movs	r2, #0
    3708:	2300      	movs	r3, #0
    370a:	2100      	movs	r1, #0
    370c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    370e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3710:	2001      	movs	r0, #1
    3712:	0021      	movs	r1, r4
    3714:	9600      	str	r6, [sp, #0]
    3716:	9701      	str	r7, [sp, #4]
    3718:	465c      	mov	r4, fp
    371a:	9403      	str	r4, [sp, #12]
    371c:	4644      	mov	r4, r8
    371e:	9405      	str	r4, [sp, #20]
    3720:	e013      	b.n	374a <long_division+0x5a>
    3722:	2420      	movs	r4, #32
    3724:	1a64      	subs	r4, r4, r1
    3726:	0005      	movs	r5, r0
    3728:	40e5      	lsrs	r5, r4
    372a:	46a8      	mov	r8, r5
    372c:	e014      	b.n	3758 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    372e:	9c00      	ldr	r4, [sp, #0]
    3730:	9d01      	ldr	r5, [sp, #4]
    3732:	1b12      	subs	r2, r2, r4
    3734:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3736:	465c      	mov	r4, fp
    3738:	464d      	mov	r5, r9
    373a:	432c      	orrs	r4, r5
    373c:	46a3      	mov	fp, r4
    373e:	9c03      	ldr	r4, [sp, #12]
    3740:	4645      	mov	r5, r8
    3742:	432c      	orrs	r4, r5
    3744:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    3746:	3901      	subs	r1, #1
    3748:	d325      	bcc.n	3796 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    374a:	2420      	movs	r4, #32
    374c:	4264      	negs	r4, r4
    374e:	190c      	adds	r4, r1, r4
    3750:	d4e7      	bmi.n	3722 <long_division+0x32>
    3752:	0005      	movs	r5, r0
    3754:	40a5      	lsls	r5, r4
    3756:	46a8      	mov	r8, r5
    3758:	0004      	movs	r4, r0
    375a:	408c      	lsls	r4, r1
    375c:	46a1      	mov	r9, r4
		r = r << 1;
    375e:	1892      	adds	r2, r2, r2
    3760:	415b      	adcs	r3, r3
    3762:	0014      	movs	r4, r2
    3764:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3766:	9e05      	ldr	r6, [sp, #20]
    3768:	464f      	mov	r7, r9
    376a:	403e      	ands	r6, r7
    376c:	46b4      	mov	ip, r6
    376e:	9e04      	ldr	r6, [sp, #16]
    3770:	4647      	mov	r7, r8
    3772:	403e      	ands	r6, r7
    3774:	46b2      	mov	sl, r6
    3776:	4666      	mov	r6, ip
    3778:	4657      	mov	r7, sl
    377a:	433e      	orrs	r6, r7
    377c:	d003      	beq.n	3786 <long_division+0x96>
			r |= 0x01;
    377e:	0006      	movs	r6, r0
    3780:	4326      	orrs	r6, r4
    3782:	0032      	movs	r2, r6
    3784:	002b      	movs	r3, r5
		if (r >= d) {
    3786:	9c00      	ldr	r4, [sp, #0]
    3788:	9d01      	ldr	r5, [sp, #4]
    378a:	429d      	cmp	r5, r3
    378c:	d8db      	bhi.n	3746 <long_division+0x56>
    378e:	d1ce      	bne.n	372e <long_division+0x3e>
    3790:	4294      	cmp	r4, r2
    3792:	d8d8      	bhi.n	3746 <long_division+0x56>
    3794:	e7cb      	b.n	372e <long_division+0x3e>
    3796:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    3798:	4658      	mov	r0, fp
    379a:	0019      	movs	r1, r3
    379c:	b007      	add	sp, #28
    379e:	bc3c      	pop	{r2, r3, r4, r5}
    37a0:	4690      	mov	r8, r2
    37a2:	4699      	mov	r9, r3
    37a4:	46a2      	mov	sl, r4
    37a6:	46ab      	mov	fp, r5
    37a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000037aa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    37aa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    37ac:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37ae:	2340      	movs	r3, #64	; 0x40
    37b0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    37b2:	4281      	cmp	r1, r0
    37b4:	d202      	bcs.n	37bc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    37b6:	0018      	movs	r0, r3
    37b8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    37ba:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    37bc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    37be:	1c63      	adds	r3, r4, #1
    37c0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    37c2:	4288      	cmp	r0, r1
    37c4:	d9f9      	bls.n	37ba <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37c6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    37c8:	2cff      	cmp	r4, #255	; 0xff
    37ca:	d8f4      	bhi.n	37b6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    37cc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    37ce:	2300      	movs	r3, #0
    37d0:	e7f1      	b.n	37b6 <_sercom_get_sync_baud_val+0xc>
	...

000037d4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    37d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37d6:	b083      	sub	sp, #12
    37d8:	000f      	movs	r7, r1
    37da:	0016      	movs	r6, r2
    37dc:	aa08      	add	r2, sp, #32
    37de:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    37e0:	0004      	movs	r4, r0
    37e2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37e4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    37e6:	42bc      	cmp	r4, r7
    37e8:	d902      	bls.n	37f0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    37ea:	0010      	movs	r0, r2
    37ec:	b003      	add	sp, #12
    37ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    37f0:	2b00      	cmp	r3, #0
    37f2:	d114      	bne.n	381e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    37f4:	0002      	movs	r2, r0
    37f6:	0008      	movs	r0, r1
    37f8:	2100      	movs	r1, #0
    37fa:	4c19      	ldr	r4, [pc, #100]	; (3860 <_sercom_get_async_baud_val+0x8c>)
    37fc:	47a0      	blx	r4
    37fe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    3800:	003a      	movs	r2, r7
    3802:	2300      	movs	r3, #0
    3804:	2000      	movs	r0, #0
    3806:	4c17      	ldr	r4, [pc, #92]	; (3864 <_sercom_get_async_baud_val+0x90>)
    3808:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    380a:	2200      	movs	r2, #0
    380c:	2301      	movs	r3, #1
    380e:	1a12      	subs	r2, r2, r0
    3810:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3812:	0c12      	lsrs	r2, r2, #16
    3814:	041b      	lsls	r3, r3, #16
    3816:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    3818:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    381a:	2200      	movs	r2, #0
    381c:	e7e5      	b.n	37ea <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    381e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3820:	2b01      	cmp	r3, #1
    3822:	d1f9      	bne.n	3818 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    3824:	000a      	movs	r2, r1
    3826:	2300      	movs	r3, #0
    3828:	2100      	movs	r1, #0
    382a:	4c0d      	ldr	r4, [pc, #52]	; (3860 <_sercom_get_async_baud_val+0x8c>)
    382c:	47a0      	blx	r4
    382e:	0002      	movs	r2, r0
    3830:	000b      	movs	r3, r1
    3832:	9200      	str	r2, [sp, #0]
    3834:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    3836:	0038      	movs	r0, r7
    3838:	2100      	movs	r1, #0
    383a:	4c0a      	ldr	r4, [pc, #40]	; (3864 <_sercom_get_async_baud_val+0x90>)
    383c:	47a0      	blx	r4
    383e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    3840:	2380      	movs	r3, #128	; 0x80
    3842:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3844:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    3846:	4298      	cmp	r0, r3
    3848:	d8cf      	bhi.n	37ea <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    384a:	0f79      	lsrs	r1, r7, #29
    384c:	00f8      	lsls	r0, r7, #3
    384e:	9a00      	ldr	r2, [sp, #0]
    3850:	9b01      	ldr	r3, [sp, #4]
    3852:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3854:	00ea      	lsls	r2, r5, #3
    3856:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    3858:	b2d2      	uxtb	r2, r2
    385a:	0352      	lsls	r2, r2, #13
    385c:	432a      	orrs	r2, r5
    385e:	e7db      	b.n	3818 <_sercom_get_async_baud_val+0x44>
    3860:	0000582d 	.word	0x0000582d
    3864:	000036f1 	.word	0x000036f1

00003868 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3868:	b510      	push	{r4, lr}
    386a:	b082      	sub	sp, #8
    386c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    386e:	4b0e      	ldr	r3, [pc, #56]	; (38a8 <sercom_set_gclk_generator+0x40>)
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d007      	beq.n	3886 <sercom_set_gclk_generator+0x1e>
    3876:	2900      	cmp	r1, #0
    3878:	d105      	bne.n	3886 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    387a:	4b0b      	ldr	r3, [pc, #44]	; (38a8 <sercom_set_gclk_generator+0x40>)
    387c:	785b      	ldrb	r3, [r3, #1]
    387e:	4283      	cmp	r3, r0
    3880:	d010      	beq.n	38a4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3882:	201d      	movs	r0, #29
    3884:	e00c      	b.n	38a0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3886:	a901      	add	r1, sp, #4
    3888:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    388a:	2013      	movs	r0, #19
    388c:	4b07      	ldr	r3, [pc, #28]	; (38ac <sercom_set_gclk_generator+0x44>)
    388e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3890:	2013      	movs	r0, #19
    3892:	4b07      	ldr	r3, [pc, #28]	; (38b0 <sercom_set_gclk_generator+0x48>)
    3894:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3896:	4b04      	ldr	r3, [pc, #16]	; (38a8 <sercom_set_gclk_generator+0x40>)
    3898:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    389a:	2201      	movs	r2, #1
    389c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    389e:	2000      	movs	r0, #0
}
    38a0:	b002      	add	sp, #8
    38a2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    38a4:	2000      	movs	r0, #0
    38a6:	e7fb      	b.n	38a0 <sercom_set_gclk_generator+0x38>
    38a8:	200002bc 	.word	0x200002bc
    38ac:	00004b89 	.word	0x00004b89
    38b0:	00004afd 	.word	0x00004afd

000038b4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    38b4:	4b40      	ldr	r3, [pc, #256]	; (39b8 <_sercom_get_default_pad+0x104>)
    38b6:	4298      	cmp	r0, r3
    38b8:	d031      	beq.n	391e <_sercom_get_default_pad+0x6a>
    38ba:	d90a      	bls.n	38d2 <_sercom_get_default_pad+0x1e>
    38bc:	4b3f      	ldr	r3, [pc, #252]	; (39bc <_sercom_get_default_pad+0x108>)
    38be:	4298      	cmp	r0, r3
    38c0:	d04d      	beq.n	395e <_sercom_get_default_pad+0xaa>
    38c2:	4b3f      	ldr	r3, [pc, #252]	; (39c0 <_sercom_get_default_pad+0x10c>)
    38c4:	4298      	cmp	r0, r3
    38c6:	d05a      	beq.n	397e <_sercom_get_default_pad+0xca>
    38c8:	4b3e      	ldr	r3, [pc, #248]	; (39c4 <_sercom_get_default_pad+0x110>)
    38ca:	4298      	cmp	r0, r3
    38cc:	d037      	beq.n	393e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    38ce:	2000      	movs	r0, #0
}
    38d0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    38d2:	4b3d      	ldr	r3, [pc, #244]	; (39c8 <_sercom_get_default_pad+0x114>)
    38d4:	4298      	cmp	r0, r3
    38d6:	d00c      	beq.n	38f2 <_sercom_get_default_pad+0x3e>
    38d8:	4b3c      	ldr	r3, [pc, #240]	; (39cc <_sercom_get_default_pad+0x118>)
    38da:	4298      	cmp	r0, r3
    38dc:	d1f7      	bne.n	38ce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38de:	2901      	cmp	r1, #1
    38e0:	d017      	beq.n	3912 <_sercom_get_default_pad+0x5e>
    38e2:	2900      	cmp	r1, #0
    38e4:	d05d      	beq.n	39a2 <_sercom_get_default_pad+0xee>
    38e6:	2902      	cmp	r1, #2
    38e8:	d015      	beq.n	3916 <_sercom_get_default_pad+0x62>
    38ea:	2903      	cmp	r1, #3
    38ec:	d015      	beq.n	391a <_sercom_get_default_pad+0x66>
	return 0;
    38ee:	2000      	movs	r0, #0
    38f0:	e7ee      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38f2:	2901      	cmp	r1, #1
    38f4:	d007      	beq.n	3906 <_sercom_get_default_pad+0x52>
    38f6:	2900      	cmp	r1, #0
    38f8:	d051      	beq.n	399e <_sercom_get_default_pad+0xea>
    38fa:	2902      	cmp	r1, #2
    38fc:	d005      	beq.n	390a <_sercom_get_default_pad+0x56>
    38fe:	2903      	cmp	r1, #3
    3900:	d005      	beq.n	390e <_sercom_get_default_pad+0x5a>
	return 0;
    3902:	2000      	movs	r0, #0
    3904:	e7e4      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3906:	4832      	ldr	r0, [pc, #200]	; (39d0 <_sercom_get_default_pad+0x11c>)
    3908:	e7e2      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    390a:	4832      	ldr	r0, [pc, #200]	; (39d4 <_sercom_get_default_pad+0x120>)
    390c:	e7e0      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    390e:	4832      	ldr	r0, [pc, #200]	; (39d8 <_sercom_get_default_pad+0x124>)
    3910:	e7de      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3912:	4832      	ldr	r0, [pc, #200]	; (39dc <_sercom_get_default_pad+0x128>)
    3914:	e7dc      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3916:	4832      	ldr	r0, [pc, #200]	; (39e0 <_sercom_get_default_pad+0x12c>)
    3918:	e7da      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    391a:	4832      	ldr	r0, [pc, #200]	; (39e4 <_sercom_get_default_pad+0x130>)
    391c:	e7d8      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    391e:	2901      	cmp	r1, #1
    3920:	d007      	beq.n	3932 <_sercom_get_default_pad+0x7e>
    3922:	2900      	cmp	r1, #0
    3924:	d03f      	beq.n	39a6 <_sercom_get_default_pad+0xf2>
    3926:	2902      	cmp	r1, #2
    3928:	d005      	beq.n	3936 <_sercom_get_default_pad+0x82>
    392a:	2903      	cmp	r1, #3
    392c:	d005      	beq.n	393a <_sercom_get_default_pad+0x86>
	return 0;
    392e:	2000      	movs	r0, #0
    3930:	e7ce      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3932:	482d      	ldr	r0, [pc, #180]	; (39e8 <_sercom_get_default_pad+0x134>)
    3934:	e7cc      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3936:	482d      	ldr	r0, [pc, #180]	; (39ec <_sercom_get_default_pad+0x138>)
    3938:	e7ca      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    393a:	482d      	ldr	r0, [pc, #180]	; (39f0 <_sercom_get_default_pad+0x13c>)
    393c:	e7c8      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    393e:	2901      	cmp	r1, #1
    3940:	d007      	beq.n	3952 <_sercom_get_default_pad+0x9e>
    3942:	2900      	cmp	r1, #0
    3944:	d031      	beq.n	39aa <_sercom_get_default_pad+0xf6>
    3946:	2902      	cmp	r1, #2
    3948:	d005      	beq.n	3956 <_sercom_get_default_pad+0xa2>
    394a:	2903      	cmp	r1, #3
    394c:	d005      	beq.n	395a <_sercom_get_default_pad+0xa6>
	return 0;
    394e:	2000      	movs	r0, #0
    3950:	e7be      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3952:	4828      	ldr	r0, [pc, #160]	; (39f4 <_sercom_get_default_pad+0x140>)
    3954:	e7bc      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3956:	4828      	ldr	r0, [pc, #160]	; (39f8 <_sercom_get_default_pad+0x144>)
    3958:	e7ba      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    395a:	4828      	ldr	r0, [pc, #160]	; (39fc <_sercom_get_default_pad+0x148>)
    395c:	e7b8      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    395e:	2901      	cmp	r1, #1
    3960:	d007      	beq.n	3972 <_sercom_get_default_pad+0xbe>
    3962:	2900      	cmp	r1, #0
    3964:	d023      	beq.n	39ae <_sercom_get_default_pad+0xfa>
    3966:	2902      	cmp	r1, #2
    3968:	d005      	beq.n	3976 <_sercom_get_default_pad+0xc2>
    396a:	2903      	cmp	r1, #3
    396c:	d005      	beq.n	397a <_sercom_get_default_pad+0xc6>
	return 0;
    396e:	2000      	movs	r0, #0
    3970:	e7ae      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3972:	4823      	ldr	r0, [pc, #140]	; (3a00 <_sercom_get_default_pad+0x14c>)
    3974:	e7ac      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3976:	4823      	ldr	r0, [pc, #140]	; (3a04 <_sercom_get_default_pad+0x150>)
    3978:	e7aa      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    397a:	4823      	ldr	r0, [pc, #140]	; (3a08 <_sercom_get_default_pad+0x154>)
    397c:	e7a8      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    397e:	2901      	cmp	r1, #1
    3980:	d007      	beq.n	3992 <_sercom_get_default_pad+0xde>
    3982:	2900      	cmp	r1, #0
    3984:	d015      	beq.n	39b2 <_sercom_get_default_pad+0xfe>
    3986:	2902      	cmp	r1, #2
    3988:	d005      	beq.n	3996 <_sercom_get_default_pad+0xe2>
    398a:	2903      	cmp	r1, #3
    398c:	d005      	beq.n	399a <_sercom_get_default_pad+0xe6>
	return 0;
    398e:	2000      	movs	r0, #0
    3990:	e79e      	b.n	38d0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3992:	481e      	ldr	r0, [pc, #120]	; (3a0c <_sercom_get_default_pad+0x158>)
    3994:	e79c      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    3996:	481e      	ldr	r0, [pc, #120]	; (3a10 <_sercom_get_default_pad+0x15c>)
    3998:	e79a      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    399a:	481e      	ldr	r0, [pc, #120]	; (3a14 <_sercom_get_default_pad+0x160>)
    399c:	e798      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    399e:	481e      	ldr	r0, [pc, #120]	; (3a18 <_sercom_get_default_pad+0x164>)
    39a0:	e796      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39a2:	2003      	movs	r0, #3
    39a4:	e794      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39a6:	481d      	ldr	r0, [pc, #116]	; (3a1c <_sercom_get_default_pad+0x168>)
    39a8:	e792      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39aa:	481d      	ldr	r0, [pc, #116]	; (3a20 <_sercom_get_default_pad+0x16c>)
    39ac:	e790      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39ae:	481d      	ldr	r0, [pc, #116]	; (3a24 <_sercom_get_default_pad+0x170>)
    39b0:	e78e      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39b2:	481d      	ldr	r0, [pc, #116]	; (3a28 <_sercom_get_default_pad+0x174>)
    39b4:	e78c      	b.n	38d0 <_sercom_get_default_pad+0x1c>
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	42001000 	.word	0x42001000
    39bc:	42001800 	.word	0x42001800
    39c0:	42001c00 	.word	0x42001c00
    39c4:	42001400 	.word	0x42001400
    39c8:	42000800 	.word	0x42000800
    39cc:	42000c00 	.word	0x42000c00
    39d0:	00050003 	.word	0x00050003
    39d4:	00060003 	.word	0x00060003
    39d8:	00070003 	.word	0x00070003
    39dc:	00010003 	.word	0x00010003
    39e0:	001e0003 	.word	0x001e0003
    39e4:	001f0003 	.word	0x001f0003
    39e8:	00090003 	.word	0x00090003
    39ec:	000a0003 	.word	0x000a0003
    39f0:	000b0003 	.word	0x000b0003
    39f4:	00110003 	.word	0x00110003
    39f8:	00120003 	.word	0x00120003
    39fc:	00130003 	.word	0x00130003
    3a00:	000d0003 	.word	0x000d0003
    3a04:	000e0003 	.word	0x000e0003
    3a08:	000f0003 	.word	0x000f0003
    3a0c:	00170003 	.word	0x00170003
    3a10:	00180003 	.word	0x00180003
    3a14:	00190003 	.word	0x00190003
    3a18:	00040003 	.word	0x00040003
    3a1c:	00080003 	.word	0x00080003
    3a20:	00100003 	.word	0x00100003
    3a24:	000c0003 	.word	0x000c0003
    3a28:	00160003 	.word	0x00160003

00003a2c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3a2c:	b530      	push	{r4, r5, lr}
    3a2e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3a30:	4b0b      	ldr	r3, [pc, #44]	; (3a60 <_sercom_get_sercom_inst_index+0x34>)
    3a32:	466a      	mov	r2, sp
    3a34:	cb32      	ldmia	r3!, {r1, r4, r5}
    3a36:	c232      	stmia	r2!, {r1, r4, r5}
    3a38:	cb32      	ldmia	r3!, {r1, r4, r5}
    3a3a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3a3c:	9b00      	ldr	r3, [sp, #0]
    3a3e:	4283      	cmp	r3, r0
    3a40:	d00b      	beq.n	3a5a <_sercom_get_sercom_inst_index+0x2e>
    3a42:	2301      	movs	r3, #1
    3a44:	009a      	lsls	r2, r3, #2
    3a46:	4669      	mov	r1, sp
    3a48:	5852      	ldr	r2, [r2, r1]
    3a4a:	4282      	cmp	r2, r0
    3a4c:	d006      	beq.n	3a5c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a4e:	3301      	adds	r3, #1
    3a50:	2b06      	cmp	r3, #6
    3a52:	d1f7      	bne.n	3a44 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3a54:	2000      	movs	r0, #0
}
    3a56:	b007      	add	sp, #28
    3a58:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a5a:	2300      	movs	r3, #0
			return i;
    3a5c:	b2d8      	uxtb	r0, r3
    3a5e:	e7fa      	b.n	3a56 <_sercom_get_sercom_inst_index+0x2a>
    3a60:	00008854 	.word	0x00008854

00003a64 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3a64:	4770      	bx	lr
	...

00003a68 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3a68:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3a6a:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <_sercom_set_handler+0x2c>)
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d10c      	bne.n	3a8c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3a72:	4f09      	ldr	r7, [pc, #36]	; (3a98 <_sercom_set_handler+0x30>)
    3a74:	4e09      	ldr	r6, [pc, #36]	; (3a9c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3a76:	4d0a      	ldr	r5, [pc, #40]	; (3aa0 <_sercom_set_handler+0x38>)
    3a78:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3a7a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3a7c:	195a      	adds	r2, r3, r5
    3a7e:	6014      	str	r4, [r2, #0]
    3a80:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a82:	2b18      	cmp	r3, #24
    3a84:	d1f9      	bne.n	3a7a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3a86:	2201      	movs	r2, #1
    3a88:	4b02      	ldr	r3, [pc, #8]	; (3a94 <_sercom_set_handler+0x2c>)
    3a8a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3a8c:	0080      	lsls	r0, r0, #2
    3a8e:	4b02      	ldr	r3, [pc, #8]	; (3a98 <_sercom_set_handler+0x30>)
    3a90:	50c1      	str	r1, [r0, r3]
}
    3a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a94:	200002be 	.word	0x200002be
    3a98:	200002c0 	.word	0x200002c0
    3a9c:	00003a65 	.word	0x00003a65
    3aa0:	20000a34 	.word	0x20000a34

00003aa4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3aa4:	b500      	push	{lr}
    3aa6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3aa8:	2309      	movs	r3, #9
    3aaa:	466a      	mov	r2, sp
    3aac:	7013      	strb	r3, [r2, #0]
    3aae:	3301      	adds	r3, #1
    3ab0:	7053      	strb	r3, [r2, #1]
    3ab2:	3301      	adds	r3, #1
    3ab4:	7093      	strb	r3, [r2, #2]
    3ab6:	3301      	adds	r3, #1
    3ab8:	70d3      	strb	r3, [r2, #3]
    3aba:	3301      	adds	r3, #1
    3abc:	7113      	strb	r3, [r2, #4]
    3abe:	3301      	adds	r3, #1
    3ac0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3ac2:	4b03      	ldr	r3, [pc, #12]	; (3ad0 <_sercom_get_interrupt_vector+0x2c>)
    3ac4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3ac6:	466b      	mov	r3, sp
    3ac8:	5618      	ldrsb	r0, [r3, r0]
}
    3aca:	b003      	add	sp, #12
    3acc:	bd00      	pop	{pc}
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	00003a2d 	.word	0x00003a2d

00003ad4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3ad4:	b510      	push	{r4, lr}
    3ad6:	4b02      	ldr	r3, [pc, #8]	; (3ae0 <SERCOM0_Handler+0xc>)
    3ad8:	681b      	ldr	r3, [r3, #0]
    3ada:	2000      	movs	r0, #0
    3adc:	4798      	blx	r3
    3ade:	bd10      	pop	{r4, pc}
    3ae0:	200002c0 	.word	0x200002c0

00003ae4 <SERCOM1_Handler>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	4b02      	ldr	r3, [pc, #8]	; (3af0 <SERCOM1_Handler+0xc>)
    3ae8:	685b      	ldr	r3, [r3, #4]
    3aea:	2001      	movs	r0, #1
    3aec:	4798      	blx	r3
    3aee:	bd10      	pop	{r4, pc}
    3af0:	200002c0 	.word	0x200002c0

00003af4 <SERCOM2_Handler>:
    3af4:	b510      	push	{r4, lr}
    3af6:	4b02      	ldr	r3, [pc, #8]	; (3b00 <SERCOM2_Handler+0xc>)
    3af8:	689b      	ldr	r3, [r3, #8]
    3afa:	2002      	movs	r0, #2
    3afc:	4798      	blx	r3
    3afe:	bd10      	pop	{r4, pc}
    3b00:	200002c0 	.word	0x200002c0

00003b04 <SERCOM3_Handler>:
    3b04:	b510      	push	{r4, lr}
    3b06:	4b02      	ldr	r3, [pc, #8]	; (3b10 <SERCOM3_Handler+0xc>)
    3b08:	68db      	ldr	r3, [r3, #12]
    3b0a:	2003      	movs	r0, #3
    3b0c:	4798      	blx	r3
    3b0e:	bd10      	pop	{r4, pc}
    3b10:	200002c0 	.word	0x200002c0

00003b14 <SERCOM4_Handler>:
    3b14:	b510      	push	{r4, lr}
    3b16:	4b02      	ldr	r3, [pc, #8]	; (3b20 <SERCOM4_Handler+0xc>)
    3b18:	691b      	ldr	r3, [r3, #16]
    3b1a:	2004      	movs	r0, #4
    3b1c:	4798      	blx	r3
    3b1e:	bd10      	pop	{r4, pc}
    3b20:	200002c0 	.word	0x200002c0

00003b24 <SERCOM5_Handler>:
    3b24:	b510      	push	{r4, lr}
    3b26:	4b02      	ldr	r3, [pc, #8]	; (3b30 <SERCOM5_Handler+0xc>)
    3b28:	695b      	ldr	r3, [r3, #20]
    3b2a:	2005      	movs	r0, #5
    3b2c:	4798      	blx	r3
    3b2e:	bd10      	pop	{r4, pc}
    3b30:	200002c0 	.word	0x200002c0

00003b34 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b36:	b08b      	sub	sp, #44	; 0x2c
    3b38:	0005      	movs	r5, r0
    3b3a:	000c      	movs	r4, r1
    3b3c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3b3e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3b40:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3b42:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3b44:	079b      	lsls	r3, r3, #30
    3b46:	d501      	bpl.n	3b4c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3b48:	b00b      	add	sp, #44	; 0x2c
    3b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3b4c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3b4e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3b50:	07db      	lsls	r3, r3, #31
    3b52:	d4f9      	bmi.n	3b48 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3b54:	0008      	movs	r0, r1
    3b56:	4b60      	ldr	r3, [pc, #384]	; (3cd8 <spi_init+0x1a4>)
    3b58:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3b5a:	4a60      	ldr	r2, [pc, #384]	; (3cdc <spi_init+0x1a8>)
    3b5c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3b5e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3b60:	2301      	movs	r3, #1
    3b62:	40bb      	lsls	r3, r7
    3b64:	430b      	orrs	r3, r1
    3b66:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3b68:	a909      	add	r1, sp, #36	; 0x24
    3b6a:	2724      	movs	r7, #36	; 0x24
    3b6c:	5df3      	ldrb	r3, [r6, r7]
    3b6e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b70:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3b72:	b2c3      	uxtb	r3, r0
    3b74:	9301      	str	r3, [sp, #4]
    3b76:	0018      	movs	r0, r3
    3b78:	4b59      	ldr	r3, [pc, #356]	; (3ce0 <spi_init+0x1ac>)
    3b7a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3b7c:	9801      	ldr	r0, [sp, #4]
    3b7e:	4b59      	ldr	r3, [pc, #356]	; (3ce4 <spi_init+0x1b0>)
    3b80:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3b82:	5df0      	ldrb	r0, [r6, r7]
    3b84:	2100      	movs	r1, #0
    3b86:	4b58      	ldr	r3, [pc, #352]	; (3ce8 <spi_init+0x1b4>)
    3b88:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3b8a:	7833      	ldrb	r3, [r6, #0]
    3b8c:	2b01      	cmp	r3, #1
    3b8e:	d038      	beq.n	3c02 <spi_init+0xce>
    3b90:	002b      	movs	r3, r5
    3b92:	330c      	adds	r3, #12
    3b94:	0029      	movs	r1, r5
    3b96:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3b98:	2200      	movs	r2, #0
    3b9a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3b9c:	428b      	cmp	r3, r1
    3b9e:	d1fc      	bne.n	3b9a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    3ba0:	2300      	movs	r3, #0
    3ba2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3ba4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3ba6:	2400      	movs	r4, #0
    3ba8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3baa:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3bac:	3336      	adds	r3, #54	; 0x36
    3bae:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3bb0:	3301      	adds	r3, #1
    3bb2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3bb4:	3301      	adds	r3, #1
    3bb6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3bb8:	3b35      	subs	r3, #53	; 0x35
    3bba:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3bbc:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3bbe:	6828      	ldr	r0, [r5, #0]
    3bc0:	4b45      	ldr	r3, [pc, #276]	; (3cd8 <spi_init+0x1a4>)
    3bc2:	4798      	blx	r3
    3bc4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3bc6:	4949      	ldr	r1, [pc, #292]	; (3cec <spi_init+0x1b8>)
    3bc8:	4b49      	ldr	r3, [pc, #292]	; (3cf0 <spi_init+0x1bc>)
    3bca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3bcc:	00bf      	lsls	r7, r7, #2
    3bce:	4b49      	ldr	r3, [pc, #292]	; (3cf4 <spi_init+0x1c0>)
    3bd0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3bd2:	682f      	ldr	r7, [r5, #0]
    3bd4:	ab04      	add	r3, sp, #16
    3bd6:	2280      	movs	r2, #128	; 0x80
    3bd8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3bda:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3bdc:	3a7f      	subs	r2, #127	; 0x7f
    3bde:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3be0:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3be2:	7833      	ldrb	r3, [r6, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d102      	bne.n	3bee <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3be8:	2200      	movs	r2, #0
    3bea:	ab04      	add	r3, sp, #16
    3bec:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3bee:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3bf0:	9305      	str	r3, [sp, #20]
    3bf2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3bf4:	9306      	str	r3, [sp, #24]
    3bf6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3bf8:	9307      	str	r3, [sp, #28]
    3bfa:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3bfc:	9308      	str	r3, [sp, #32]
    3bfe:	2400      	movs	r4, #0
    3c00:	e00b      	b.n	3c1a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3c02:	6823      	ldr	r3, [r4, #0]
    3c04:	220c      	movs	r2, #12
    3c06:	4313      	orrs	r3, r2
    3c08:	6023      	str	r3, [r4, #0]
    3c0a:	e7c1      	b.n	3b90 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3c0c:	0038      	movs	r0, r7
    3c0e:	4b3a      	ldr	r3, [pc, #232]	; (3cf8 <spi_init+0x1c4>)
    3c10:	4798      	blx	r3
    3c12:	e00a      	b.n	3c2a <spi_init+0xf6>
    3c14:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3c16:	2c04      	cmp	r4, #4
    3c18:	d010      	beq.n	3c3c <spi_init+0x108>
    3c1a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3c1c:	00a3      	lsls	r3, r4, #2
    3c1e:	aa02      	add	r2, sp, #8
    3c20:	200c      	movs	r0, #12
    3c22:	1812      	adds	r2, r2, r0
    3c24:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3c26:	2800      	cmp	r0, #0
    3c28:	d0f0      	beq.n	3c0c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    3c2a:	1c43      	adds	r3, r0, #1
    3c2c:	d0f2      	beq.n	3c14 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3c2e:	a904      	add	r1, sp, #16
    3c30:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3c32:	0c00      	lsrs	r0, r0, #16
    3c34:	b2c0      	uxtb	r0, r0
    3c36:	4b31      	ldr	r3, [pc, #196]	; (3cfc <spi_init+0x1c8>)
    3c38:	4798      	blx	r3
    3c3a:	e7eb      	b.n	3c14 <spi_init+0xe0>
	module->mode             = config->mode;
    3c3c:	7833      	ldrb	r3, [r6, #0]
    3c3e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3c40:	7c33      	ldrb	r3, [r6, #16]
    3c42:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3c44:	7cb3      	ldrb	r3, [r6, #18]
    3c46:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3c48:	7d33      	ldrb	r3, [r6, #20]
    3c4a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    3c4c:	2200      	movs	r2, #0
    3c4e:	ab02      	add	r3, sp, #8
    3c50:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3c52:	7833      	ldrb	r3, [r6, #0]
    3c54:	2b01      	cmp	r3, #1
    3c56:	d028      	beq.n	3caa <spi_init+0x176>
	ctrla |= config->transfer_mode;
    3c58:	6873      	ldr	r3, [r6, #4]
    3c5a:	68b2      	ldr	r2, [r6, #8]
    3c5c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    3c5e:	68f2      	ldr	r2, [r6, #12]
    3c60:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3c62:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3c64:	7c72      	ldrb	r2, [r6, #17]
    3c66:	2a00      	cmp	r2, #0
    3c68:	d103      	bne.n	3c72 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3c6a:	4a25      	ldr	r2, [pc, #148]	; (3d00 <spi_init+0x1cc>)
    3c6c:	7892      	ldrb	r2, [r2, #2]
    3c6e:	0792      	lsls	r2, r2, #30
    3c70:	d501      	bpl.n	3c76 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3c72:	2280      	movs	r2, #128	; 0x80
    3c74:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    3c76:	7cb2      	ldrb	r2, [r6, #18]
    3c78:	2a00      	cmp	r2, #0
    3c7a:	d002      	beq.n	3c82 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3c7c:	2280      	movs	r2, #128	; 0x80
    3c7e:	0292      	lsls	r2, r2, #10
    3c80:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    3c82:	7cf2      	ldrb	r2, [r6, #19]
    3c84:	2a00      	cmp	r2, #0
    3c86:	d002      	beq.n	3c8e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3c88:	2280      	movs	r2, #128	; 0x80
    3c8a:	0092      	lsls	r2, r2, #2
    3c8c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    3c8e:	7d32      	ldrb	r2, [r6, #20]
    3c90:	2a00      	cmp	r2, #0
    3c92:	d002      	beq.n	3c9a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3c94:	2280      	movs	r2, #128	; 0x80
    3c96:	0192      	lsls	r2, r2, #6
    3c98:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    3c9a:	683a      	ldr	r2, [r7, #0]
    3c9c:	4313      	orrs	r3, r2
    3c9e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	430b      	orrs	r3, r1
    3ca4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    3ca6:	2000      	movs	r0, #0
    3ca8:	e74e      	b.n	3b48 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3caa:	6828      	ldr	r0, [r5, #0]
    3cac:	4b0a      	ldr	r3, [pc, #40]	; (3cd8 <spi_init+0x1a4>)
    3cae:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3cb0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3cb2:	b2c0      	uxtb	r0, r0
    3cb4:	4b13      	ldr	r3, [pc, #76]	; (3d04 <spi_init+0x1d0>)
    3cb6:	4798      	blx	r3
    3cb8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    3cba:	ab02      	add	r3, sp, #8
    3cbc:	1d9a      	adds	r2, r3, #6
    3cbe:	69b0      	ldr	r0, [r6, #24]
    3cc0:	4b11      	ldr	r3, [pc, #68]	; (3d08 <spi_init+0x1d4>)
    3cc2:	4798      	blx	r3
    3cc4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    3cc6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    3cc8:	2b00      	cmp	r3, #0
    3cca:	d000      	beq.n	3cce <spi_init+0x19a>
    3ccc:	e73c      	b.n	3b48 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    3cce:	ab02      	add	r3, sp, #8
    3cd0:	3306      	adds	r3, #6
    3cd2:	781b      	ldrb	r3, [r3, #0]
    3cd4:	733b      	strb	r3, [r7, #12]
    3cd6:	e7bf      	b.n	3c58 <spi_init+0x124>
    3cd8:	00003a2d 	.word	0x00003a2d
    3cdc:	40000400 	.word	0x40000400
    3ce0:	00004b89 	.word	0x00004b89
    3ce4:	00004afd 	.word	0x00004afd
    3ce8:	00003869 	.word	0x00003869
    3cec:	00003e01 	.word	0x00003e01
    3cf0:	00003a69 	.word	0x00003a69
    3cf4:	20000a34 	.word	0x20000a34
    3cf8:	000038b5 	.word	0x000038b5
    3cfc:	00004c81 	.word	0x00004c81
    3d00:	41002000 	.word	0x41002000
    3d04:	00004ba5 	.word	0x00004ba5
    3d08:	000037ab 	.word	0x000037ab

00003d0c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    3d0c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    3d0e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    3d10:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    3d12:	2c01      	cmp	r4, #1
    3d14:	d001      	beq.n	3d1a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    3d16:	0018      	movs	r0, r3
    3d18:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    3d1a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    3d1c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    3d1e:	2c00      	cmp	r4, #0
    3d20:	d1f9      	bne.n	3d16 <spi_select_slave+0xa>
		if (select) {
    3d22:	2a00      	cmp	r2, #0
    3d24:	d058      	beq.n	3dd8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    3d26:	784b      	ldrb	r3, [r1, #1]
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d044      	beq.n	3db6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d2c:	6803      	ldr	r3, [r0, #0]
    3d2e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    3d30:	07db      	lsls	r3, r3, #31
    3d32:	d410      	bmi.n	3d56 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    3d34:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3d36:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3d38:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3d3a:	2900      	cmp	r1, #0
    3d3c:	d104      	bne.n	3d48 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    3d3e:	0953      	lsrs	r3, r2, #5
    3d40:	01db      	lsls	r3, r3, #7
    3d42:	492e      	ldr	r1, [pc, #184]	; (3dfc <spi_select_slave+0xf0>)
    3d44:	468c      	mov	ip, r1
    3d46:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d48:	211f      	movs	r1, #31
    3d4a:	4011      	ands	r1, r2
    3d4c:	2201      	movs	r2, #1
    3d4e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3d50:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    3d52:	2305      	movs	r3, #5
    3d54:	e7df      	b.n	3d16 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3d56:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3d58:	09d4      	lsrs	r4, r2, #7
		return NULL;
    3d5a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3d5c:	2c00      	cmp	r4, #0
    3d5e:	d104      	bne.n	3d6a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    3d60:	0953      	lsrs	r3, r2, #5
    3d62:	01db      	lsls	r3, r3, #7
    3d64:	4c25      	ldr	r4, [pc, #148]	; (3dfc <spi_select_slave+0xf0>)
    3d66:	46a4      	mov	ip, r4
    3d68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d6a:	241f      	movs	r4, #31
    3d6c:	4014      	ands	r4, r2
    3d6e:	2201      	movs	r2, #1
    3d70:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    3d72:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d74:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3d76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    3d78:	07d2      	lsls	r2, r2, #31
    3d7a:	d501      	bpl.n	3d80 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3d7c:	788a      	ldrb	r2, [r1, #2]
    3d7e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    3d80:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    3d82:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    3d84:	2a00      	cmp	r2, #0
    3d86:	d1c6      	bne.n	3d16 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    3d88:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    3d8a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3d8c:	7e13      	ldrb	r3, [r2, #24]
    3d8e:	420b      	tst	r3, r1
    3d90:	d0fc      	beq.n	3d8c <spi_select_slave+0x80>
    3d92:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    3d94:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    3d96:	0749      	lsls	r1, r1, #29
    3d98:	d5bd      	bpl.n	3d16 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d9a:	8b53      	ldrh	r3, [r2, #26]
    3d9c:	075b      	lsls	r3, r3, #29
    3d9e:	d501      	bpl.n	3da4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3da0:	2304      	movs	r3, #4
    3da2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3da4:	7983      	ldrb	r3, [r0, #6]
    3da6:	2b01      	cmp	r3, #1
    3da8:	d002      	beq.n	3db0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3daa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3dac:	2300      	movs	r3, #0
    3dae:	e7b2      	b.n	3d16 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3db0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3db2:	2300      	movs	r3, #0
    3db4:	e7af      	b.n	3d16 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    3db6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3db8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3dba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3dbc:	2900      	cmp	r1, #0
    3dbe:	d104      	bne.n	3dca <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    3dc0:	0953      	lsrs	r3, r2, #5
    3dc2:	01db      	lsls	r3, r3, #7
    3dc4:	490d      	ldr	r1, [pc, #52]	; (3dfc <spi_select_slave+0xf0>)
    3dc6:	468c      	mov	ip, r1
    3dc8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3dca:	211f      	movs	r1, #31
    3dcc:	4011      	ands	r1, r2
    3dce:	2201      	movs	r2, #1
    3dd0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    3dd2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    3dd4:	2300      	movs	r3, #0
    3dd6:	e79e      	b.n	3d16 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    3dd8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    3dda:	09d1      	lsrs	r1, r2, #7
		return NULL;
    3ddc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3dde:	2900      	cmp	r1, #0
    3de0:	d104      	bne.n	3dec <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    3de2:	0953      	lsrs	r3, r2, #5
    3de4:	01db      	lsls	r3, r3, #7
    3de6:	4905      	ldr	r1, [pc, #20]	; (3dfc <spi_select_slave+0xf0>)
    3de8:	468c      	mov	ip, r1
    3dea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3dec:	211f      	movs	r1, #31
    3dee:	4011      	ands	r1, r2
    3df0:	2201      	movs	r2, #1
    3df2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    3df4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    3df6:	2300      	movs	r3, #0
    3df8:	e78d      	b.n	3d16 <spi_select_slave+0xa>
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	41004400 	.word	0x41004400

00003e00 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3e02:	0080      	lsls	r0, r0, #2
    3e04:	4b70      	ldr	r3, [pc, #448]	; (3fc8 <_spi_interrupt_handler+0x1c8>)
    3e06:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e08:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    3e0a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    3e0c:	5ce7      	ldrb	r7, [r4, r3]
    3e0e:	2236      	movs	r2, #54	; 0x36
    3e10:	5ca2      	ldrb	r2, [r4, r2]
    3e12:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3e14:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    3e16:	7db5      	ldrb	r5, [r6, #22]
    3e18:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    3e1a:	07eb      	lsls	r3, r5, #31
    3e1c:	d502      	bpl.n	3e24 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e1e:	7963      	ldrb	r3, [r4, #5]
    3e20:	2b01      	cmp	r3, #1
    3e22:	d01e      	beq.n	3e62 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3e24:	076b      	lsls	r3, r5, #29
    3e26:	d511      	bpl.n	3e4c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3e28:	8b73      	ldrh	r3, [r6, #26]
    3e2a:	075b      	lsls	r3, r3, #29
    3e2c:	d55a      	bpl.n	3ee4 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    3e2e:	7a63      	ldrb	r3, [r4, #9]
    3e30:	2b01      	cmp	r3, #1
    3e32:	d008      	beq.n	3e46 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    3e34:	221e      	movs	r2, #30
    3e36:	2338      	movs	r3, #56	; 0x38
    3e38:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    3e3a:	3b35      	subs	r3, #53	; 0x35
    3e3c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    3e3e:	3302      	adds	r3, #2
    3e40:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    3e42:	073b      	lsls	r3, r7, #28
    3e44:	d44a      	bmi.n	3edc <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    3e46:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3e48:	2304      	movs	r3, #4
    3e4a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    3e4c:	07ab      	lsls	r3, r5, #30
    3e4e:	d503      	bpl.n	3e58 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3e50:	7963      	ldrb	r3, [r4, #5]
    3e52:	2b01      	cmp	r3, #1
    3e54:	d100      	bne.n	3e58 <_spi_interrupt_handler+0x58>
    3e56:	e097      	b.n	3f88 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    3e58:	b26d      	sxtb	r5, r5
    3e5a:	2d00      	cmp	r5, #0
    3e5c:	da00      	bge.n	3e60 <_spi_interrupt_handler+0x60>
    3e5e:	e0a9      	b.n	3fb4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    3e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    3e62:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3e64:	2b00      	cmp	r3, #0
    3e66:	d022      	beq.n	3eae <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    3e68:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d0da      	beq.n	3e24 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3e6e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3e72:	7813      	ldrb	r3, [r2, #0]
    3e74:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    3e76:	1c50      	adds	r0, r2, #1
    3e78:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3e7a:	79a0      	ldrb	r0, [r4, #6]
    3e7c:	2801      	cmp	r0, #1
    3e7e:	d027      	beq.n	3ed0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    3e80:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    3e82:	05db      	lsls	r3, r3, #23
    3e84:	0ddb      	lsrs	r3, r3, #23
    3e86:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    3e88:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3e8a:	3b01      	subs	r3, #1
    3e8c:	b29b      	uxth	r3, r3
    3e8e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    3e90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3e92:	b29b      	uxth	r3, r3
    3e94:	2b00      	cmp	r3, #0
    3e96:	d1c5      	bne.n	3e24 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3e98:	3301      	adds	r3, #1
    3e9a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    3e9c:	7a63      	ldrb	r3, [r4, #9]
    3e9e:	2b01      	cmp	r3, #1
    3ea0:	d1c0      	bne.n	3e24 <_spi_interrupt_handler+0x24>
    3ea2:	79e3      	ldrb	r3, [r4, #7]
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d1bd      	bne.n	3e24 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3ea8:	3302      	adds	r3, #2
    3eaa:	75b3      	strb	r3, [r6, #22]
    3eac:	e7ba      	b.n	3e24 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    3eae:	4b47      	ldr	r3, [pc, #284]	; (3fcc <_spi_interrupt_handler+0x1cc>)
    3eb0:	881b      	ldrh	r3, [r3, #0]
    3eb2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3eb4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3eb6:	3b01      	subs	r3, #1
    3eb8:	b29b      	uxth	r3, r3
    3eba:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3ebc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3ebe:	b29b      	uxth	r3, r3
    3ec0:	2b00      	cmp	r3, #0
    3ec2:	d101      	bne.n	3ec8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3ec4:	3301      	adds	r3, #1
    3ec6:	7533      	strb	r3, [r6, #20]
		if (0
    3ec8:	7963      	ldrb	r3, [r4, #5]
    3eca:	2b01      	cmp	r3, #1
    3ecc:	d0cc      	beq.n	3e68 <_spi_interrupt_handler+0x68>
    3ece:	e7a9      	b.n	3e24 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3ed0:	7850      	ldrb	r0, [r2, #1]
    3ed2:	0200      	lsls	r0, r0, #8
    3ed4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    3ed6:	3202      	adds	r2, #2
    3ed8:	62e2      	str	r2, [r4, #44]	; 0x2c
    3eda:	e7d2      	b.n	3e82 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3edc:	0020      	movs	r0, r4
    3ede:	69a3      	ldr	r3, [r4, #24]
    3ee0:	4798      	blx	r3
    3ee2:	e7b0      	b.n	3e46 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3ee4:	7a63      	ldrb	r3, [r4, #9]
    3ee6:	2b01      	cmp	r3, #1
    3ee8:	d028      	beq.n	3f3c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3eea:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eee:	05db      	lsls	r3, r3, #23
    3ef0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3ef2:	b2da      	uxtb	r2, r3
    3ef4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3ef6:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    3ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3efa:	1c51      	adds	r1, r2, #1
    3efc:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3efe:	79a1      	ldrb	r1, [r4, #6]
    3f00:	2901      	cmp	r1, #1
    3f02:	d034      	beq.n	3f6e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    3f04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3f06:	3b01      	subs	r3, #1
    3f08:	b29b      	uxth	r3, r3
    3f0a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3f0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3f0e:	b29b      	uxth	r3, r3
    3f10:	2b00      	cmp	r3, #0
    3f12:	d000      	beq.n	3f16 <_spi_interrupt_handler+0x116>
    3f14:	e79a      	b.n	3e4c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    3f16:	2200      	movs	r2, #0
    3f18:	3338      	adds	r3, #56	; 0x38
    3f1a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3f1c:	3b34      	subs	r3, #52	; 0x34
    3f1e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3f20:	7a63      	ldrb	r3, [r4, #9]
    3f22:	2b02      	cmp	r3, #2
    3f24:	d029      	beq.n	3f7a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    3f26:	7a63      	ldrb	r3, [r4, #9]
    3f28:	2b00      	cmp	r3, #0
    3f2a:	d000      	beq.n	3f2e <_spi_interrupt_handler+0x12e>
    3f2c:	e78e      	b.n	3e4c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    3f2e:	07bb      	lsls	r3, r7, #30
    3f30:	d400      	bmi.n	3f34 <_spi_interrupt_handler+0x134>
    3f32:	e78b      	b.n	3e4c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    3f34:	0020      	movs	r0, r4
    3f36:	6923      	ldr	r3, [r4, #16]
    3f38:	4798      	blx	r3
    3f3a:	e787      	b.n	3e4c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    3f3c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    3f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3f40:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3f42:	3b01      	subs	r3, #1
    3f44:	b29b      	uxth	r3, r3
    3f46:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    3f48:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d000      	beq.n	3f52 <_spi_interrupt_handler+0x152>
    3f50:	e77c      	b.n	3e4c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3f52:	3304      	adds	r3, #4
    3f54:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    3f56:	2200      	movs	r2, #0
    3f58:	3334      	adds	r3, #52	; 0x34
    3f5a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    3f5c:	3b35      	subs	r3, #53	; 0x35
    3f5e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    3f60:	07fb      	lsls	r3, r7, #31
    3f62:	d400      	bmi.n	3f66 <_spi_interrupt_handler+0x166>
    3f64:	e772      	b.n	3e4c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    3f66:	0020      	movs	r0, r4
    3f68:	68e3      	ldr	r3, [r4, #12]
    3f6a:	4798      	blx	r3
    3f6c:	e76e      	b.n	3e4c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    3f6e:	0a1b      	lsrs	r3, r3, #8
    3f70:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    3f72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f74:	3301      	adds	r3, #1
    3f76:	62a3      	str	r3, [r4, #40]	; 0x28
    3f78:	e7c4      	b.n	3f04 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    3f7a:	077b      	lsls	r3, r7, #29
    3f7c:	d400      	bmi.n	3f80 <_spi_interrupt_handler+0x180>
    3f7e:	e765      	b.n	3e4c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    3f80:	0020      	movs	r0, r4
    3f82:	6963      	ldr	r3, [r4, #20]
    3f84:	4798      	blx	r3
    3f86:	e761      	b.n	3e4c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3f88:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    3f8a:	2b01      	cmp	r3, #1
    3f8c:	d000      	beq.n	3f90 <_spi_interrupt_handler+0x190>
    3f8e:	e763      	b.n	3e58 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3f90:	79e3      	ldrb	r3, [r4, #7]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d000      	beq.n	3f98 <_spi_interrupt_handler+0x198>
    3f96:	e75f      	b.n	3e58 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    3f98:	3302      	adds	r3, #2
    3f9a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3f9c:	3301      	adds	r3, #1
    3f9e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3fa0:	2200      	movs	r2, #0
    3fa2:	3335      	adds	r3, #53	; 0x35
    3fa4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    3fa6:	07fb      	lsls	r3, r7, #31
    3fa8:	d400      	bmi.n	3fac <_spi_interrupt_handler+0x1ac>
    3faa:	e755      	b.n	3e58 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3fac:	0020      	movs	r0, r4
    3fae:	68e3      	ldr	r3, [r4, #12]
    3fb0:	4798      	blx	r3
    3fb2:	e751      	b.n	3e58 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3fb4:	2380      	movs	r3, #128	; 0x80
    3fb6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3fb8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    3fba:	067b      	lsls	r3, r7, #25
    3fbc:	d400      	bmi.n	3fc0 <_spi_interrupt_handler+0x1c0>
    3fbe:	e74f      	b.n	3e60 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3fc2:	0020      	movs	r0, r4
    3fc4:	4798      	blx	r3
}
    3fc6:	e74b      	b.n	3e60 <_spi_interrupt_handler+0x60>
    3fc8:	20000a34 	.word	0x20000a34
    3fcc:	20000a4c 	.word	0x20000a4c

00003fd0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd2:	46de      	mov	lr, fp
    3fd4:	4657      	mov	r7, sl
    3fd6:	464e      	mov	r6, r9
    3fd8:	4645      	mov	r5, r8
    3fda:	b5e0      	push	{r5, r6, r7, lr}
    3fdc:	b091      	sub	sp, #68	; 0x44
    3fde:	0005      	movs	r5, r0
    3fe0:	000c      	movs	r4, r1
    3fe2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3fe4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3fe6:	0008      	movs	r0, r1
    3fe8:	4bbc      	ldr	r3, [pc, #752]	; (42dc <usart_init+0x30c>)
    3fea:	4798      	blx	r3
    3fec:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3fee:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3ff0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3ff2:	07db      	lsls	r3, r3, #31
    3ff4:	d506      	bpl.n	4004 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    3ff6:	b011      	add	sp, #68	; 0x44
    3ff8:	bc3c      	pop	{r2, r3, r4, r5}
    3ffa:	4690      	mov	r8, r2
    3ffc:	4699      	mov	r9, r3
    3ffe:	46a2      	mov	sl, r4
    4000:	46ab      	mov	fp, r5
    4002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4004:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4006:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4008:	079b      	lsls	r3, r3, #30
    400a:	d4f4      	bmi.n	3ff6 <usart_init+0x26>
    400c:	49b4      	ldr	r1, [pc, #720]	; (42e0 <usart_init+0x310>)
    400e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4010:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4012:	2301      	movs	r3, #1
    4014:	40bb      	lsls	r3, r7
    4016:	4303      	orrs	r3, r0
    4018:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    401a:	a90f      	add	r1, sp, #60	; 0x3c
    401c:	272d      	movs	r7, #45	; 0x2d
    401e:	5df3      	ldrb	r3, [r6, r7]
    4020:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4022:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4024:	b2d3      	uxtb	r3, r2
    4026:	9302      	str	r3, [sp, #8]
    4028:	0018      	movs	r0, r3
    402a:	4bae      	ldr	r3, [pc, #696]	; (42e4 <usart_init+0x314>)
    402c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    402e:	9802      	ldr	r0, [sp, #8]
    4030:	4bad      	ldr	r3, [pc, #692]	; (42e8 <usart_init+0x318>)
    4032:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4034:	5df0      	ldrb	r0, [r6, r7]
    4036:	2100      	movs	r1, #0
    4038:	4bac      	ldr	r3, [pc, #688]	; (42ec <usart_init+0x31c>)
    403a:	4798      	blx	r3
	module->character_size = config->character_size;
    403c:	7af3      	ldrb	r3, [r6, #11]
    403e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4040:	2324      	movs	r3, #36	; 0x24
    4042:	5cf3      	ldrb	r3, [r6, r3]
    4044:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4046:	2325      	movs	r3, #37	; 0x25
    4048:	5cf3      	ldrb	r3, [r6, r3]
    404a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    404c:	7ef3      	ldrb	r3, [r6, #27]
    404e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4050:	7f33      	ldrb	r3, [r6, #28]
    4052:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4054:	682b      	ldr	r3, [r5, #0]
    4056:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4058:	0018      	movs	r0, r3
    405a:	4ba0      	ldr	r3, [pc, #640]	; (42dc <usart_init+0x30c>)
    405c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    405e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4060:	2200      	movs	r2, #0
    4062:	230e      	movs	r3, #14
    4064:	a906      	add	r1, sp, #24
    4066:	468c      	mov	ip, r1
    4068:	4463      	add	r3, ip
    406a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    406c:	8a32      	ldrh	r2, [r6, #16]
    406e:	9202      	str	r2, [sp, #8]
    4070:	2380      	movs	r3, #128	; 0x80
    4072:	01db      	lsls	r3, r3, #7
    4074:	429a      	cmp	r2, r3
    4076:	d100      	bne.n	407a <usart_init+0xaa>
    4078:	e09e      	b.n	41b8 <usart_init+0x1e8>
    407a:	d90f      	bls.n	409c <usart_init+0xcc>
    407c:	23c0      	movs	r3, #192	; 0xc0
    407e:	01db      	lsls	r3, r3, #7
    4080:	9a02      	ldr	r2, [sp, #8]
    4082:	429a      	cmp	r2, r3
    4084:	d100      	bne.n	4088 <usart_init+0xb8>
    4086:	e092      	b.n	41ae <usart_init+0x1de>
    4088:	2380      	movs	r3, #128	; 0x80
    408a:	021b      	lsls	r3, r3, #8
    408c:	429a      	cmp	r2, r3
    408e:	d000      	beq.n	4092 <usart_init+0xc2>
    4090:	e11f      	b.n	42d2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4092:	2303      	movs	r3, #3
    4094:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4096:	2300      	movs	r3, #0
    4098:	9307      	str	r3, [sp, #28]
    409a:	e008      	b.n	40ae <usart_init+0xde>
	switch (config->sample_rate) {
    409c:	2380      	movs	r3, #128	; 0x80
    409e:	019b      	lsls	r3, r3, #6
    40a0:	429a      	cmp	r2, r3
    40a2:	d000      	beq.n	40a6 <usart_init+0xd6>
    40a4:	e115      	b.n	42d2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    40a6:	2310      	movs	r3, #16
    40a8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    40aa:	3b0f      	subs	r3, #15
    40ac:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    40ae:	6833      	ldr	r3, [r6, #0]
    40b0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    40b2:	68f3      	ldr	r3, [r6, #12]
    40b4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    40b6:	6973      	ldr	r3, [r6, #20]
    40b8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    40ba:	7e33      	ldrb	r3, [r6, #24]
    40bc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    40be:	2326      	movs	r3, #38	; 0x26
    40c0:	5cf3      	ldrb	r3, [r6, r3]
    40c2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    40c4:	6873      	ldr	r3, [r6, #4]
    40c6:	4699      	mov	r9, r3
	switch (transfer_mode)
    40c8:	2b00      	cmp	r3, #0
    40ca:	d100      	bne.n	40ce <usart_init+0xfe>
    40cc:	e0a0      	b.n	4210 <usart_init+0x240>
    40ce:	2380      	movs	r3, #128	; 0x80
    40d0:	055b      	lsls	r3, r3, #21
    40d2:	4599      	cmp	r9, r3
    40d4:	d100      	bne.n	40d8 <usart_init+0x108>
    40d6:	e084      	b.n	41e2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    40d8:	7e73      	ldrb	r3, [r6, #25]
    40da:	2b00      	cmp	r3, #0
    40dc:	d002      	beq.n	40e4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    40de:	7eb3      	ldrb	r3, [r6, #26]
    40e0:	4642      	mov	r2, r8
    40e2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    40e4:	682a      	ldr	r2, [r5, #0]
    40e6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    40e8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    40ea:	2b00      	cmp	r3, #0
    40ec:	d1fc      	bne.n	40e8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    40ee:	330e      	adds	r3, #14
    40f0:	aa06      	add	r2, sp, #24
    40f2:	4694      	mov	ip, r2
    40f4:	4463      	add	r3, ip
    40f6:	881b      	ldrh	r3, [r3, #0]
    40f8:	4642      	mov	r2, r8
    40fa:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    40fc:	9b05      	ldr	r3, [sp, #20]
    40fe:	9a03      	ldr	r2, [sp, #12]
    4100:	4313      	orrs	r3, r2
    4102:	9a04      	ldr	r2, [sp, #16]
    4104:	4313      	orrs	r3, r2
    4106:	464a      	mov	r2, r9
    4108:	4313      	orrs	r3, r2
    410a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    410c:	465b      	mov	r3, fp
    410e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4110:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4112:	4653      	mov	r3, sl
    4114:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4116:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4118:	2327      	movs	r3, #39	; 0x27
    411a:	5cf3      	ldrb	r3, [r6, r3]
    411c:	2b00      	cmp	r3, #0
    411e:	d101      	bne.n	4124 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4120:	3304      	adds	r3, #4
    4122:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4124:	7e73      	ldrb	r3, [r6, #25]
    4126:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4128:	7f32      	ldrb	r2, [r6, #28]
    412a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    412c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    412e:	7f72      	ldrb	r2, [r6, #29]
    4130:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4132:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4134:	2224      	movs	r2, #36	; 0x24
    4136:	5cb2      	ldrb	r2, [r6, r2]
    4138:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    413a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    413c:	2225      	movs	r2, #37	; 0x25
    413e:	5cb2      	ldrb	r2, [r6, r2]
    4140:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4142:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4144:	7ab1      	ldrb	r1, [r6, #10]
    4146:	7af2      	ldrb	r2, [r6, #11]
    4148:	4311      	orrs	r1, r2
    414a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    414c:	8933      	ldrh	r3, [r6, #8]
    414e:	2bff      	cmp	r3, #255	; 0xff
    4150:	d100      	bne.n	4154 <usart_init+0x184>
    4152:	e081      	b.n	4258 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4154:	2280      	movs	r2, #128	; 0x80
    4156:	0452      	lsls	r2, r2, #17
    4158:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    415a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    415c:	232c      	movs	r3, #44	; 0x2c
    415e:	5cf3      	ldrb	r3, [r6, r3]
    4160:	2b00      	cmp	r3, #0
    4162:	d103      	bne.n	416c <usart_init+0x19c>
    4164:	4b62      	ldr	r3, [pc, #392]	; (42f0 <usart_init+0x320>)
    4166:	789b      	ldrb	r3, [r3, #2]
    4168:	079b      	lsls	r3, r3, #30
    416a:	d501      	bpl.n	4170 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    416c:	2380      	movs	r3, #128	; 0x80
    416e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4170:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4172:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4174:	2b00      	cmp	r3, #0
    4176:	d1fc      	bne.n	4172 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4178:	4643      	mov	r3, r8
    417a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    417c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    417e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4180:	2b00      	cmp	r3, #0
    4182:	d1fc      	bne.n	417e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4184:	4643      	mov	r3, r8
    4186:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4188:	ab0e      	add	r3, sp, #56	; 0x38
    418a:	2280      	movs	r2, #128	; 0x80
    418c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    418e:	2200      	movs	r2, #0
    4190:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4192:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4194:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4196:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4198:	930a      	str	r3, [sp, #40]	; 0x28
    419a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    419c:	930b      	str	r3, [sp, #44]	; 0x2c
    419e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    41a0:	930c      	str	r3, [sp, #48]	; 0x30
    41a2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    41a4:	9302      	str	r3, [sp, #8]
    41a6:	930d      	str	r3, [sp, #52]	; 0x34
    41a8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    41aa:	ae0a      	add	r6, sp, #40	; 0x28
    41ac:	e063      	b.n	4276 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    41ae:	2308      	movs	r3, #8
    41b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    41b2:	3b07      	subs	r3, #7
    41b4:	9307      	str	r3, [sp, #28]
    41b6:	e77a      	b.n	40ae <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    41b8:	6833      	ldr	r3, [r6, #0]
    41ba:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    41bc:	68f3      	ldr	r3, [r6, #12]
    41be:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    41c0:	6973      	ldr	r3, [r6, #20]
    41c2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    41c4:	7e33      	ldrb	r3, [r6, #24]
    41c6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    41c8:	2326      	movs	r3, #38	; 0x26
    41ca:	5cf3      	ldrb	r3, [r6, r3]
    41cc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    41ce:	6873      	ldr	r3, [r6, #4]
    41d0:	4699      	mov	r9, r3
	switch (transfer_mode)
    41d2:	2b00      	cmp	r3, #0
    41d4:	d018      	beq.n	4208 <usart_init+0x238>
    41d6:	2380      	movs	r3, #128	; 0x80
    41d8:	055b      	lsls	r3, r3, #21
    41da:	4599      	cmp	r9, r3
    41dc:	d001      	beq.n	41e2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    41de:	2000      	movs	r0, #0
    41e0:	e025      	b.n	422e <usart_init+0x25e>
			if (!config->use_external_clock) {
    41e2:	2327      	movs	r3, #39	; 0x27
    41e4:	5cf3      	ldrb	r3, [r6, r3]
    41e6:	2b00      	cmp	r3, #0
    41e8:	d000      	beq.n	41ec <usart_init+0x21c>
    41ea:	e775      	b.n	40d8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    41ec:	6a33      	ldr	r3, [r6, #32]
    41ee:	001f      	movs	r7, r3
    41f0:	b2c0      	uxtb	r0, r0
    41f2:	4b40      	ldr	r3, [pc, #256]	; (42f4 <usart_init+0x324>)
    41f4:	4798      	blx	r3
    41f6:	0001      	movs	r1, r0
    41f8:	220e      	movs	r2, #14
    41fa:	ab06      	add	r3, sp, #24
    41fc:	469c      	mov	ip, r3
    41fe:	4462      	add	r2, ip
    4200:	0038      	movs	r0, r7
    4202:	4b3d      	ldr	r3, [pc, #244]	; (42f8 <usart_init+0x328>)
    4204:	4798      	blx	r3
    4206:	e012      	b.n	422e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4208:	2308      	movs	r3, #8
    420a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    420c:	2300      	movs	r3, #0
    420e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4210:	2327      	movs	r3, #39	; 0x27
    4212:	5cf3      	ldrb	r3, [r6, r3]
    4214:	2b00      	cmp	r3, #0
    4216:	d00e      	beq.n	4236 <usart_init+0x266>
				status_code =
    4218:	9b06      	ldr	r3, [sp, #24]
    421a:	9300      	str	r3, [sp, #0]
    421c:	9b07      	ldr	r3, [sp, #28]
    421e:	220e      	movs	r2, #14
    4220:	a906      	add	r1, sp, #24
    4222:	468c      	mov	ip, r1
    4224:	4462      	add	r2, ip
    4226:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4228:	6a30      	ldr	r0, [r6, #32]
    422a:	4f34      	ldr	r7, [pc, #208]	; (42fc <usart_init+0x32c>)
    422c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    422e:	2800      	cmp	r0, #0
    4230:	d000      	beq.n	4234 <usart_init+0x264>
    4232:	e6e0      	b.n	3ff6 <usart_init+0x26>
    4234:	e750      	b.n	40d8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4236:	6a33      	ldr	r3, [r6, #32]
    4238:	001f      	movs	r7, r3
    423a:	b2c0      	uxtb	r0, r0
    423c:	4b2d      	ldr	r3, [pc, #180]	; (42f4 <usart_init+0x324>)
    423e:	4798      	blx	r3
    4240:	0001      	movs	r1, r0
				status_code =
    4242:	9b06      	ldr	r3, [sp, #24]
    4244:	9300      	str	r3, [sp, #0]
    4246:	9b07      	ldr	r3, [sp, #28]
    4248:	220e      	movs	r2, #14
    424a:	a806      	add	r0, sp, #24
    424c:	4684      	mov	ip, r0
    424e:	4462      	add	r2, ip
    4250:	0038      	movs	r0, r7
    4252:	4f2a      	ldr	r7, [pc, #168]	; (42fc <usart_init+0x32c>)
    4254:	47b8      	blx	r7
    4256:	e7ea      	b.n	422e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4258:	7ef3      	ldrb	r3, [r6, #27]
    425a:	2b00      	cmp	r3, #0
    425c:	d100      	bne.n	4260 <usart_init+0x290>
    425e:	e77d      	b.n	415c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4260:	2380      	movs	r3, #128	; 0x80
    4262:	04db      	lsls	r3, r3, #19
    4264:	431f      	orrs	r7, r3
    4266:	e779      	b.n	415c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4268:	0020      	movs	r0, r4
    426a:	4b25      	ldr	r3, [pc, #148]	; (4300 <usart_init+0x330>)
    426c:	4798      	blx	r3
    426e:	e007      	b.n	4280 <usart_init+0x2b0>
    4270:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4272:	2f04      	cmp	r7, #4
    4274:	d00d      	beq.n	4292 <usart_init+0x2c2>
    4276:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4278:	00bb      	lsls	r3, r7, #2
    427a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    427c:	2800      	cmp	r0, #0
    427e:	d0f3      	beq.n	4268 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4280:	1c43      	adds	r3, r0, #1
    4282:	d0f5      	beq.n	4270 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4284:	a90e      	add	r1, sp, #56	; 0x38
    4286:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4288:	0c00      	lsrs	r0, r0, #16
    428a:	b2c0      	uxtb	r0, r0
    428c:	4b1d      	ldr	r3, [pc, #116]	; (4304 <usart_init+0x334>)
    428e:	4798      	blx	r3
    4290:	e7ee      	b.n	4270 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4292:	2300      	movs	r3, #0
    4294:	60eb      	str	r3, [r5, #12]
    4296:	612b      	str	r3, [r5, #16]
    4298:	616b      	str	r3, [r5, #20]
    429a:	61ab      	str	r3, [r5, #24]
    429c:	61eb      	str	r3, [r5, #28]
    429e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    42a0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    42a2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    42a4:	2200      	movs	r2, #0
    42a6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    42a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    42aa:	3330      	adds	r3, #48	; 0x30
    42ac:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    42ae:	3301      	adds	r3, #1
    42b0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    42b2:	3301      	adds	r3, #1
    42b4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    42b6:	3301      	adds	r3, #1
    42b8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    42ba:	6828      	ldr	r0, [r5, #0]
    42bc:	4b07      	ldr	r3, [pc, #28]	; (42dc <usart_init+0x30c>)
    42be:	4798      	blx	r3
    42c0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    42c2:	4911      	ldr	r1, [pc, #68]	; (4308 <usart_init+0x338>)
    42c4:	4b11      	ldr	r3, [pc, #68]	; (430c <usart_init+0x33c>)
    42c6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    42c8:	00a4      	lsls	r4, r4, #2
    42ca:	4b11      	ldr	r3, [pc, #68]	; (4310 <usart_init+0x340>)
    42cc:	50e5      	str	r5, [r4, r3]
	return status_code;
    42ce:	2000      	movs	r0, #0
    42d0:	e691      	b.n	3ff6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    42d2:	2310      	movs	r3, #16
    42d4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    42d6:	2300      	movs	r3, #0
    42d8:	9307      	str	r3, [sp, #28]
    42da:	e6e8      	b.n	40ae <usart_init+0xde>
    42dc:	00003a2d 	.word	0x00003a2d
    42e0:	40000400 	.word	0x40000400
    42e4:	00004b89 	.word	0x00004b89
    42e8:	00004afd 	.word	0x00004afd
    42ec:	00003869 	.word	0x00003869
    42f0:	41002000 	.word	0x41002000
    42f4:	00004ba5 	.word	0x00004ba5
    42f8:	000037ab 	.word	0x000037ab
    42fc:	000037d5 	.word	0x000037d5
    4300:	000038b5 	.word	0x000038b5
    4304:	00004c81 	.word	0x00004c81
    4308:	000043b1 	.word	0x000043b1
    430c:	00003a69 	.word	0x00003a69
    4310:	20000a34 	.word	0x20000a34

00004314 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4314:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4316:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4318:	2a00      	cmp	r2, #0
    431a:	d101      	bne.n	4320 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    431c:	0018      	movs	r0, r3
    431e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4320:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4322:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4324:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4326:	2a00      	cmp	r2, #0
    4328:	d1f8      	bne.n	431c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    432a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    432c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    432e:	2a00      	cmp	r2, #0
    4330:	d1fc      	bne.n	432c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4332:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4334:	2102      	movs	r1, #2
    4336:	7e1a      	ldrb	r2, [r3, #24]
    4338:	420a      	tst	r2, r1
    433a:	d0fc      	beq.n	4336 <usart_write_wait+0x22>
	return STATUS_OK;
    433c:	2300      	movs	r3, #0
    433e:	e7ed      	b.n	431c <usart_write_wait+0x8>

00004340 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4340:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4342:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4344:	2a00      	cmp	r2, #0
    4346:	d101      	bne.n	434c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4348:	0018      	movs	r0, r3
    434a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    434c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    434e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4350:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4352:	2a00      	cmp	r2, #0
    4354:	d1f8      	bne.n	4348 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4356:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4358:	7e10      	ldrb	r0, [r2, #24]
    435a:	0740      	lsls	r0, r0, #29
    435c:	d5f4      	bpl.n	4348 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    435e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4360:	2b00      	cmp	r3, #0
    4362:	d1fc      	bne.n	435e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4364:	8b53      	ldrh	r3, [r2, #26]
    4366:	b2db      	uxtb	r3, r3
	if (error_code) {
    4368:	0698      	lsls	r0, r3, #26
    436a:	d01d      	beq.n	43a8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    436c:	0798      	lsls	r0, r3, #30
    436e:	d503      	bpl.n	4378 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4370:	2302      	movs	r3, #2
    4372:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4374:	3318      	adds	r3, #24
    4376:	e7e7      	b.n	4348 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4378:	0758      	lsls	r0, r3, #29
    437a:	d503      	bpl.n	4384 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    437c:	2304      	movs	r3, #4
    437e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4380:	331a      	adds	r3, #26
    4382:	e7e1      	b.n	4348 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4384:	07d8      	lsls	r0, r3, #31
    4386:	d503      	bpl.n	4390 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4388:	2301      	movs	r3, #1
    438a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    438c:	3312      	adds	r3, #18
    438e:	e7db      	b.n	4348 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4390:	06d8      	lsls	r0, r3, #27
    4392:	d503      	bpl.n	439c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4394:	2310      	movs	r3, #16
    4396:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4398:	3332      	adds	r3, #50	; 0x32
    439a:	e7d5      	b.n	4348 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    439c:	069b      	lsls	r3, r3, #26
    439e:	d503      	bpl.n	43a8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    43a0:	2320      	movs	r3, #32
    43a2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    43a4:	3321      	adds	r3, #33	; 0x21
    43a6:	e7cf      	b.n	4348 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    43a8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    43aa:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    43ac:	2300      	movs	r3, #0
    43ae:	e7cb      	b.n	4348 <usart_read_wait+0x8>

000043b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    43b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    43b2:	0080      	lsls	r0, r0, #2
    43b4:	4b62      	ldr	r3, [pc, #392]	; (4540 <_usart_interrupt_handler+0x190>)
    43b6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    43b8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    43ba:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    43bc:	2b00      	cmp	r3, #0
    43be:	d1fc      	bne.n	43ba <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    43c0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    43c2:	7da6      	ldrb	r6, [r4, #22]
    43c4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    43c6:	2330      	movs	r3, #48	; 0x30
    43c8:	5ceb      	ldrb	r3, [r5, r3]
    43ca:	2231      	movs	r2, #49	; 0x31
    43cc:	5caf      	ldrb	r7, [r5, r2]
    43ce:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    43d0:	07f3      	lsls	r3, r6, #31
    43d2:	d522      	bpl.n	441a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    43d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    43d6:	b29b      	uxth	r3, r3
    43d8:	2b00      	cmp	r3, #0
    43da:	d01c      	beq.n	4416 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    43dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    43de:	7813      	ldrb	r3, [r2, #0]
    43e0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    43e2:	1c51      	adds	r1, r2, #1
    43e4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    43e6:	7969      	ldrb	r1, [r5, #5]
    43e8:	2901      	cmp	r1, #1
    43ea:	d00e      	beq.n	440a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    43ec:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    43ee:	05db      	lsls	r3, r3, #23
    43f0:	0ddb      	lsrs	r3, r3, #23
    43f2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    43f4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    43f6:	3b01      	subs	r3, #1
    43f8:	b29b      	uxth	r3, r3
    43fa:	85eb      	strh	r3, [r5, #46]	; 0x2e
    43fc:	2b00      	cmp	r3, #0
    43fe:	d10c      	bne.n	441a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4400:	3301      	adds	r3, #1
    4402:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4404:	3301      	adds	r3, #1
    4406:	75a3      	strb	r3, [r4, #22]
    4408:	e007      	b.n	441a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    440a:	7851      	ldrb	r1, [r2, #1]
    440c:	0209      	lsls	r1, r1, #8
    440e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4410:	3202      	adds	r2, #2
    4412:	62aa      	str	r2, [r5, #40]	; 0x28
    4414:	e7eb      	b.n	43ee <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4416:	2301      	movs	r3, #1
    4418:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    441a:	07b3      	lsls	r3, r6, #30
    441c:	d506      	bpl.n	442c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    441e:	2302      	movs	r3, #2
    4420:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4422:	2200      	movs	r2, #0
    4424:	3331      	adds	r3, #49	; 0x31
    4426:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4428:	07fb      	lsls	r3, r7, #31
    442a:	d41a      	bmi.n	4462 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    442c:	0773      	lsls	r3, r6, #29
    442e:	d565      	bpl.n	44fc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4430:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4432:	b29b      	uxth	r3, r3
    4434:	2b00      	cmp	r3, #0
    4436:	d05f      	beq.n	44f8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4438:	8b63      	ldrh	r3, [r4, #26]
    443a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    443c:	071a      	lsls	r2, r3, #28
    443e:	d414      	bmi.n	446a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4440:	223f      	movs	r2, #63	; 0x3f
    4442:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4444:	2b00      	cmp	r3, #0
    4446:	d034      	beq.n	44b2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4448:	079a      	lsls	r2, r3, #30
    444a:	d511      	bpl.n	4470 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    444c:	221a      	movs	r2, #26
    444e:	2332      	movs	r3, #50	; 0x32
    4450:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4452:	3b30      	subs	r3, #48	; 0x30
    4454:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4456:	077b      	lsls	r3, r7, #29
    4458:	d550      	bpl.n	44fc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    445a:	0028      	movs	r0, r5
    445c:	696b      	ldr	r3, [r5, #20]
    445e:	4798      	blx	r3
    4460:	e04c      	b.n	44fc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4462:	0028      	movs	r0, r5
    4464:	68eb      	ldr	r3, [r5, #12]
    4466:	4798      	blx	r3
    4468:	e7e0      	b.n	442c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    446a:	2237      	movs	r2, #55	; 0x37
    446c:	4013      	ands	r3, r2
    446e:	e7e9      	b.n	4444 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4470:	075a      	lsls	r2, r3, #29
    4472:	d505      	bpl.n	4480 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    4474:	221e      	movs	r2, #30
    4476:	2332      	movs	r3, #50	; 0x32
    4478:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    447a:	3b2e      	subs	r3, #46	; 0x2e
    447c:	8363      	strh	r3, [r4, #26]
    447e:	e7ea      	b.n	4456 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4480:	07da      	lsls	r2, r3, #31
    4482:	d505      	bpl.n	4490 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    4484:	2213      	movs	r2, #19
    4486:	2332      	movs	r3, #50	; 0x32
    4488:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    448a:	3b31      	subs	r3, #49	; 0x31
    448c:	8363      	strh	r3, [r4, #26]
    448e:	e7e2      	b.n	4456 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4490:	06da      	lsls	r2, r3, #27
    4492:	d505      	bpl.n	44a0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    4494:	2242      	movs	r2, #66	; 0x42
    4496:	2332      	movs	r3, #50	; 0x32
    4498:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    449a:	3b22      	subs	r3, #34	; 0x22
    449c:	8363      	strh	r3, [r4, #26]
    449e:	e7da      	b.n	4456 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    44a0:	2220      	movs	r2, #32
    44a2:	421a      	tst	r2, r3
    44a4:	d0d7      	beq.n	4456 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    44a6:	3221      	adds	r2, #33	; 0x21
    44a8:	2332      	movs	r3, #50	; 0x32
    44aa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    44ac:	3b12      	subs	r3, #18
    44ae:	8363      	strh	r3, [r4, #26]
    44b0:	e7d1      	b.n	4456 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    44b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    44b4:	05db      	lsls	r3, r3, #23
    44b6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    44b8:	b2da      	uxtb	r2, r3
    44ba:	6a69      	ldr	r1, [r5, #36]	; 0x24
    44bc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    44be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    44c0:	1c51      	adds	r1, r2, #1
    44c2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    44c4:	7969      	ldrb	r1, [r5, #5]
    44c6:	2901      	cmp	r1, #1
    44c8:	d010      	beq.n	44ec <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    44ca:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    44cc:	3b01      	subs	r3, #1
    44ce:	b29b      	uxth	r3, r3
    44d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    44d2:	2b00      	cmp	r3, #0
    44d4:	d112      	bne.n	44fc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    44d6:	3304      	adds	r3, #4
    44d8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    44da:	2200      	movs	r2, #0
    44dc:	332e      	adds	r3, #46	; 0x2e
    44de:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    44e0:	07bb      	lsls	r3, r7, #30
    44e2:	d50b      	bpl.n	44fc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    44e4:	0028      	movs	r0, r5
    44e6:	692b      	ldr	r3, [r5, #16]
    44e8:	4798      	blx	r3
    44ea:	e007      	b.n	44fc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    44ec:	0a1b      	lsrs	r3, r3, #8
    44ee:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    44f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    44f2:	3301      	adds	r3, #1
    44f4:	626b      	str	r3, [r5, #36]	; 0x24
    44f6:	e7e8      	b.n	44ca <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    44f8:	2304      	movs	r3, #4
    44fa:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    44fc:	06f3      	lsls	r3, r6, #27
    44fe:	d504      	bpl.n	450a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4500:	2310      	movs	r3, #16
    4502:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4504:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4506:	06fb      	lsls	r3, r7, #27
    4508:	d40e      	bmi.n	4528 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    450a:	06b3      	lsls	r3, r6, #26
    450c:	d504      	bpl.n	4518 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    450e:	2320      	movs	r3, #32
    4510:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4512:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4514:	073b      	lsls	r3, r7, #28
    4516:	d40b      	bmi.n	4530 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4518:	0733      	lsls	r3, r6, #28
    451a:	d504      	bpl.n	4526 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    451c:	2308      	movs	r3, #8
    451e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4520:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4522:	06bb      	lsls	r3, r7, #26
    4524:	d408      	bmi.n	4538 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4528:	0028      	movs	r0, r5
    452a:	69eb      	ldr	r3, [r5, #28]
    452c:	4798      	blx	r3
    452e:	e7ec      	b.n	450a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4530:	0028      	movs	r0, r5
    4532:	69ab      	ldr	r3, [r5, #24]
    4534:	4798      	blx	r3
    4536:	e7ef      	b.n	4518 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4538:	6a2b      	ldr	r3, [r5, #32]
    453a:	0028      	movs	r0, r5
    453c:	4798      	blx	r3
}
    453e:	e7f2      	b.n	4526 <_usart_interrupt_handler+0x176>
    4540:	20000a34 	.word	0x20000a34

00004544 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4544:	b510      	push	{r4, lr}
	switch (clock_source) {
    4546:	2808      	cmp	r0, #8
    4548:	d803      	bhi.n	4552 <system_clock_source_get_hz+0xe>
    454a:	0080      	lsls	r0, r0, #2
    454c:	4b1b      	ldr	r3, [pc, #108]	; (45bc <system_clock_source_get_hz+0x78>)
    454e:	581b      	ldr	r3, [r3, r0]
    4550:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4552:	2000      	movs	r0, #0
    4554:	e030      	b.n	45b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    4556:	4b1a      	ldr	r3, [pc, #104]	; (45c0 <system_clock_source_get_hz+0x7c>)
    4558:	6918      	ldr	r0, [r3, #16]
    455a:	e02d      	b.n	45b8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    455c:	4b19      	ldr	r3, [pc, #100]	; (45c4 <system_clock_source_get_hz+0x80>)
    455e:	6a1b      	ldr	r3, [r3, #32]
    4560:	059b      	lsls	r3, r3, #22
    4562:	0f9b      	lsrs	r3, r3, #30
    4564:	4818      	ldr	r0, [pc, #96]	; (45c8 <system_clock_source_get_hz+0x84>)
    4566:	40d8      	lsrs	r0, r3
    4568:	e026      	b.n	45b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    456a:	4b15      	ldr	r3, [pc, #84]	; (45c0 <system_clock_source_get_hz+0x7c>)
    456c:	6958      	ldr	r0, [r3, #20]
    456e:	e023      	b.n	45b8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4570:	4b13      	ldr	r3, [pc, #76]	; (45c0 <system_clock_source_get_hz+0x7c>)
    4572:	681b      	ldr	r3, [r3, #0]
			return 0;
    4574:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4576:	079b      	lsls	r3, r3, #30
    4578:	d51e      	bpl.n	45b8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    457a:	4912      	ldr	r1, [pc, #72]	; (45c4 <system_clock_source_get_hz+0x80>)
    457c:	2210      	movs	r2, #16
    457e:	68cb      	ldr	r3, [r1, #12]
    4580:	421a      	tst	r2, r3
    4582:	d0fc      	beq.n	457e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4584:	4b0e      	ldr	r3, [pc, #56]	; (45c0 <system_clock_source_get_hz+0x7c>)
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	075b      	lsls	r3, r3, #29
    458a:	d401      	bmi.n	4590 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    458c:	480f      	ldr	r0, [pc, #60]	; (45cc <system_clock_source_get_hz+0x88>)
    458e:	e013      	b.n	45b8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4590:	2000      	movs	r0, #0
    4592:	4b0f      	ldr	r3, [pc, #60]	; (45d0 <system_clock_source_get_hz+0x8c>)
    4594:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4596:	4b0a      	ldr	r3, [pc, #40]	; (45c0 <system_clock_source_get_hz+0x7c>)
    4598:	689b      	ldr	r3, [r3, #8]
    459a:	041b      	lsls	r3, r3, #16
    459c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    459e:	4358      	muls	r0, r3
    45a0:	e00a      	b.n	45b8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    45a2:	2350      	movs	r3, #80	; 0x50
    45a4:	4a07      	ldr	r2, [pc, #28]	; (45c4 <system_clock_source_get_hz+0x80>)
    45a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    45a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    45aa:	075b      	lsls	r3, r3, #29
    45ac:	d504      	bpl.n	45b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    45ae:	4b04      	ldr	r3, [pc, #16]	; (45c0 <system_clock_source_get_hz+0x7c>)
    45b0:	68d8      	ldr	r0, [r3, #12]
    45b2:	e001      	b.n	45b8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    45b4:	2080      	movs	r0, #128	; 0x80
    45b6:	0200      	lsls	r0, r0, #8
	}
}
    45b8:	bd10      	pop	{r4, pc}
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	0000886c 	.word	0x0000886c
    45c0:	200002d8 	.word	0x200002d8
    45c4:	40000800 	.word	0x40000800
    45c8:	007a1200 	.word	0x007a1200
    45cc:	02dc6c00 	.word	0x02dc6c00
    45d0:	00004ba5 	.word	0x00004ba5

000045d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    45d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    45d6:	490c      	ldr	r1, [pc, #48]	; (4608 <system_clock_source_osc8m_set_config+0x34>)
    45d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    45da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    45dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    45de:	7840      	ldrb	r0, [r0, #1]
    45e0:	2201      	movs	r2, #1
    45e2:	4010      	ands	r0, r2
    45e4:	0180      	lsls	r0, r0, #6
    45e6:	2640      	movs	r6, #64	; 0x40
    45e8:	43b3      	bics	r3, r6
    45ea:	4303      	orrs	r3, r0
    45ec:	402a      	ands	r2, r5
    45ee:	01d2      	lsls	r2, r2, #7
    45f0:	2080      	movs	r0, #128	; 0x80
    45f2:	4383      	bics	r3, r0
    45f4:	4313      	orrs	r3, r2
    45f6:	2203      	movs	r2, #3
    45f8:	4022      	ands	r2, r4
    45fa:	0212      	lsls	r2, r2, #8
    45fc:	4803      	ldr	r0, [pc, #12]	; (460c <system_clock_source_osc8m_set_config+0x38>)
    45fe:	4003      	ands	r3, r0
    4600:	4313      	orrs	r3, r2
    4602:	620b      	str	r3, [r1, #32]
}
    4604:	bd70      	pop	{r4, r5, r6, pc}
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	40000800 	.word	0x40000800
    460c:	fffffcff 	.word	0xfffffcff

00004610 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4610:	b5f0      	push	{r4, r5, r6, r7, lr}
    4612:	46de      	mov	lr, fp
    4614:	4657      	mov	r7, sl
    4616:	464e      	mov	r6, r9
    4618:	4645      	mov	r5, r8
    461a:	b5e0      	push	{r5, r6, r7, lr}
    461c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    461e:	4b26      	ldr	r3, [pc, #152]	; (46b8 <system_clock_source_xosc32k_set_config+0xa8>)
    4620:	469b      	mov	fp, r3
    4622:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    4624:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4626:	7800      	ldrb	r0, [r0, #0]
    4628:	4242      	negs	r2, r0
    462a:	4142      	adcs	r2, r0
    462c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    462e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    4630:	78ca      	ldrb	r2, [r1, #3]
    4632:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    4634:	790a      	ldrb	r2, [r1, #4]
    4636:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4638:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    463a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    463c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    463e:	688a      	ldr	r2, [r1, #8]
    4640:	491e      	ldr	r1, [pc, #120]	; (46bc <system_clock_source_xosc32k_set_config+0xac>)
    4642:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    4644:	2101      	movs	r1, #1
    4646:	464a      	mov	r2, r9
    4648:	0092      	lsls	r2, r2, #2
    464a:	4691      	mov	r9, r2
    464c:	2204      	movs	r2, #4
    464e:	4393      	bics	r3, r2
    4650:	464a      	mov	r2, r9
    4652:	4313      	orrs	r3, r2
    4654:	4642      	mov	r2, r8
    4656:	400a      	ands	r2, r1
    4658:	00d2      	lsls	r2, r2, #3
    465a:	4690      	mov	r8, r2
    465c:	2208      	movs	r2, #8
    465e:	4393      	bics	r3, r2
    4660:	4642      	mov	r2, r8
    4662:	4313      	orrs	r3, r2
    4664:	4662      	mov	r2, ip
    4666:	400a      	ands	r2, r1
    4668:	0112      	lsls	r2, r2, #4
    466a:	4694      	mov	ip, r2
    466c:	2210      	movs	r2, #16
    466e:	4393      	bics	r3, r2
    4670:	4662      	mov	r2, ip
    4672:	4313      	orrs	r3, r2
    4674:	4008      	ands	r0, r1
    4676:	0140      	lsls	r0, r0, #5
    4678:	2220      	movs	r2, #32
    467a:	4393      	bics	r3, r2
    467c:	4303      	orrs	r3, r0
    467e:	400f      	ands	r7, r1
    4680:	01bf      	lsls	r7, r7, #6
    4682:	2040      	movs	r0, #64	; 0x40
    4684:	4383      	bics	r3, r0
    4686:	433b      	orrs	r3, r7
    4688:	400e      	ands	r6, r1
    468a:	01f6      	lsls	r6, r6, #7
    468c:	3040      	adds	r0, #64	; 0x40
    468e:	4383      	bics	r3, r0
    4690:	4333      	orrs	r3, r6
    4692:	3879      	subs	r0, #121	; 0x79
    4694:	4005      	ands	r5, r0
    4696:	022d      	lsls	r5, r5, #8
    4698:	4809      	ldr	r0, [pc, #36]	; (46c0 <system_clock_source_xosc32k_set_config+0xb0>)
    469a:	4003      	ands	r3, r0
    469c:	432b      	orrs	r3, r5
    469e:	4021      	ands	r1, r4
    46a0:	0309      	lsls	r1, r1, #12
    46a2:	4808      	ldr	r0, [pc, #32]	; (46c4 <system_clock_source_xosc32k_set_config+0xb4>)
    46a4:	4003      	ands	r3, r0
    46a6:	430b      	orrs	r3, r1
    46a8:	465a      	mov	r2, fp
    46aa:	8293      	strh	r3, [r2, #20]
}
    46ac:	bc3c      	pop	{r2, r3, r4, r5}
    46ae:	4690      	mov	r8, r2
    46b0:	4699      	mov	r9, r3
    46b2:	46a2      	mov	sl, r4
    46b4:	46ab      	mov	fp, r5
    46b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46b8:	40000800 	.word	0x40000800
    46bc:	200002d8 	.word	0x200002d8
    46c0:	fffff8ff 	.word	0xfffff8ff
    46c4:	ffffefff 	.word	0xffffefff

000046c8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    46c8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    46ca:	7a03      	ldrb	r3, [r0, #8]
    46cc:	069b      	lsls	r3, r3, #26
    46ce:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    46d0:	8942      	ldrh	r2, [r0, #10]
    46d2:	0592      	lsls	r2, r2, #22
    46d4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    46d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    46d8:	4918      	ldr	r1, [pc, #96]	; (473c <system_clock_source_dfll_set_config+0x74>)
    46da:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    46dc:	7983      	ldrb	r3, [r0, #6]
    46de:	79c2      	ldrb	r2, [r0, #7]
    46e0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    46e2:	8842      	ldrh	r2, [r0, #2]
    46e4:	8884      	ldrh	r4, [r0, #4]
    46e6:	4322      	orrs	r2, r4
    46e8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    46ea:	7842      	ldrb	r2, [r0, #1]
    46ec:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    46ee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    46f0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    46f2:	7803      	ldrb	r3, [r0, #0]
    46f4:	2b04      	cmp	r3, #4
    46f6:	d011      	beq.n	471c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    46f8:	2b20      	cmp	r3, #32
    46fa:	d10e      	bne.n	471a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    46fc:	7b03      	ldrb	r3, [r0, #12]
    46fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4700:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4702:	4313      	orrs	r3, r2
    4704:	89c2      	ldrh	r2, [r0, #14]
    4706:	0412      	lsls	r2, r2, #16
    4708:	490d      	ldr	r1, [pc, #52]	; (4740 <system_clock_source_dfll_set_config+0x78>)
    470a:	400a      	ands	r2, r1
    470c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    470e:	4a0b      	ldr	r2, [pc, #44]	; (473c <system_clock_source_dfll_set_config+0x74>)
    4710:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4712:	6811      	ldr	r1, [r2, #0]
    4714:	4b0b      	ldr	r3, [pc, #44]	; (4744 <system_clock_source_dfll_set_config+0x7c>)
    4716:	430b      	orrs	r3, r1
    4718:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    471a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    471c:	7b03      	ldrb	r3, [r0, #12]
    471e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4720:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4722:	4313      	orrs	r3, r2
    4724:	89c2      	ldrh	r2, [r0, #14]
    4726:	0412      	lsls	r2, r2, #16
    4728:	4905      	ldr	r1, [pc, #20]	; (4740 <system_clock_source_dfll_set_config+0x78>)
    472a:	400a      	ands	r2, r1
    472c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    472e:	4a03      	ldr	r2, [pc, #12]	; (473c <system_clock_source_dfll_set_config+0x74>)
    4730:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4732:	6813      	ldr	r3, [r2, #0]
    4734:	2104      	movs	r1, #4
    4736:	430b      	orrs	r3, r1
    4738:	6013      	str	r3, [r2, #0]
    473a:	e7ee      	b.n	471a <system_clock_source_dfll_set_config+0x52>
    473c:	200002d8 	.word	0x200002d8
    4740:	03ff0000 	.word	0x03ff0000
    4744:	00000424 	.word	0x00000424

00004748 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4748:	2808      	cmp	r0, #8
    474a:	d803      	bhi.n	4754 <system_clock_source_enable+0xc>
    474c:	0080      	lsls	r0, r0, #2
    474e:	4b25      	ldr	r3, [pc, #148]	; (47e4 <system_clock_source_enable+0x9c>)
    4750:	581b      	ldr	r3, [r3, r0]
    4752:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4754:	2017      	movs	r0, #23
    4756:	e044      	b.n	47e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4758:	4a23      	ldr	r2, [pc, #140]	; (47e8 <system_clock_source_enable+0xa0>)
    475a:	6a13      	ldr	r3, [r2, #32]
    475c:	2102      	movs	r1, #2
    475e:	430b      	orrs	r3, r1
    4760:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4762:	2000      	movs	r0, #0
    4764:	e03d      	b.n	47e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4766:	4a20      	ldr	r2, [pc, #128]	; (47e8 <system_clock_source_enable+0xa0>)
    4768:	6993      	ldr	r3, [r2, #24]
    476a:	2102      	movs	r1, #2
    476c:	430b      	orrs	r3, r1
    476e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4770:	2000      	movs	r0, #0
		break;
    4772:	e036      	b.n	47e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4774:	4a1c      	ldr	r2, [pc, #112]	; (47e8 <system_clock_source_enable+0xa0>)
    4776:	8a13      	ldrh	r3, [r2, #16]
    4778:	2102      	movs	r1, #2
    477a:	430b      	orrs	r3, r1
    477c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    477e:	2000      	movs	r0, #0
		break;
    4780:	e02f      	b.n	47e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4782:	4a19      	ldr	r2, [pc, #100]	; (47e8 <system_clock_source_enable+0xa0>)
    4784:	8a93      	ldrh	r3, [r2, #20]
    4786:	2102      	movs	r1, #2
    4788:	430b      	orrs	r3, r1
    478a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    478c:	2000      	movs	r0, #0
		break;
    478e:	e028      	b.n	47e2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4790:	4916      	ldr	r1, [pc, #88]	; (47ec <system_clock_source_enable+0xa4>)
    4792:	680b      	ldr	r3, [r1, #0]
    4794:	2202      	movs	r2, #2
    4796:	4313      	orrs	r3, r2
    4798:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    479a:	4b13      	ldr	r3, [pc, #76]	; (47e8 <system_clock_source_enable+0xa0>)
    479c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    479e:	0019      	movs	r1, r3
    47a0:	320e      	adds	r2, #14
    47a2:	68cb      	ldr	r3, [r1, #12]
    47a4:	421a      	tst	r2, r3
    47a6:	d0fc      	beq.n	47a2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    47a8:	4a10      	ldr	r2, [pc, #64]	; (47ec <system_clock_source_enable+0xa4>)
    47aa:	6891      	ldr	r1, [r2, #8]
    47ac:	4b0e      	ldr	r3, [pc, #56]	; (47e8 <system_clock_source_enable+0xa0>)
    47ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    47b0:	6852      	ldr	r2, [r2, #4]
    47b2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    47b4:	2200      	movs	r2, #0
    47b6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    47b8:	0019      	movs	r1, r3
    47ba:	3210      	adds	r2, #16
    47bc:	68cb      	ldr	r3, [r1, #12]
    47be:	421a      	tst	r2, r3
    47c0:	d0fc      	beq.n	47bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    47c2:	4b0a      	ldr	r3, [pc, #40]	; (47ec <system_clock_source_enable+0xa4>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	b29b      	uxth	r3, r3
    47c8:	4a07      	ldr	r2, [pc, #28]	; (47e8 <system_clock_source_enable+0xa0>)
    47ca:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    47cc:	2000      	movs	r0, #0
    47ce:	e008      	b.n	47e2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    47d0:	4905      	ldr	r1, [pc, #20]	; (47e8 <system_clock_source_enable+0xa0>)
    47d2:	2244      	movs	r2, #68	; 0x44
    47d4:	5c8b      	ldrb	r3, [r1, r2]
    47d6:	2002      	movs	r0, #2
    47d8:	4303      	orrs	r3, r0
    47da:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    47dc:	2000      	movs	r0, #0
		break;
    47de:	e000      	b.n	47e2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    47e0:	2000      	movs	r0, #0
}
    47e2:	4770      	bx	lr
    47e4:	00008890 	.word	0x00008890
    47e8:	40000800 	.word	0x40000800
    47ec:	200002d8 	.word	0x200002d8

000047f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    47f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47f2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    47f4:	22c2      	movs	r2, #194	; 0xc2
    47f6:	00d2      	lsls	r2, r2, #3
    47f8:	4b47      	ldr	r3, [pc, #284]	; (4918 <system_clock_init+0x128>)
    47fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    47fc:	4a47      	ldr	r2, [pc, #284]	; (491c <system_clock_init+0x12c>)
    47fe:	6853      	ldr	r3, [r2, #4]
    4800:	211e      	movs	r1, #30
    4802:	438b      	bics	r3, r1
    4804:	391a      	subs	r1, #26
    4806:	430b      	orrs	r3, r1
    4808:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    480a:	2202      	movs	r2, #2
    480c:	ab01      	add	r3, sp, #4
    480e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4810:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4812:	4d43      	ldr	r5, [pc, #268]	; (4920 <system_clock_init+0x130>)
    4814:	b2e0      	uxtb	r0, r4
    4816:	a901      	add	r1, sp, #4
    4818:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    481a:	3401      	adds	r4, #1
    481c:	2c25      	cmp	r4, #37	; 0x25
    481e:	d1f9      	bne.n	4814 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4820:	a80a      	add	r0, sp, #40	; 0x28
    4822:	2300      	movs	r3, #0
    4824:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    4826:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4828:	2280      	movs	r2, #128	; 0x80
    482a:	0212      	lsls	r2, r2, #8
    482c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    482e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4830:	2201      	movs	r2, #1
    4832:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4834:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    4836:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4838:	3202      	adds	r2, #2
    483a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    483c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    483e:	4b39      	ldr	r3, [pc, #228]	; (4924 <system_clock_init+0x134>)
    4840:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4842:	2005      	movs	r0, #5
    4844:	4b38      	ldr	r3, [pc, #224]	; (4928 <system_clock_init+0x138>)
    4846:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4848:	4933      	ldr	r1, [pc, #204]	; (4918 <system_clock_init+0x128>)
    484a:	2202      	movs	r2, #2
    484c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    484e:	421a      	tst	r2, r3
    4850:	d0fc      	beq.n	484c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4852:	4a31      	ldr	r2, [pc, #196]	; (4918 <system_clock_init+0x128>)
    4854:	8a93      	ldrh	r3, [r2, #20]
    4856:	2180      	movs	r1, #128	; 0x80
    4858:	430b      	orrs	r3, r1
    485a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    485c:	ab05      	add	r3, sp, #20
    485e:	2100      	movs	r1, #0
    4860:	2200      	movs	r2, #0
    4862:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4864:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4866:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4868:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    486a:	313f      	adds	r1, #63	; 0x3f
    486c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    486e:	393b      	subs	r1, #59	; 0x3b
    4870:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4872:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4874:	4b2d      	ldr	r3, [pc, #180]	; (492c <system_clock_init+0x13c>)
    4876:	681b      	ldr	r3, [r3, #0]
    4878:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    487a:	2b3f      	cmp	r3, #63	; 0x3f
    487c:	d04a      	beq.n	4914 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    487e:	a805      	add	r0, sp, #20
    4880:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4882:	4b2b      	ldr	r3, [pc, #172]	; (4930 <system_clock_init+0x140>)
    4884:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4886:	2307      	movs	r3, #7
    4888:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    488a:	3338      	adds	r3, #56	; 0x38
    488c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    488e:	4b29      	ldr	r3, [pc, #164]	; (4934 <system_clock_init+0x144>)
    4890:	4798      	blx	r3
	config->run_in_standby  = false;
    4892:	a804      	add	r0, sp, #16
    4894:	2500      	movs	r5, #0
    4896:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    4898:	2601      	movs	r6, #1
    489a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    489c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    489e:	4b26      	ldr	r3, [pc, #152]	; (4938 <system_clock_init+0x148>)
    48a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    48a2:	2006      	movs	r0, #6
    48a4:	4f20      	ldr	r7, [pc, #128]	; (4928 <system_clock_init+0x138>)
    48a6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    48a8:	4b24      	ldr	r3, [pc, #144]	; (493c <system_clock_init+0x14c>)
    48aa:	4798      	blx	r3
	config->division_factor    = 1;
    48ac:	ac01      	add	r4, sp, #4
    48ae:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    48b0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    48b2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    48b4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    48b6:	2305      	movs	r3, #5
    48b8:	7023      	strb	r3, [r4, #0]
    48ba:	0021      	movs	r1, r4
    48bc:	2001      	movs	r0, #1
    48be:	4b20      	ldr	r3, [pc, #128]	; (4940 <system_clock_init+0x150>)
    48c0:	4798      	blx	r3
    48c2:	2001      	movs	r0, #1
    48c4:	4b1f      	ldr	r3, [pc, #124]	; (4944 <system_clock_init+0x154>)
    48c6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    48c8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    48ca:	0021      	movs	r1, r4
    48cc:	2000      	movs	r0, #0
    48ce:	4b14      	ldr	r3, [pc, #80]	; (4920 <system_clock_init+0x130>)
    48d0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    48d2:	2000      	movs	r0, #0
    48d4:	4b1c      	ldr	r3, [pc, #112]	; (4948 <system_clock_init+0x158>)
    48d6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    48d8:	2007      	movs	r0, #7
    48da:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    48dc:	490e      	ldr	r1, [pc, #56]	; (4918 <system_clock_init+0x128>)
    48de:	22d0      	movs	r2, #208	; 0xd0
    48e0:	68cb      	ldr	r3, [r1, #12]
    48e2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    48e4:	2bd0      	cmp	r3, #208	; 0xd0
    48e6:	d1fb      	bne.n	48e0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    48e8:	4a18      	ldr	r2, [pc, #96]	; (494c <system_clock_init+0x15c>)
    48ea:	2300      	movs	r3, #0
    48ec:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    48ee:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    48f0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    48f2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    48f4:	a901      	add	r1, sp, #4
    48f6:	2201      	movs	r2, #1
    48f8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    48fa:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    48fc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    48fe:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4900:	3307      	adds	r3, #7
    4902:	700b      	strb	r3, [r1, #0]
    4904:	2000      	movs	r0, #0
    4906:	4b0e      	ldr	r3, [pc, #56]	; (4940 <system_clock_init+0x150>)
    4908:	4798      	blx	r3
    490a:	2000      	movs	r0, #0
    490c:	4b0d      	ldr	r3, [pc, #52]	; (4944 <system_clock_init+0x154>)
    490e:	4798      	blx	r3
#endif
}
    4910:	b00f      	add	sp, #60	; 0x3c
    4912:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4914:	3b20      	subs	r3, #32
    4916:	e7b2      	b.n	487e <system_clock_init+0x8e>
    4918:	40000800 	.word	0x40000800
    491c:	41004000 	.word	0x41004000
    4920:	00004b89 	.word	0x00004b89
    4924:	00004611 	.word	0x00004611
    4928:	00004749 	.word	0x00004749
    492c:	00806024 	.word	0x00806024
    4930:	000005b9 	.word	0x000005b9
    4934:	000046c9 	.word	0x000046c9
    4938:	000045d5 	.word	0x000045d5
    493c:	00004951 	.word	0x00004951
    4940:	00004975 	.word	0x00004975
    4944:	00004a2d 	.word	0x00004a2d
    4948:	00004afd 	.word	0x00004afd
    494c:	40000400 	.word	0x40000400

00004950 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4950:	4a06      	ldr	r2, [pc, #24]	; (496c <system_gclk_init+0x1c>)
    4952:	6993      	ldr	r3, [r2, #24]
    4954:	2108      	movs	r1, #8
    4956:	430b      	orrs	r3, r1
    4958:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    495a:	2201      	movs	r2, #1
    495c:	4b04      	ldr	r3, [pc, #16]	; (4970 <system_gclk_init+0x20>)
    495e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4960:	0019      	movs	r1, r3
    4962:	780b      	ldrb	r3, [r1, #0]
    4964:	4213      	tst	r3, r2
    4966:	d1fc      	bne.n	4962 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4968:	4770      	bx	lr
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	40000400 	.word	0x40000400
    4970:	40000c00 	.word	0x40000c00

00004974 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4974:	b570      	push	{r4, r5, r6, lr}
    4976:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4978:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    497a:	780d      	ldrb	r5, [r1, #0]
    497c:	022d      	lsls	r5, r5, #8
    497e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4980:	784b      	ldrb	r3, [r1, #1]
    4982:	2b00      	cmp	r3, #0
    4984:	d002      	beq.n	498c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4986:	2380      	movs	r3, #128	; 0x80
    4988:	02db      	lsls	r3, r3, #11
    498a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    498c:	7a4b      	ldrb	r3, [r1, #9]
    498e:	2b00      	cmp	r3, #0
    4990:	d002      	beq.n	4998 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4992:	2380      	movs	r3, #128	; 0x80
    4994:	031b      	lsls	r3, r3, #12
    4996:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4998:	6848      	ldr	r0, [r1, #4]
    499a:	2801      	cmp	r0, #1
    499c:	d910      	bls.n	49c0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    499e:	1e43      	subs	r3, r0, #1
    49a0:	4218      	tst	r0, r3
    49a2:	d134      	bne.n	4a0e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    49a4:	2802      	cmp	r0, #2
    49a6:	d930      	bls.n	4a0a <system_gclk_gen_set_config+0x96>
    49a8:	2302      	movs	r3, #2
    49aa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    49ac:	3201      	adds	r2, #1
						mask <<= 1) {
    49ae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    49b0:	4298      	cmp	r0, r3
    49b2:	d8fb      	bhi.n	49ac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    49b4:	0212      	lsls	r2, r2, #8
    49b6:	4332      	orrs	r2, r6
    49b8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    49ba:	2380      	movs	r3, #128	; 0x80
    49bc:	035b      	lsls	r3, r3, #13
    49be:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    49c0:	7a0b      	ldrb	r3, [r1, #8]
    49c2:	2b00      	cmp	r3, #0
    49c4:	d002      	beq.n	49cc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    49c6:	2380      	movs	r3, #128	; 0x80
    49c8:	039b      	lsls	r3, r3, #14
    49ca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49cc:	4a13      	ldr	r2, [pc, #76]	; (4a1c <system_gclk_gen_set_config+0xa8>)
    49ce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    49d0:	b25b      	sxtb	r3, r3
    49d2:	2b00      	cmp	r3, #0
    49d4:	dbfb      	blt.n	49ce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    49d6:	4b12      	ldr	r3, [pc, #72]	; (4a20 <system_gclk_gen_set_config+0xac>)
    49d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    49da:	4b12      	ldr	r3, [pc, #72]	; (4a24 <system_gclk_gen_set_config+0xb0>)
    49dc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49de:	4a0f      	ldr	r2, [pc, #60]	; (4a1c <system_gclk_gen_set_config+0xa8>)
    49e0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    49e2:	b25b      	sxtb	r3, r3
    49e4:	2b00      	cmp	r3, #0
    49e6:	dbfb      	blt.n	49e0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    49e8:	4b0c      	ldr	r3, [pc, #48]	; (4a1c <system_gclk_gen_set_config+0xa8>)
    49ea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    49ec:	001a      	movs	r2, r3
    49ee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    49f0:	b25b      	sxtb	r3, r3
    49f2:	2b00      	cmp	r3, #0
    49f4:	dbfb      	blt.n	49ee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    49f6:	4a09      	ldr	r2, [pc, #36]	; (4a1c <system_gclk_gen_set_config+0xa8>)
    49f8:	6853      	ldr	r3, [r2, #4]
    49fa:	2180      	movs	r1, #128	; 0x80
    49fc:	0249      	lsls	r1, r1, #9
    49fe:	400b      	ands	r3, r1
    4a00:	431d      	orrs	r5, r3
    4a02:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4a04:	4b08      	ldr	r3, [pc, #32]	; (4a28 <system_gclk_gen_set_config+0xb4>)
    4a06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a08:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4a0a:	2200      	movs	r2, #0
    4a0c:	e7d2      	b.n	49b4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4a0e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4a10:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4a12:	2380      	movs	r3, #128	; 0x80
    4a14:	029b      	lsls	r3, r3, #10
    4a16:	431d      	orrs	r5, r3
    4a18:	e7d2      	b.n	49c0 <system_gclk_gen_set_config+0x4c>
    4a1a:	46c0      	nop			; (mov r8, r8)
    4a1c:	40000c00 	.word	0x40000c00
    4a20:	00003455 	.word	0x00003455
    4a24:	40000c08 	.word	0x40000c08
    4a28:	00003495 	.word	0x00003495

00004a2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4a2c:	b510      	push	{r4, lr}
    4a2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4a30:	4a0b      	ldr	r2, [pc, #44]	; (4a60 <system_gclk_gen_enable+0x34>)
    4a32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4a34:	b25b      	sxtb	r3, r3
    4a36:	2b00      	cmp	r3, #0
    4a38:	dbfb      	blt.n	4a32 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4a3a:	4b0a      	ldr	r3, [pc, #40]	; (4a64 <system_gclk_gen_enable+0x38>)
    4a3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a3e:	4b0a      	ldr	r3, [pc, #40]	; (4a68 <system_gclk_gen_enable+0x3c>)
    4a40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4a42:	4a07      	ldr	r2, [pc, #28]	; (4a60 <system_gclk_gen_enable+0x34>)
    4a44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4a46:	b25b      	sxtb	r3, r3
    4a48:	2b00      	cmp	r3, #0
    4a4a:	dbfb      	blt.n	4a44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4a4c:	4a04      	ldr	r2, [pc, #16]	; (4a60 <system_gclk_gen_enable+0x34>)
    4a4e:	6851      	ldr	r1, [r2, #4]
    4a50:	2380      	movs	r3, #128	; 0x80
    4a52:	025b      	lsls	r3, r3, #9
    4a54:	430b      	orrs	r3, r1
    4a56:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    4a58:	4b04      	ldr	r3, [pc, #16]	; (4a6c <system_gclk_gen_enable+0x40>)
    4a5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4a5c:	bd10      	pop	{r4, pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	40000c00 	.word	0x40000c00
    4a64:	00003455 	.word	0x00003455
    4a68:	40000c04 	.word	0x40000c04
    4a6c:	00003495 	.word	0x00003495

00004a70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4a70:	b570      	push	{r4, r5, r6, lr}
    4a72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4a74:	4a1a      	ldr	r2, [pc, #104]	; (4ae0 <system_gclk_gen_get_hz+0x70>)
    4a76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4a78:	b25b      	sxtb	r3, r3
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	dbfb      	blt.n	4a76 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    4a7e:	4b19      	ldr	r3, [pc, #100]	; (4ae4 <system_gclk_gen_get_hz+0x74>)
    4a80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a82:	4b19      	ldr	r3, [pc, #100]	; (4ae8 <system_gclk_gen_get_hz+0x78>)
    4a84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4a86:	4a16      	ldr	r2, [pc, #88]	; (4ae0 <system_gclk_gen_get_hz+0x70>)
    4a88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4a8a:	b25b      	sxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	dbfb      	blt.n	4a88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4a90:	4e13      	ldr	r6, [pc, #76]	; (4ae0 <system_gclk_gen_get_hz+0x70>)
    4a92:	6870      	ldr	r0, [r6, #4]
    4a94:	04c0      	lsls	r0, r0, #19
    4a96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4a98:	4b14      	ldr	r3, [pc, #80]	; (4aec <system_gclk_gen_get_hz+0x7c>)
    4a9a:	4798      	blx	r3
    4a9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4a9e:	4b12      	ldr	r3, [pc, #72]	; (4ae8 <system_gclk_gen_get_hz+0x78>)
    4aa0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4aa2:	6876      	ldr	r6, [r6, #4]
    4aa4:	02f6      	lsls	r6, r6, #11
    4aa6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4aa8:	4b11      	ldr	r3, [pc, #68]	; (4af0 <system_gclk_gen_get_hz+0x80>)
    4aaa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4aac:	4a0c      	ldr	r2, [pc, #48]	; (4ae0 <system_gclk_gen_get_hz+0x70>)
    4aae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4ab0:	b25b      	sxtb	r3, r3
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	dbfb      	blt.n	4aae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4ab6:	4b0a      	ldr	r3, [pc, #40]	; (4ae0 <system_gclk_gen_get_hz+0x70>)
    4ab8:	689c      	ldr	r4, [r3, #8]
    4aba:	0224      	lsls	r4, r4, #8
    4abc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4abe:	4b0d      	ldr	r3, [pc, #52]	; (4af4 <system_gclk_gen_get_hz+0x84>)
    4ac0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ac2:	2e00      	cmp	r6, #0
    4ac4:	d107      	bne.n	4ad6 <system_gclk_gen_get_hz+0x66>
    4ac6:	2c01      	cmp	r4, #1
    4ac8:	d907      	bls.n	4ada <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4aca:	0021      	movs	r1, r4
    4acc:	0028      	movs	r0, r5
    4ace:	4b0a      	ldr	r3, [pc, #40]	; (4af8 <system_gclk_gen_get_hz+0x88>)
    4ad0:	4798      	blx	r3
    4ad2:	0005      	movs	r5, r0
    4ad4:	e001      	b.n	4ada <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4ad6:	3401      	adds	r4, #1
    4ad8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4ada:	0028      	movs	r0, r5
    4adc:	bd70      	pop	{r4, r5, r6, pc}
    4ade:	46c0      	nop			; (mov r8, r8)
    4ae0:	40000c00 	.word	0x40000c00
    4ae4:	00003455 	.word	0x00003455
    4ae8:	40000c04 	.word	0x40000c04
    4aec:	00004545 	.word	0x00004545
    4af0:	40000c08 	.word	0x40000c08
    4af4:	00003495 	.word	0x00003495
    4af8:	00005541 	.word	0x00005541

00004afc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4afc:	b510      	push	{r4, lr}
    4afe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4b00:	4b06      	ldr	r3, [pc, #24]	; (4b1c <system_gclk_chan_enable+0x20>)
    4b02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b04:	4b06      	ldr	r3, [pc, #24]	; (4b20 <system_gclk_chan_enable+0x24>)
    4b06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4b08:	4a06      	ldr	r2, [pc, #24]	; (4b24 <system_gclk_chan_enable+0x28>)
    4b0a:	8853      	ldrh	r3, [r2, #2]
    4b0c:	2180      	movs	r1, #128	; 0x80
    4b0e:	01c9      	lsls	r1, r1, #7
    4b10:	430b      	orrs	r3, r1
    4b12:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4b14:	4b04      	ldr	r3, [pc, #16]	; (4b28 <system_gclk_chan_enable+0x2c>)
    4b16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4b18:	bd10      	pop	{r4, pc}
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	00003455 	.word	0x00003455
    4b20:	40000c02 	.word	0x40000c02
    4b24:	40000c00 	.word	0x40000c00
    4b28:	00003495 	.word	0x00003495

00004b2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4b2c:	b510      	push	{r4, lr}
    4b2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4b30:	4b0f      	ldr	r3, [pc, #60]	; (4b70 <system_gclk_chan_disable+0x44>)
    4b32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4b34:	4b0f      	ldr	r3, [pc, #60]	; (4b74 <system_gclk_chan_disable+0x48>)
    4b36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4b38:	4a0f      	ldr	r2, [pc, #60]	; (4b78 <system_gclk_chan_disable+0x4c>)
    4b3a:	8853      	ldrh	r3, [r2, #2]
    4b3c:	051b      	lsls	r3, r3, #20
    4b3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4b40:	8853      	ldrh	r3, [r2, #2]
    4b42:	490e      	ldr	r1, [pc, #56]	; (4b7c <system_gclk_chan_disable+0x50>)
    4b44:	400b      	ands	r3, r1
    4b46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4b48:	8853      	ldrh	r3, [r2, #2]
    4b4a:	490d      	ldr	r1, [pc, #52]	; (4b80 <system_gclk_chan_disable+0x54>)
    4b4c:	400b      	ands	r3, r1
    4b4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4b50:	0011      	movs	r1, r2
    4b52:	2280      	movs	r2, #128	; 0x80
    4b54:	01d2      	lsls	r2, r2, #7
    4b56:	884b      	ldrh	r3, [r1, #2]
    4b58:	4213      	tst	r3, r2
    4b5a:	d1fc      	bne.n	4b56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4b5c:	4906      	ldr	r1, [pc, #24]	; (4b78 <system_gclk_chan_disable+0x4c>)
    4b5e:	884a      	ldrh	r2, [r1, #2]
    4b60:	0203      	lsls	r3, r0, #8
    4b62:	4806      	ldr	r0, [pc, #24]	; (4b7c <system_gclk_chan_disable+0x50>)
    4b64:	4002      	ands	r2, r0
    4b66:	4313      	orrs	r3, r2
    4b68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4b6a:	4b06      	ldr	r3, [pc, #24]	; (4b84 <system_gclk_chan_disable+0x58>)
    4b6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4b6e:	bd10      	pop	{r4, pc}
    4b70:	00003455 	.word	0x00003455
    4b74:	40000c02 	.word	0x40000c02
    4b78:	40000c00 	.word	0x40000c00
    4b7c:	fffff0ff 	.word	0xfffff0ff
    4b80:	ffffbfff 	.word	0xffffbfff
    4b84:	00003495 	.word	0x00003495

00004b88 <system_gclk_chan_set_config>:
{
    4b88:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4b8a:	780c      	ldrb	r4, [r1, #0]
    4b8c:	0224      	lsls	r4, r4, #8
    4b8e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4b90:	4b02      	ldr	r3, [pc, #8]	; (4b9c <system_gclk_chan_set_config+0x14>)
    4b92:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4b94:	b2a4      	uxth	r4, r4
    4b96:	4b02      	ldr	r3, [pc, #8]	; (4ba0 <system_gclk_chan_set_config+0x18>)
    4b98:	805c      	strh	r4, [r3, #2]
}
    4b9a:	bd10      	pop	{r4, pc}
    4b9c:	00004b2d 	.word	0x00004b2d
    4ba0:	40000c00 	.word	0x40000c00

00004ba4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4ba4:	b510      	push	{r4, lr}
    4ba6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4ba8:	4b06      	ldr	r3, [pc, #24]	; (4bc4 <system_gclk_chan_get_hz+0x20>)
    4baa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4bac:	4b06      	ldr	r3, [pc, #24]	; (4bc8 <system_gclk_chan_get_hz+0x24>)
    4bae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4bb0:	4b06      	ldr	r3, [pc, #24]	; (4bcc <system_gclk_chan_get_hz+0x28>)
    4bb2:	885c      	ldrh	r4, [r3, #2]
    4bb4:	0524      	lsls	r4, r4, #20
    4bb6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4bb8:	4b05      	ldr	r3, [pc, #20]	; (4bd0 <system_gclk_chan_get_hz+0x2c>)
    4bba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4bbc:	0020      	movs	r0, r4
    4bbe:	4b05      	ldr	r3, [pc, #20]	; (4bd4 <system_gclk_chan_get_hz+0x30>)
    4bc0:	4798      	blx	r3
}
    4bc2:	bd10      	pop	{r4, pc}
    4bc4:	00003455 	.word	0x00003455
    4bc8:	40000c02 	.word	0x40000c02
    4bcc:	40000c00 	.word	0x40000c00
    4bd0:	00003495 	.word	0x00003495
    4bd4:	00004a71 	.word	0x00004a71

00004bd8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4bd8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4bda:	78d3      	ldrb	r3, [r2, #3]
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d135      	bne.n	4c4c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4be0:	7813      	ldrb	r3, [r2, #0]
    4be2:	2b80      	cmp	r3, #128	; 0x80
    4be4:	d029      	beq.n	4c3a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4be6:	061b      	lsls	r3, r3, #24
    4be8:	2480      	movs	r4, #128	; 0x80
    4bea:	0264      	lsls	r4, r4, #9
    4bec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4bee:	7854      	ldrb	r4, [r2, #1]
    4bf0:	2502      	movs	r5, #2
    4bf2:	43ac      	bics	r4, r5
    4bf4:	d106      	bne.n	4c04 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    4bf6:	7894      	ldrb	r4, [r2, #2]
    4bf8:	2c00      	cmp	r4, #0
    4bfa:	d120      	bne.n	4c3e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4bfc:	2480      	movs	r4, #128	; 0x80
    4bfe:	02a4      	lsls	r4, r4, #10
    4c00:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4c02:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c04:	7854      	ldrb	r4, [r2, #1]
    4c06:	3c01      	subs	r4, #1
    4c08:	2c01      	cmp	r4, #1
    4c0a:	d91c      	bls.n	4c46 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4c0c:	040d      	lsls	r5, r1, #16
    4c0e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4c10:	24a0      	movs	r4, #160	; 0xa0
    4c12:	05e4      	lsls	r4, r4, #23
    4c14:	432c      	orrs	r4, r5
    4c16:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c18:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4c1a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4c1c:	24d0      	movs	r4, #208	; 0xd0
    4c1e:	0624      	lsls	r4, r4, #24
    4c20:	432c      	orrs	r4, r5
    4c22:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c24:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4c26:	78d4      	ldrb	r4, [r2, #3]
    4c28:	2c00      	cmp	r4, #0
    4c2a:	d122      	bne.n	4c72 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4c2c:	035b      	lsls	r3, r3, #13
    4c2e:	d51c      	bpl.n	4c6a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4c30:	7893      	ldrb	r3, [r2, #2]
    4c32:	2b01      	cmp	r3, #1
    4c34:	d01e      	beq.n	4c74 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    4c36:	6141      	str	r1, [r0, #20]
    4c38:	e017      	b.n	4c6a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    4c3a:	2300      	movs	r3, #0
    4c3c:	e7d7      	b.n	4bee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4c3e:	24c0      	movs	r4, #192	; 0xc0
    4c40:	02e4      	lsls	r4, r4, #11
    4c42:	4323      	orrs	r3, r4
    4c44:	e7dd      	b.n	4c02 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4c46:	4c0d      	ldr	r4, [pc, #52]	; (4c7c <_system_pinmux_config+0xa4>)
    4c48:	4023      	ands	r3, r4
    4c4a:	e7df      	b.n	4c0c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    4c4c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4c4e:	040c      	lsls	r4, r1, #16
    4c50:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4c52:	23a0      	movs	r3, #160	; 0xa0
    4c54:	05db      	lsls	r3, r3, #23
    4c56:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c58:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4c5a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4c5c:	23d0      	movs	r3, #208	; 0xd0
    4c5e:	061b      	lsls	r3, r3, #24
    4c60:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4c62:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    4c64:	78d3      	ldrb	r3, [r2, #3]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d103      	bne.n	4c72 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4c6a:	7853      	ldrb	r3, [r2, #1]
    4c6c:	3b01      	subs	r3, #1
    4c6e:	2b01      	cmp	r3, #1
    4c70:	d902      	bls.n	4c78 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    4c72:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    4c74:	6181      	str	r1, [r0, #24]
    4c76:	e7f8      	b.n	4c6a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    4c78:	6081      	str	r1, [r0, #8]
}
    4c7a:	e7fa      	b.n	4c72 <_system_pinmux_config+0x9a>
    4c7c:	fffbffff 	.word	0xfffbffff

00004c80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    4c80:	b510      	push	{r4, lr}
    4c82:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    4c84:	09c1      	lsrs	r1, r0, #7
		return NULL;
    4c86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c88:	2900      	cmp	r1, #0
    4c8a:	d104      	bne.n	4c96 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    4c8c:	0943      	lsrs	r3, r0, #5
    4c8e:	01db      	lsls	r3, r3, #7
    4c90:	4905      	ldr	r1, [pc, #20]	; (4ca8 <system_pinmux_pin_set_config+0x28>)
    4c92:	468c      	mov	ip, r1
    4c94:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    4c96:	241f      	movs	r4, #31
    4c98:	4020      	ands	r0, r4
    4c9a:	2101      	movs	r1, #1
    4c9c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    4c9e:	0018      	movs	r0, r3
    4ca0:	4b02      	ldr	r3, [pc, #8]	; (4cac <system_pinmux_pin_set_config+0x2c>)
    4ca2:	4798      	blx	r3
}
    4ca4:	bd10      	pop	{r4, pc}
    4ca6:	46c0      	nop			; (mov r8, r8)
    4ca8:	41004400 	.word	0x41004400
    4cac:	00004bd9 	.word	0x00004bd9

00004cb0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    4cb0:	4770      	bx	lr
	...

00004cb4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4cb4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    4cb6:	4b05      	ldr	r3, [pc, #20]	; (4ccc <system_init+0x18>)
    4cb8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4cba:	4b05      	ldr	r3, [pc, #20]	; (4cd0 <system_init+0x1c>)
    4cbc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4cbe:	4b05      	ldr	r3, [pc, #20]	; (4cd4 <system_init+0x20>)
    4cc0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4cc2:	4b05      	ldr	r3, [pc, #20]	; (4cd8 <system_init+0x24>)
    4cc4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4cc6:	4b05      	ldr	r3, [pc, #20]	; (4cdc <system_init+0x28>)
    4cc8:	4798      	blx	r3
}
    4cca:	bd10      	pop	{r4, pc}
    4ccc:	000047f1 	.word	0x000047f1
    4cd0:	000034c5 	.word	0x000034c5
    4cd4:	00004cb1 	.word	0x00004cb1
    4cd8:	000035d5 	.word	0x000035d5
    4cdc:	00004cb1 	.word	0x00004cb1

00004ce0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4ce0:	e7fe      	b.n	4ce0 <Dummy_Handler>
	...

00004ce4 <Reset_Handler>:
{
    4ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    4ce6:	4a2a      	ldr	r2, [pc, #168]	; (4d90 <Reset_Handler+0xac>)
    4ce8:	4b2a      	ldr	r3, [pc, #168]	; (4d94 <Reset_Handler+0xb0>)
    4cea:	429a      	cmp	r2, r3
    4cec:	d011      	beq.n	4d12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    4cee:	001a      	movs	r2, r3
    4cf0:	4b29      	ldr	r3, [pc, #164]	; (4d98 <Reset_Handler+0xb4>)
    4cf2:	429a      	cmp	r2, r3
    4cf4:	d20d      	bcs.n	4d12 <Reset_Handler+0x2e>
    4cf6:	4a29      	ldr	r2, [pc, #164]	; (4d9c <Reset_Handler+0xb8>)
    4cf8:	3303      	adds	r3, #3
    4cfa:	1a9b      	subs	r3, r3, r2
    4cfc:	089b      	lsrs	r3, r3, #2
    4cfe:	3301      	adds	r3, #1
    4d00:	009b      	lsls	r3, r3, #2
    4d02:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    4d04:	4823      	ldr	r0, [pc, #140]	; (4d94 <Reset_Handler+0xb0>)
    4d06:	4922      	ldr	r1, [pc, #136]	; (4d90 <Reset_Handler+0xac>)
    4d08:	588c      	ldr	r4, [r1, r2]
    4d0a:	5084      	str	r4, [r0, r2]
    4d0c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    4d0e:	429a      	cmp	r2, r3
    4d10:	d1fa      	bne.n	4d08 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    4d12:	4a23      	ldr	r2, [pc, #140]	; (4da0 <Reset_Handler+0xbc>)
    4d14:	4b23      	ldr	r3, [pc, #140]	; (4da4 <Reset_Handler+0xc0>)
    4d16:	429a      	cmp	r2, r3
    4d18:	d20a      	bcs.n	4d30 <Reset_Handler+0x4c>
    4d1a:	43d3      	mvns	r3, r2
    4d1c:	4921      	ldr	r1, [pc, #132]	; (4da4 <Reset_Handler+0xc0>)
    4d1e:	185b      	adds	r3, r3, r1
    4d20:	2103      	movs	r1, #3
    4d22:	438b      	bics	r3, r1
    4d24:	3304      	adds	r3, #4
    4d26:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    4d28:	2100      	movs	r1, #0
    4d2a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    4d2c:	4293      	cmp	r3, r2
    4d2e:	d1fc      	bne.n	4d2a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    4d30:	4a1d      	ldr	r2, [pc, #116]	; (4da8 <Reset_Handler+0xc4>)
    4d32:	21ff      	movs	r1, #255	; 0xff
    4d34:	4b1d      	ldr	r3, [pc, #116]	; (4dac <Reset_Handler+0xc8>)
    4d36:	438b      	bics	r3, r1
    4d38:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4d3a:	39fd      	subs	r1, #253	; 0xfd
    4d3c:	2390      	movs	r3, #144	; 0x90
    4d3e:	005b      	lsls	r3, r3, #1
    4d40:	4a1b      	ldr	r2, [pc, #108]	; (4db0 <Reset_Handler+0xcc>)
    4d42:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4d44:	4a1b      	ldr	r2, [pc, #108]	; (4db4 <Reset_Handler+0xd0>)
    4d46:	78d3      	ldrb	r3, [r2, #3]
    4d48:	2503      	movs	r5, #3
    4d4a:	43ab      	bics	r3, r5
    4d4c:	2402      	movs	r4, #2
    4d4e:	4323      	orrs	r3, r4
    4d50:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4d52:	78d3      	ldrb	r3, [r2, #3]
    4d54:	270c      	movs	r7, #12
    4d56:	43bb      	bics	r3, r7
    4d58:	2608      	movs	r6, #8
    4d5a:	4333      	orrs	r3, r6
    4d5c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4d5e:	4b16      	ldr	r3, [pc, #88]	; (4db8 <Reset_Handler+0xd4>)
    4d60:	7b98      	ldrb	r0, [r3, #14]
    4d62:	2230      	movs	r2, #48	; 0x30
    4d64:	4390      	bics	r0, r2
    4d66:	2220      	movs	r2, #32
    4d68:	4310      	orrs	r0, r2
    4d6a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4d6c:	7b99      	ldrb	r1, [r3, #14]
    4d6e:	43b9      	bics	r1, r7
    4d70:	4331      	orrs	r1, r6
    4d72:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    4d74:	7b9a      	ldrb	r2, [r3, #14]
    4d76:	43aa      	bics	r2, r5
    4d78:	4322      	orrs	r2, r4
    4d7a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4d7c:	4a0f      	ldr	r2, [pc, #60]	; (4dbc <Reset_Handler+0xd8>)
    4d7e:	6853      	ldr	r3, [r2, #4]
    4d80:	2180      	movs	r1, #128	; 0x80
    4d82:	430b      	orrs	r3, r1
    4d84:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4d86:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <Reset_Handler+0xdc>)
    4d88:	4798      	blx	r3
        main();
    4d8a:	4b0e      	ldr	r3, [pc, #56]	; (4dc4 <Reset_Handler+0xe0>)
    4d8c:	4798      	blx	r3
    4d8e:	e7fe      	b.n	4d8e <Reset_Handler+0xaa>
    4d90:	00008e68 	.word	0x00008e68
    4d94:	20000000 	.word	0x20000000
    4d98:	20000280 	.word	0x20000280
    4d9c:	20000004 	.word	0x20000004
    4da0:	20000280 	.word	0x20000280
    4da4:	20000a60 	.word	0x20000a60
    4da8:	e000ed00 	.word	0xe000ed00
    4dac:	00000000 	.word	0x00000000
    4db0:	41007000 	.word	0x41007000
    4db4:	41005000 	.word	0x41005000
    4db8:	41004800 	.word	0x41004800
    4dbc:	41004000 	.word	0x41004000
    4dc0:	00005881 	.word	0x00005881
    4dc4:	000052a1 	.word	0x000052a1

00004dc8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dca:	46c6      	mov	lr, r8
    4dcc:	b500      	push	{lr}
    4dce:	000c      	movs	r4, r1
    4dd0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    4dd2:	2800      	cmp	r0, #0
    4dd4:	d10f      	bne.n	4df6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    4dd6:	2a00      	cmp	r2, #0
    4dd8:	dd11      	ble.n	4dfe <_read+0x36>
    4dda:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    4ddc:	4e09      	ldr	r6, [pc, #36]	; (4e04 <_read+0x3c>)
    4dde:	4d0a      	ldr	r5, [pc, #40]	; (4e08 <_read+0x40>)
    4de0:	6830      	ldr	r0, [r6, #0]
    4de2:	0021      	movs	r1, r4
    4de4:	682b      	ldr	r3, [r5, #0]
    4de6:	4798      	blx	r3
		ptr++;
    4de8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    4dea:	42bc      	cmp	r4, r7
    4dec:	d1f8      	bne.n	4de0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    4dee:	4640      	mov	r0, r8
    4df0:	bc04      	pop	{r2}
    4df2:	4690      	mov	r8, r2
    4df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    4df6:	2301      	movs	r3, #1
    4df8:	425b      	negs	r3, r3
    4dfa:	4698      	mov	r8, r3
    4dfc:	e7f7      	b.n	4dee <_read+0x26>
	for (; len > 0; --len) {
    4dfe:	4680      	mov	r8, r0
    4e00:	e7f5      	b.n	4dee <_read+0x26>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	20000a58 	.word	0x20000a58
    4e08:	20000a50 	.word	0x20000a50

00004e0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	46c6      	mov	lr, r8
    4e10:	b500      	push	{lr}
    4e12:	000e      	movs	r6, r1
    4e14:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    4e16:	3801      	subs	r0, #1
    4e18:	2802      	cmp	r0, #2
    4e1a:	d810      	bhi.n	4e3e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    4e1c:	2a00      	cmp	r2, #0
    4e1e:	d011      	beq.n	4e44 <_write+0x38>
    4e20:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    4e22:	4b0c      	ldr	r3, [pc, #48]	; (4e54 <_write+0x48>)
    4e24:	4698      	mov	r8, r3
    4e26:	4f0c      	ldr	r7, [pc, #48]	; (4e58 <_write+0x4c>)
    4e28:	4643      	mov	r3, r8
    4e2a:	6818      	ldr	r0, [r3, #0]
    4e2c:	5d31      	ldrb	r1, [r6, r4]
    4e2e:	683b      	ldr	r3, [r7, #0]
    4e30:	4798      	blx	r3
    4e32:	2800      	cmp	r0, #0
    4e34:	db08      	blt.n	4e48 <_write+0x3c>
			return -1;
		}
		++nChars;
    4e36:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    4e38:	42a5      	cmp	r5, r4
    4e3a:	d1f5      	bne.n	4e28 <_write+0x1c>
    4e3c:	e006      	b.n	4e4c <_write+0x40>
		return -1;
    4e3e:	2401      	movs	r4, #1
    4e40:	4264      	negs	r4, r4
    4e42:	e003      	b.n	4e4c <_write+0x40>
	for (; len != 0; --len) {
    4e44:	0014      	movs	r4, r2
    4e46:	e001      	b.n	4e4c <_write+0x40>
			return -1;
    4e48:	2401      	movs	r4, #1
    4e4a:	4264      	negs	r4, r4
	}
	return nChars;
}
    4e4c:	0020      	movs	r0, r4
    4e4e:	bc04      	pop	{r2}
    4e50:	4690      	mov	r8, r2
    4e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e54:	20000a58 	.word	0x20000a58
    4e58:	20000a54 	.word	0x20000a54

00004e5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    4e5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4e5e:	4a06      	ldr	r2, [pc, #24]	; (4e78 <_sbrk+0x1c>)
    4e60:	6812      	ldr	r2, [r2, #0]
    4e62:	2a00      	cmp	r2, #0
    4e64:	d004      	beq.n	4e70 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    4e66:	4a04      	ldr	r2, [pc, #16]	; (4e78 <_sbrk+0x1c>)
    4e68:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    4e6a:	18c3      	adds	r3, r0, r3
    4e6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    4e6e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    4e70:	4902      	ldr	r1, [pc, #8]	; (4e7c <_sbrk+0x20>)
    4e72:	4a01      	ldr	r2, [pc, #4]	; (4e78 <_sbrk+0x1c>)
    4e74:	6011      	str	r1, [r2, #0]
    4e76:	e7f6      	b.n	4e66 <_sbrk+0xa>
    4e78:	200002f0 	.word	0x200002f0
    4e7c:	20002a60 	.word	0x20002a60

00004e80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    4e80:	2001      	movs	r0, #1
    4e82:	4240      	negs	r0, r0
    4e84:	4770      	bx	lr

00004e86 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    4e86:	2380      	movs	r3, #128	; 0x80
    4e88:	019b      	lsls	r3, r3, #6
    4e8a:	604b      	str	r3, [r1, #4]

	return 0;
}
    4e8c:	2000      	movs	r0, #0
    4e8e:	4770      	bx	lr

00004e90 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    4e90:	2001      	movs	r0, #1
    4e92:	4770      	bx	lr

00004e94 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    4e94:	2000      	movs	r0, #0
    4e96:	4770      	bx	lr

00004e98 <resolve_cb>:
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    4e98:	b530      	push	{r4, r5, lr}
    4e9a:	b083      	sub	sp, #12
	gu32HostIp = hostIp;
    4e9c:	4b0a      	ldr	r3, [pc, #40]	; (4ec8 <resolve_cb+0x30>)
    4e9e:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
    4ea0:	2201      	movs	r2, #1
    4ea2:	4b0a      	ldr	r3, [pc, #40]	; (4ecc <resolve_cb+0x34>)
    4ea4:	701a      	strb	r2, [r3, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    4ea6:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
    4ea8:	24ff      	movs	r4, #255	; 0xff
    4eaa:	4023      	ands	r3, r4
    4eac:	0022      	movs	r2, r4
    4eae:	400a      	ands	r2, r1
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    4eb0:	0e0d      	lsrs	r5, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
    4eb2:	9501      	str	r5, [sp, #4]
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    4eb4:	0c09      	lsrs	r1, r1, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
    4eb6:	4021      	ands	r1, r4
    4eb8:	9100      	str	r1, [sp, #0]
    4eba:	0001      	movs	r1, r0
    4ebc:	4804      	ldr	r0, [pc, #16]	; (4ed0 <resolve_cb+0x38>)
    4ebe:	4c05      	ldr	r4, [pc, #20]	; (4ed4 <resolve_cb+0x3c>)
    4ec0:	47a0      	blx	r4
}
    4ec2:	b003      	add	sp, #12
    4ec4:	bd30      	pop	{r4, r5, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	200008b8 	.word	0x200008b8
    4ecc:	200008b5 	.word	0x200008b5
    4ed0:	00008a00 	.word	0x00008a00
    4ed4:	000058d9 	.word	0x000058d9

00004ed8 <set_dev_name_to_mac>:
		}
	}
}

static void set_dev_name_to_mac(uint8_t *name, uint8_t *mac_addr)
{
    4ed8:	b570      	push	{r4, r5, r6, lr}
    4eda:	0004      	movs	r4, r0
    4edc:	000d      	movs	r5, r1
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    4ede:	4b19      	ldr	r3, [pc, #100]	; (4f44 <set_dev_name_to_mac+0x6c>)
    4ee0:	4798      	blx	r3
	if (len >= 5) {
    4ee2:	2804      	cmp	r0, #4
    4ee4:	d92d      	bls.n	4f42 <set_dev_name_to_mac+0x6a>
		name[len - 1] = MAIN_HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    4ee6:	1e42      	subs	r2, r0, #1
    4ee8:	18a2      	adds	r2, r4, r2
    4eea:	796b      	ldrb	r3, [r5, #5]
    4eec:	210f      	movs	r1, #15
    4eee:	400b      	ands	r3, r1
    4ef0:	0019      	movs	r1, r3
    4ef2:	3130      	adds	r1, #48	; 0x30
    4ef4:	2b09      	cmp	r3, #9
    4ef6:	dd01      	ble.n	4efc <set_dev_name_to_mac+0x24>
    4ef8:	3337      	adds	r3, #55	; 0x37
    4efa:	0019      	movs	r1, r3
    4efc:	7011      	strb	r1, [r2, #0]
		name[len - 2] = MAIN_HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    4efe:	1e82      	subs	r2, r0, #2
    4f00:	18a2      	adds	r2, r4, r2
    4f02:	796b      	ldrb	r3, [r5, #5]
    4f04:	091b      	lsrs	r3, r3, #4
    4f06:	0019      	movs	r1, r3
    4f08:	3130      	adds	r1, #48	; 0x30
    4f0a:	2b09      	cmp	r3, #9
    4f0c:	dd01      	ble.n	4f12 <set_dev_name_to_mac+0x3a>
    4f0e:	3337      	adds	r3, #55	; 0x37
    4f10:	0019      	movs	r1, r3
    4f12:	7011      	strb	r1, [r2, #0]
		name[len - 4] = MAIN_HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    4f14:	1f02      	subs	r2, r0, #4
    4f16:	18a2      	adds	r2, r4, r2
    4f18:	792b      	ldrb	r3, [r5, #4]
    4f1a:	210f      	movs	r1, #15
    4f1c:	400b      	ands	r3, r1
    4f1e:	0019      	movs	r1, r3
    4f20:	3130      	adds	r1, #48	; 0x30
    4f22:	2b09      	cmp	r3, #9
    4f24:	dd01      	ble.n	4f2a <set_dev_name_to_mac+0x52>
    4f26:	3337      	adds	r3, #55	; 0x37
    4f28:	0019      	movs	r1, r3
    4f2a:	7011      	strb	r1, [r2, #0]
		name[len - 5] = MAIN_HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    4f2c:	3805      	subs	r0, #5
    4f2e:	1824      	adds	r4, r4, r0
    4f30:	792b      	ldrb	r3, [r5, #4]
    4f32:	091b      	lsrs	r3, r3, #4
    4f34:	001a      	movs	r2, r3
    4f36:	3230      	adds	r2, #48	; 0x30
    4f38:	2b09      	cmp	r3, #9
    4f3a:	dd01      	ble.n	4f40 <set_dev_name_to_mac+0x68>
    4f3c:	3337      	adds	r3, #55	; 0x37
    4f3e:	001a      	movs	r2, r3
    4f40:	7022      	strb	r2, [r4, #0]
	}
}
    4f42:	bd70      	pop	{r4, r5, r6, pc}
    4f44:	0000059d 	.word	0x0000059d

00004f48 <socket_cb>:
{
    4f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f4a:	b083      	sub	sp, #12
    4f4c:	0014      	movs	r4, r2
	if (sock == tcp_client_socket) {
    4f4e:	4b6a      	ldr	r3, [pc, #424]	; (50f8 <socket_cb+0x1b0>)
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	b25b      	sxtb	r3, r3
    4f54:	4283      	cmp	r3, r0
    4f56:	d001      	beq.n	4f5c <socket_cb+0x14>
}
    4f58:	b003      	add	sp, #12
    4f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (u8Msg) {
    4f5c:	2905      	cmp	r1, #5
    4f5e:	d05a      	beq.n	5016 <socket_cb+0xce>
    4f60:	2906      	cmp	r1, #6
    4f62:	d1f9      	bne.n	4f58 <socket_cb+0x10>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
    4f64:	2a00      	cmp	r2, #0
    4f66:	d100      	bne.n	4f6a <socket_cb+0x22>
    4f68:	e0ba      	b.n	50e0 <socket_cb+0x198>
    4f6a:	2204      	movs	r2, #4
    4f6c:	5ea3      	ldrsh	r3, [r4, r2]
    4f6e:	2b00      	cmp	r3, #0
    4f70:	dc00      	bgt.n	4f74 <socket_cb+0x2c>
    4f72:	e0b5      	b.n	50e0 <socket_cb+0x198>
				pcIndxPtr = strstr((char *)pstrRecv->pu8Buffer, "name=");
    4f74:	6820      	ldr	r0, [r4, #0]
    4f76:	4961      	ldr	r1, [pc, #388]	; (50fc <socket_cb+0x1b4>)
    4f78:	4b61      	ldr	r3, [pc, #388]	; (5100 <socket_cb+0x1b8>)
    4f7a:	4798      	blx	r3
    4f7c:	0004      	movs	r4, r0
				printf("City: ");
    4f7e:	4861      	ldr	r0, [pc, #388]	; (5104 <socket_cb+0x1bc>)
    4f80:	4b61      	ldr	r3, [pc, #388]	; (5108 <socket_cb+0x1c0>)
    4f82:	4798      	blx	r3
				if (NULL != pcIndxPtr) {
    4f84:	2c00      	cmp	r4, #0
    4f86:	d100      	bne.n	4f8a <socket_cb+0x42>
    4f88:	e091      	b.n	50ae <socket_cb+0x166>
					pcIndxPtr = pcIndxPtr + strlen("name=") + 1;
    4f8a:	3406      	adds	r4, #6
					pcEndPtr = strstr(pcIndxPtr, "\">");
    4f8c:	495f      	ldr	r1, [pc, #380]	; (510c <socket_cb+0x1c4>)
    4f8e:	0020      	movs	r0, r4
    4f90:	4b5b      	ldr	r3, [pc, #364]	; (5100 <socket_cb+0x1b8>)
    4f92:	4798      	blx	r3
    4f94:	1e05      	subs	r5, r0, #0
					if (NULL != pcEndPtr) {
    4f96:	d001      	beq.n	4f9c <socket_cb+0x54>
						*pcEndPtr = 0;
    4f98:	2300      	movs	r3, #0
    4f9a:	7003      	strb	r3, [r0, #0]
					printf("%s\r\n", pcIndxPtr);
    4f9c:	0021      	movs	r1, r4
    4f9e:	485c      	ldr	r0, [pc, #368]	; (5110 <socket_cb+0x1c8>)
    4fa0:	4e59      	ldr	r6, [pc, #356]	; (5108 <socket_cb+0x1c0>)
    4fa2:	47b0      	blx	r6
				pcIndxPtr = strstr(pcEndPtr + 1, "temperature value");
    4fa4:	1c68      	adds	r0, r5, #1
    4fa6:	495b      	ldr	r1, [pc, #364]	; (5114 <socket_cb+0x1cc>)
    4fa8:	4b55      	ldr	r3, [pc, #340]	; (5100 <socket_cb+0x1b8>)
    4faa:	4798      	blx	r3
    4fac:	0004      	movs	r4, r0
				printf("Temperature: ");
    4fae:	485a      	ldr	r0, [pc, #360]	; (5118 <socket_cb+0x1d0>)
    4fb0:	47b0      	blx	r6
				if (NULL != pcIndxPtr) {
    4fb2:	2c00      	cmp	r4, #0
    4fb4:	d100      	bne.n	4fb8 <socket_cb+0x70>
    4fb6:	e07e      	b.n	50b6 <socket_cb+0x16e>
					pcIndxPtr = pcIndxPtr + strlen("temperature value") + 2;
    4fb8:	3413      	adds	r4, #19
					pcEndPtr = strstr(pcIndxPtr, "\" ");
    4fba:	4958      	ldr	r1, [pc, #352]	; (511c <socket_cb+0x1d4>)
    4fbc:	0020      	movs	r0, r4
    4fbe:	4b50      	ldr	r3, [pc, #320]	; (5100 <socket_cb+0x1b8>)
    4fc0:	4798      	blx	r3
    4fc2:	1e05      	subs	r5, r0, #0
					if (NULL != pcEndPtr) {
    4fc4:	d001      	beq.n	4fca <socket_cb+0x82>
						*pcEndPtr = 0;
    4fc6:	2300      	movs	r3, #0
    4fc8:	7003      	strb	r3, [r0, #0]
					printf("%s\r\n", pcIndxPtr);
    4fca:	0021      	movs	r1, r4
    4fcc:	4850      	ldr	r0, [pc, #320]	; (5110 <socket_cb+0x1c8>)
    4fce:	4b4e      	ldr	r3, [pc, #312]	; (5108 <socket_cb+0x1c0>)
    4fd0:	4798      	blx	r3
				pcIndxPtr = strstr(pcEndPtr + 1, "weather number");
    4fd2:	1c68      	adds	r0, r5, #1
    4fd4:	4952      	ldr	r1, [pc, #328]	; (5120 <socket_cb+0x1d8>)
    4fd6:	4b4a      	ldr	r3, [pc, #296]	; (5100 <socket_cb+0x1b8>)
    4fd8:	4798      	blx	r3
    4fda:	1e04      	subs	r4, r0, #0
				if (NULL != pcIndxPtr) {
    4fdc:	d06f      	beq.n	50be <socket_cb+0x176>
					printf("Weather Condition: ");
    4fde:	4851      	ldr	r0, [pc, #324]	; (5124 <socket_cb+0x1dc>)
    4fe0:	4b49      	ldr	r3, [pc, #292]	; (5108 <socket_cb+0x1c0>)
    4fe2:	4798      	blx	r3
					pcIndxPtr = pcIndxPtr + strlen("weather number") + 14;
    4fe4:	341c      	adds	r4, #28
					pcEndPtr = strstr(pcIndxPtr, "\" ");
    4fe6:	494d      	ldr	r1, [pc, #308]	; (511c <socket_cb+0x1d4>)
    4fe8:	0020      	movs	r0, r4
    4fea:	4b45      	ldr	r3, [pc, #276]	; (5100 <socket_cb+0x1b8>)
    4fec:	4798      	blx	r3
					if (NULL != pcEndPtr) {
    4fee:	2800      	cmp	r0, #0
    4ff0:	d001      	beq.n	4ff6 <socket_cb+0xae>
						*pcEndPtr = 0;
    4ff2:	2300      	movs	r3, #0
    4ff4:	7003      	strb	r3, [r0, #0]
					printf("%s\r\n", pcIndxPtr);
    4ff6:	0021      	movs	r1, r4
    4ff8:	4845      	ldr	r0, [pc, #276]	; (5110 <socket_cb+0x1c8>)
    4ffa:	4b43      	ldr	r3, [pc, #268]	; (5108 <socket_cb+0x1c0>)
    4ffc:	4798      	blx	r3
					close(tcp_client_socket);
    4ffe:	4c3e      	ldr	r4, [pc, #248]	; (50f8 <socket_cb+0x1b0>)
    5000:	2000      	movs	r0, #0
    5002:	5620      	ldrsb	r0, [r4, r0]
    5004:	4b48      	ldr	r3, [pc, #288]	; (5128 <socket_cb+0x1e0>)
    5006:	4798      	blx	r3
					tcp_client_socket = -1;
    5008:	23ff      	movs	r3, #255	; 0xff
    500a:	7023      	strb	r3, [r4, #0]
		port_base->OUTCLR.reg = pin_mask;
    500c:	2280      	movs	r2, #128	; 0x80
    500e:	05d2      	lsls	r2, r2, #23
    5010:	4b46      	ldr	r3, [pc, #280]	; (512c <socket_cb+0x1e4>)
    5012:	615a      	str	r2, [r3, #20]
    5014:	e7a0      	b.n	4f58 <socket_cb+0x10>
			if (gbTcpConnection) {
    5016:	4b46      	ldr	r3, [pc, #280]	; (5130 <socket_cb+0x1e8>)
    5018:	781b      	ldrb	r3, [r3, #0]
    501a:	2b00      	cmp	r3, #0
    501c:	d09c      	beq.n	4f58 <socket_cb+0x10>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
    501e:	4e45      	ldr	r6, [pc, #276]	; (5134 <socket_cb+0x1ec>)
    5020:	22af      	movs	r2, #175	; 0xaf
    5022:	00d2      	lsls	r2, r2, #3
    5024:	2100      	movs	r1, #0
    5026:	0030      	movs	r0, r6
    5028:	4b43      	ldr	r3, [pc, #268]	; (5138 <socket_cb+0x1f0>)
    502a:	4798      	blx	r3
				printf("Enter City Name: ");
    502c:	4843      	ldr	r0, [pc, #268]	; (513c <socket_cb+0x1f4>)
    502e:	4f36      	ldr	r7, [pc, #216]	; (5108 <socket_cb+0x1c0>)
    5030:	47b8      	blx	r7
				scanf("%s", cityName);
    5032:	4d43      	ldr	r5, [pc, #268]	; (5140 <socket_cb+0x1f8>)
    5034:	0029      	movs	r1, r5
    5036:	4843      	ldr	r0, [pc, #268]	; (5144 <socket_cb+0x1fc>)
    5038:	4b43      	ldr	r3, [pc, #268]	; (5148 <socket_cb+0x200>)
    503a:	4798      	blx	r3
				printf("\r\n%s\r\n\r\n\r\n", cityName);
    503c:	0029      	movs	r1, r5
    503e:	4843      	ldr	r0, [pc, #268]	; (514c <socket_cb+0x204>)
    5040:	47b8      	blx	r7
				sprintf((char *)gau8ReceivedBuffer, "%s%s%s", MAIN_PREFIX_BUFFER, (char *)cityName, MAIN_POST_BUFFER);
    5042:	4b43      	ldr	r3, [pc, #268]	; (5150 <socket_cb+0x208>)
    5044:	9300      	str	r3, [sp, #0]
    5046:	002b      	movs	r3, r5
    5048:	4a42      	ldr	r2, [pc, #264]	; (5154 <socket_cb+0x20c>)
    504a:	4943      	ldr	r1, [pc, #268]	; (5158 <socket_cb+0x210>)
    504c:	0030      	movs	r0, r6
    504e:	4d43      	ldr	r5, [pc, #268]	; (515c <socket_cb+0x214>)
    5050:	47a8      	blx	r5
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
    5052:	2c00      	cmp	r4, #0
    5054:	d01d      	beq.n	5092 <socket_cb+0x14a>
    5056:	7863      	ldrb	r3, [r4, #1]
    5058:	2b7f      	cmp	r3, #127	; 0x7f
    505a:	d81a      	bhi.n	5092 <socket_cb+0x14a>
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
    505c:	4c35      	ldr	r4, [pc, #212]	; (5134 <socket_cb+0x1ec>)
    505e:	0020      	movs	r0, r4
    5060:	4b3f      	ldr	r3, [pc, #252]	; (5160 <socket_cb+0x218>)
    5062:	4798      	blx	r3
    5064:	b282      	uxth	r2, r0
    5066:	4e24      	ldr	r6, [pc, #144]	; (50f8 <socket_cb+0x1b0>)
    5068:	2000      	movs	r0, #0
    506a:	5630      	ldrsb	r0, [r6, r0]
    506c:	2300      	movs	r3, #0
    506e:	0021      	movs	r1, r4
    5070:	4d3c      	ldr	r5, [pc, #240]	; (5164 <socket_cb+0x21c>)
    5072:	47a8      	blx	r5
					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
    5074:	25af      	movs	r5, #175	; 0xaf
    5076:	00ed      	lsls	r5, r5, #3
    5078:	002a      	movs	r2, r5
    507a:	2100      	movs	r1, #0
    507c:	0020      	movs	r0, r4
    507e:	4b2e      	ldr	r3, [pc, #184]	; (5138 <socket_cb+0x1f0>)
    5080:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
    5082:	2000      	movs	r0, #0
    5084:	5630      	ldrsb	r0, [r6, r0]
    5086:	2300      	movs	r3, #0
    5088:	002a      	movs	r2, r5
    508a:	0021      	movs	r1, r4
    508c:	4c36      	ldr	r4, [pc, #216]	; (5168 <socket_cb+0x220>)
    508e:	47a0      	blx	r4
    5090:	e762      	b.n	4f58 <socket_cb+0x10>
					printf("socket_cb: connect error!\r\n");
    5092:	4836      	ldr	r0, [pc, #216]	; (516c <socket_cb+0x224>)
    5094:	4b36      	ldr	r3, [pc, #216]	; (5170 <socket_cb+0x228>)
    5096:	4798      	blx	r3
					gbTcpConnection = false;
    5098:	2200      	movs	r2, #0
    509a:	4b25      	ldr	r3, [pc, #148]	; (5130 <socket_cb+0x1e8>)
    509c:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
    509e:	4c16      	ldr	r4, [pc, #88]	; (50f8 <socket_cb+0x1b0>)
    50a0:	2000      	movs	r0, #0
    50a2:	5620      	ldrsb	r0, [r4, r0]
    50a4:	4b20      	ldr	r3, [pc, #128]	; (5128 <socket_cb+0x1e0>)
    50a6:	4798      	blx	r3
					tcp_client_socket = -1;
    50a8:	23ff      	movs	r3, #255	; 0xff
    50aa:	7023      	strb	r3, [r4, #0]
    50ac:	e754      	b.n	4f58 <socket_cb+0x10>
					printf("N/A\r\n");
    50ae:	4831      	ldr	r0, [pc, #196]	; (5174 <socket_cb+0x22c>)
    50b0:	4b2f      	ldr	r3, [pc, #188]	; (5170 <socket_cb+0x228>)
    50b2:	4798      	blx	r3
					break;
    50b4:	e750      	b.n	4f58 <socket_cb+0x10>
					printf("N/A\r\n");
    50b6:	482f      	ldr	r0, [pc, #188]	; (5174 <socket_cb+0x22c>)
    50b8:	4b2d      	ldr	r3, [pc, #180]	; (5170 <socket_cb+0x228>)
    50ba:	4798      	blx	r3
					break;
    50bc:	e74c      	b.n	4f58 <socket_cb+0x10>
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
    50be:	4c1d      	ldr	r4, [pc, #116]	; (5134 <socket_cb+0x1ec>)
    50c0:	25af      	movs	r5, #175	; 0xaf
    50c2:	00ed      	lsls	r5, r5, #3
    50c4:	002a      	movs	r2, r5
    50c6:	2100      	movs	r1, #0
    50c8:	0020      	movs	r0, r4
    50ca:	4b1b      	ldr	r3, [pc, #108]	; (5138 <socket_cb+0x1f0>)
    50cc:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
    50ce:	4b0a      	ldr	r3, [pc, #40]	; (50f8 <socket_cb+0x1b0>)
    50d0:	2000      	movs	r0, #0
    50d2:	5618      	ldrsb	r0, [r3, r0]
    50d4:	2300      	movs	r3, #0
    50d6:	002a      	movs	r2, r5
    50d8:	0021      	movs	r1, r4
    50da:	4c23      	ldr	r4, [pc, #140]	; (5168 <socket_cb+0x220>)
    50dc:	47a0      	blx	r4
    50de:	e73b      	b.n	4f58 <socket_cb+0x10>
				printf("socket_cb: recv error!\r\n");
    50e0:	4825      	ldr	r0, [pc, #148]	; (5178 <socket_cb+0x230>)
    50e2:	4b23      	ldr	r3, [pc, #140]	; (5170 <socket_cb+0x228>)
    50e4:	4798      	blx	r3
				close(tcp_client_socket);
    50e6:	4c04      	ldr	r4, [pc, #16]	; (50f8 <socket_cb+0x1b0>)
    50e8:	2000      	movs	r0, #0
    50ea:	5620      	ldrsb	r0, [r4, r0]
    50ec:	4b0e      	ldr	r3, [pc, #56]	; (5128 <socket_cb+0x1e0>)
    50ee:	4798      	blx	r3
				tcp_client_socket = -1;
    50f0:	23ff      	movs	r3, #255	; 0xff
    50f2:	7023      	strb	r3, [r4, #0]
}
    50f4:	e730      	b.n	4f58 <socket_cb+0x10>
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	200000ac 	.word	0x200000ac
    50fc:	00008b08 	.word	0x00008b08
    5100:	00005bfb 	.word	0x00005bfb
    5104:	00008b10 	.word	0x00008b10
    5108:	000058d9 	.word	0x000058d9
    510c:	00008b18 	.word	0x00008b18
    5110:	00008b1c 	.word	0x00008b1c
    5114:	00008b24 	.word	0x00008b24
    5118:	00008b38 	.word	0x00008b38
    511c:	00008b50 	.word	0x00008b50
    5120:	00008b54 	.word	0x00008b54
    5124:	00008b64 	.word	0x00008b64
    5128:	00003295 	.word	0x00003295
    512c:	41004480 	.word	0x41004480
    5130:	200008b6 	.word	0x200008b6
    5134:	2000033c 	.word	0x2000033c
    5138:	000058c9 	.word	0x000058c9
    513c:	00008a30 	.word	0x00008a30
    5140:	20000328 	.word	0x20000328
    5144:	00008a70 	.word	0x00008a70
    5148:	00005a09 	.word	0x00005a09
    514c:	00008a44 	.word	0x00008a44
    5150:	00008a74 	.word	0x00008a74
    5154:	00008a50 	.word	0x00008a50
    5158:	00008a6c 	.word	0x00008a6c
    515c:	00005ba9 	.word	0x00005ba9
    5160:	00005bed 	.word	0x00005bed
    5164:	00003169 	.word	0x00003169
    5168:	00003201 	.word	0x00003201
    516c:	00008aec 	.word	0x00008aec
    5170:	000059f5 	.word	0x000059f5
    5174:	00008b48 	.word	0x00008b48
    5178:	00008b78 	.word	0x00008b78

0000517c <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters.
 *
 * \return None.
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    517c:	b510      	push	{r4, lr}
    517e:	b082      	sub	sp, #8
    5180:	000c      	movs	r4, r1
	switch (u8MsgType) {
    5182:	282c      	cmp	r0, #44	; 0x2c
    5184:	d005      	beq.n	5192 <wifi_cb+0x16>
    5186:	2832      	cmp	r0, #50	; 0x32
    5188:	d020      	beq.n	51cc <wifi_cb+0x50>
    518a:	2809      	cmp	r0, #9
    518c:	d02d      	beq.n	51ea <wifi_cb+0x6e>
	default:
	{
		break;
	}
	}
}
    518e:	b002      	add	sp, #8
    5190:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    5192:	780b      	ldrb	r3, [r1, #0]
    5194:	2b01      	cmp	r3, #1
    5196:	d013      	beq.n	51c0 <wifi_cb+0x44>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5198:	2b00      	cmp	r3, #0
    519a:	d1f8      	bne.n	518e <wifi_cb+0x12>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    519c:	481f      	ldr	r0, [pc, #124]	; (521c <wifi_cb+0xa0>)
    519e:	4b20      	ldr	r3, [pc, #128]	; (5220 <wifi_cb+0xa4>)
    51a0:	4798      	blx	r3
			gbConnectedWifi = false;
    51a2:	2200      	movs	r2, #0
    51a4:	4b1f      	ldr	r3, [pc, #124]	; (5224 <wifi_cb+0xa8>)
    51a6:	701a      	strb	r2, [r3, #0]
			printf("reconnecting");
    51a8:	481f      	ldr	r0, [pc, #124]	; (5228 <wifi_cb+0xac>)
    51aa:	4b20      	ldr	r3, [pc, #128]	; (522c <wifi_cb+0xb0>)
    51ac:	4798      	blx	r3
			m2m_wifi_connect(MAIN_M2M_SSID, sizeof(MAIN_M2M_SSID),MAIN_M2M_SEC,MAIN_M2M_PASSWORD, M2M_WIFI_CH_ALL);
    51ae:	23ff      	movs	r3, #255	; 0xff
    51b0:	9300      	str	r3, [sp, #0]
    51b2:	4b1f      	ldr	r3, [pc, #124]	; (5230 <wifi_cb+0xb4>)
    51b4:	2202      	movs	r2, #2
    51b6:	210c      	movs	r1, #12
    51b8:	481e      	ldr	r0, [pc, #120]	; (5234 <wifi_cb+0xb8>)
    51ba:	4c1f      	ldr	r4, [pc, #124]	; (5238 <wifi_cb+0xbc>)
    51bc:	47a0      	blx	r4
    51be:	e7e6      	b.n	518e <wifi_cb+0x12>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    51c0:	481e      	ldr	r0, [pc, #120]	; (523c <wifi_cb+0xc0>)
    51c2:	4b17      	ldr	r3, [pc, #92]	; (5220 <wifi_cb+0xa4>)
    51c4:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    51c6:	4b1e      	ldr	r3, [pc, #120]	; (5240 <wifi_cb+0xc4>)
    51c8:	4798      	blx	r3
    51ca:	e7e0      	b.n	518e <wifi_cb+0x12>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    51cc:	788b      	ldrb	r3, [r1, #2]
    51ce:	784a      	ldrb	r2, [r1, #1]
    51d0:	7809      	ldrb	r1, [r1, #0]
    51d2:	78e0      	ldrb	r0, [r4, #3]
    51d4:	9000      	str	r0, [sp, #0]
    51d6:	481b      	ldr	r0, [pc, #108]	; (5244 <wifi_cb+0xc8>)
    51d8:	4c14      	ldr	r4, [pc, #80]	; (522c <wifi_cb+0xb0>)
    51da:	47a0      	blx	r4
		gbConnectedWifi = true;
    51dc:	2201      	movs	r2, #1
    51de:	4b11      	ldr	r3, [pc, #68]	; (5224 <wifi_cb+0xa8>)
    51e0:	701a      	strb	r2, [r3, #0]
		gethostbyname((uint8_t *)MAIN_WEATHER_SERVER_NAME);
    51e2:	4819      	ldr	r0, [pc, #100]	; (5248 <wifi_cb+0xcc>)
    51e4:	4b19      	ldr	r3, [pc, #100]	; (524c <wifi_cb+0xd0>)
    51e6:	4798      	blx	r3
		break;
    51e8:	e7d1      	b.n	518e <wifi_cb+0x12>
		printf("wifi_cb: M2M_WIFI_RESP_PROVISION_INFO\r\n");
    51ea:	4819      	ldr	r0, [pc, #100]	; (5250 <wifi_cb+0xd4>)
    51ec:	4b0c      	ldr	r3, [pc, #48]	; (5220 <wifi_cb+0xa4>)
    51ee:	4798      	blx	r3
		if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    51f0:	2363      	movs	r3, #99	; 0x63
    51f2:	5ce3      	ldrb	r3, [r4, r3]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d003      	beq.n	5200 <wifi_cb+0x84>
			printf("wifi_cb: provision failed!\r\n");
    51f8:	4816      	ldr	r0, [pc, #88]	; (5254 <wifi_cb+0xd8>)
    51fa:	4b09      	ldr	r3, [pc, #36]	; (5220 <wifi_cb+0xa4>)
    51fc:	4798      	blx	r3
}
    51fe:	e7c6      	b.n	518e <wifi_cb+0x12>
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    5200:	0020      	movs	r0, r4
    5202:	4b15      	ldr	r3, [pc, #84]	; (5258 <wifi_cb+0xdc>)
    5204:	4798      	blx	r3
					pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    5206:	0023      	movs	r3, r4
    5208:	3321      	adds	r3, #33	; 0x21
			m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    520a:	2262      	movs	r2, #98	; 0x62
    520c:	5ca2      	ldrb	r2, [r4, r2]
    520e:	b2c1      	uxtb	r1, r0
    5210:	20ff      	movs	r0, #255	; 0xff
    5212:	9000      	str	r0, [sp, #0]
    5214:	0020      	movs	r0, r4
    5216:	4c08      	ldr	r4, [pc, #32]	; (5238 <wifi_cb+0xbc>)
    5218:	47a0      	blx	r4
    521a:	e7b8      	b.n	518e <wifi_cb+0x12>
    521c:	00008bb0 	.word	0x00008bb0
    5220:	000059f5 	.word	0x000059f5
    5224:	200008b4 	.word	0x200008b4
    5228:	00008bd0 	.word	0x00008bd0
    522c:	000058d9 	.word	0x000058d9
    5230:	00008be0 	.word	0x00008be0
    5234:	00008bec 	.word	0x00008bec
    5238:	000014dd 	.word	0x000014dd
    523c:	00008b90 	.word	0x00008b90
    5240:	00001529 	.word	0x00001529
    5244:	00008bf8 	.word	0x00008bf8
    5248:	00008c20 	.word	0x00008c20
    524c:	00003331 	.word	0x00003331
    5250:	00008c38 	.word	0x00008c38
    5254:	00008c60 	.word	0x00008c60
    5258:	00005bed 	.word	0x00005bed

0000525c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    525c:	b570      	push	{r4, r5, r6, lr}
    525e:	b082      	sub	sp, #8
    5260:	0005      	movs	r5, r0
    5262:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5264:	2200      	movs	r2, #0
    5266:	466b      	mov	r3, sp
    5268:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    526a:	4c06      	ldr	r4, [pc, #24]	; (5284 <usart_serial_getchar+0x28>)
    526c:	466b      	mov	r3, sp
    526e:	1d99      	adds	r1, r3, #6
    5270:	0028      	movs	r0, r5
    5272:	47a0      	blx	r4
    5274:	2800      	cmp	r0, #0
    5276:	d1f9      	bne.n	526c <usart_serial_getchar+0x10>

	*c = temp;
    5278:	466b      	mov	r3, sp
    527a:	3306      	adds	r3, #6
    527c:	881b      	ldrh	r3, [r3, #0]
    527e:	7033      	strb	r3, [r6, #0]
}
    5280:	b002      	add	sp, #8
    5282:	bd70      	pop	{r4, r5, r6, pc}
    5284:	00004341 	.word	0x00004341

00005288 <usart_serial_putchar>:
{
    5288:	b570      	push	{r4, r5, r6, lr}
    528a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    528c:	b28c      	uxth	r4, r1
    528e:	4e03      	ldr	r6, [pc, #12]	; (529c <usart_serial_putchar+0x14>)
    5290:	0021      	movs	r1, r4
    5292:	0028      	movs	r0, r5
    5294:	47b0      	blx	r6
    5296:	2800      	cmp	r0, #0
    5298:	d1fa      	bne.n	5290 <usart_serial_putchar+0x8>
}
    529a:	bd70      	pop	{r4, r5, r6, pc}
    529c:	00004315 	.word	0x00004315

000052a0 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
    52a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    52a2:	b0a1      	sub	sp, #132	; 0x84
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;

	/* Initialize the board. */
	system_init();
    52a4:	4b73      	ldr	r3, [pc, #460]	; (5474 <main+0x1d4>)
    52a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    52a8:	aa03      	add	r2, sp, #12
    52aa:	2380      	movs	r3, #128	; 0x80
    52ac:	05db      	lsls	r3, r3, #23
    52ae:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    52b0:	2300      	movs	r3, #0
    52b2:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    52b4:	21ff      	movs	r1, #255	; 0xff
    52b6:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    52b8:	2100      	movs	r1, #0
    52ba:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    52bc:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    52be:	2401      	movs	r4, #1
    52c0:	2024      	movs	r0, #36	; 0x24
    52c2:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    52c4:	3001      	adds	r0, #1
    52c6:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    52c8:	3001      	adds	r0, #1
    52ca:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    52cc:	3001      	adds	r0, #1
    52ce:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    52d0:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    52d2:	3005      	adds	r0, #5
    52d4:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    52d6:	3001      	adds	r0, #1
    52d8:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    52da:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    52dc:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    52de:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    52e0:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    52e2:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    52e4:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    52e6:	2313      	movs	r3, #19
    52e8:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    52ea:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    52ec:	2380      	movs	r3, #128	; 0x80
    52ee:	035b      	lsls	r3, r3, #13
    52f0:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    52f2:	4b61      	ldr	r3, [pc, #388]	; (5478 <main+0x1d8>)
    52f4:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    52f6:	4b61      	ldr	r3, [pc, #388]	; (547c <main+0x1dc>)
    52f8:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    52fa:	2301      	movs	r3, #1
    52fc:	425b      	negs	r3, r3
    52fe:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5300:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5302:	23e1      	movs	r3, #225	; 0xe1
    5304:	025b      	lsls	r3, r3, #9
    5306:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5308:	4d5d      	ldr	r5, [pc, #372]	; (5480 <main+0x1e0>)
    530a:	4b5e      	ldr	r3, [pc, #376]	; (5484 <main+0x1e4>)
    530c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    530e:	495e      	ldr	r1, [pc, #376]	; (5488 <main+0x1e8>)
    5310:	4b5e      	ldr	r3, [pc, #376]	; (548c <main+0x1ec>)
    5312:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5314:	495e      	ldr	r1, [pc, #376]	; (5490 <main+0x1f0>)
    5316:	4b5f      	ldr	r3, [pc, #380]	; (5494 <main+0x1f4>)
    5318:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    531a:	495f      	ldr	r1, [pc, #380]	; (5498 <main+0x1f8>)
    531c:	0028      	movs	r0, r5
    531e:	4b5f      	ldr	r3, [pc, #380]	; (549c <main+0x1fc>)
    5320:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5322:	4f5f      	ldr	r7, [pc, #380]	; (54a0 <main+0x200>)
    5324:	683b      	ldr	r3, [r7, #0]
    5326:	6898      	ldr	r0, [r3, #8]
    5328:	2100      	movs	r1, #0
    532a:	4e5e      	ldr	r6, [pc, #376]	; (54a4 <main+0x204>)
    532c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    532e:	683b      	ldr	r3, [r7, #0]
    5330:	6858      	ldr	r0, [r3, #4]
    5332:	2100      	movs	r1, #0
    5334:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5336:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5338:	0030      	movs	r0, r6
    533a:	4b5b      	ldr	r3, [pc, #364]	; (54a8 <main+0x208>)
    533c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    533e:	231f      	movs	r3, #31
    5340:	4018      	ands	r0, r3
    5342:	4084      	lsls	r4, r0
    5344:	4b59      	ldr	r3, [pc, #356]	; (54ac <main+0x20c>)
    5346:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5348:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    534a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    534c:	2b00      	cmp	r3, #0
    534e:	d1fc      	bne.n	534a <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5350:	6833      	ldr	r3, [r6, #0]
    5352:	2202      	movs	r2, #2
    5354:	4313      	orrs	r3, r2
    5356:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    5358:	4855      	ldr	r0, [pc, #340]	; (54b0 <main+0x210>)
    535a:	4b56      	ldr	r3, [pc, #344]	; (54b4 <main+0x214>)
    535c:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    535e:	4b56      	ldr	r3, [pc, #344]	; (54b8 <main+0x218>)
    5360:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    5362:	2218      	movs	r2, #24
    5364:	2100      	movs	r1, #0
    5366:	a81a      	add	r0, sp, #104	; 0x68
    5368:	4b54      	ldr	r3, [pc, #336]	; (54bc <main+0x21c>)
    536a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    536c:	4b54      	ldr	r3, [pc, #336]	; (54c0 <main+0x220>)
    536e:	931a      	str	r3, [sp, #104]	; 0x68
	ret = m2m_wifi_init(&param);
    5370:	a81a      	add	r0, sp, #104	; 0x68
    5372:	4b54      	ldr	r3, [pc, #336]	; (54c4 <main+0x224>)
    5374:	4798      	blx	r3
    5376:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    5378:	d003      	beq.n	5382 <main+0xe2>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    537a:	4853      	ldr	r0, [pc, #332]	; (54c8 <main+0x228>)
    537c:	4b53      	ldr	r3, [pc, #332]	; (54cc <main+0x22c>)
    537e:	4798      	blx	r3
    5380:	e7fe      	b.n	5380 <main+0xe0>
		while (1) {
		}
	}

	/* Initialize socket API. */
	socketInit();
    5382:	4b53      	ldr	r3, [pc, #332]	; (54d0 <main+0x230>)
    5384:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
    5386:	4953      	ldr	r1, [pc, #332]	; (54d4 <main+0x234>)
    5388:	4853      	ldr	r0, [pc, #332]	; (54d8 <main+0x238>)
    538a:	4b54      	ldr	r3, [pc, #336]	; (54dc <main+0x23c>)
    538c:	4798      	blx	r3

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    538e:	245f      	movs	r4, #95	; 0x5f
    5390:	446c      	add	r4, sp
    5392:	0021      	movs	r1, r4
    5394:	a818      	add	r0, sp, #96	; 0x60
    5396:	4b52      	ldr	r3, [pc, #328]	; (54e0 <main+0x240>)
    5398:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    539a:	7823      	ldrb	r3, [r4, #0]
    539c:	2b00      	cmp	r3, #0
    539e:	d02f      	beq.n	5400 <main+0x160>
		m2m_wifi_set_mac_address(gau8MacAddr);
	}

	/* Retrieve MAC address of the WINC and use it for AP name. */
	m2m_wifi_get_mac_address(gau8MacAddr);
    53a0:	4e50      	ldr	r6, [pc, #320]	; (54e4 <main+0x244>)
    53a2:	0030      	movs	r0, r6
    53a4:	4b50      	ldr	r3, [pc, #320]	; (54e8 <main+0x248>)
    53a6:	4798      	blx	r3
	set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
    53a8:	4d50      	ldr	r5, [pc, #320]	; (54ec <main+0x24c>)
    53aa:	0031      	movs	r1, r6
    53ac:	0028      	movs	r0, r5
    53ae:	4f50      	ldr	r7, [pc, #320]	; (54f0 <main+0x250>)
    53b0:	47b8      	blx	r7
	set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
    53b2:	4c50      	ldr	r4, [pc, #320]	; (54f4 <main+0x254>)
    53b4:	0031      	movs	r1, r6
    53b6:	0020      	movs	r0, r4
    53b8:	47b8      	blx	r7
	m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
    53ba:	0028      	movs	r0, r5
    53bc:	4b4e      	ldr	r3, [pc, #312]	; (54f8 <main+0x258>)
    53be:	4798      	blx	r3
    53c0:	b2c1      	uxtb	r1, r0
    53c2:	0028      	movs	r0, r5
    53c4:	4b4d      	ldr	r3, [pc, #308]	; (54fc <main+0x25c>)
    53c6:	4798      	blx	r3
	gstrM2MAPConfig.au8DHCPServerIP[0] = 0xC0; /* 192 */
    53c8:	22c0      	movs	r2, #192	; 0xc0
    53ca:	2341      	movs	r3, #65	; 0x41
    53cc:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[1] = 0xA8; /* 168 */
    53ce:	3a18      	subs	r2, #24
    53d0:	3301      	adds	r3, #1
    53d2:	54e2      	strb	r2, [r4, r3]
	gstrM2MAPConfig.au8DHCPServerIP[2] = 0x01; /* 1 */
    53d4:	3b41      	subs	r3, #65	; 0x41
    53d6:	3a65      	subs	r2, #101	; 0x65
    53d8:	54a3      	strb	r3, [r4, r2]
	gstrM2MAPConfig.au8DHCPServerIP[3] = 0x01; /* 1 */
    53da:	3201      	adds	r2, #1
    53dc:	54a3      	strb	r3, [r4, r2]

	/* Start web provisioning mode. */
	//m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
	m2m_wifi_connect(MAIN_M2M_SSID, sizeof(MAIN_M2M_SSID),MAIN_M2M_SEC,MAIN_M2M_PASSWORD, M2M_WIFI_CH_ALL);
    53de:	33fe      	adds	r3, #254	; 0xfe
    53e0:	9300      	str	r3, [sp, #0]
    53e2:	4b47      	ldr	r3, [pc, #284]	; (5500 <main+0x260>)
    53e4:	3a42      	subs	r2, #66	; 0x42
    53e6:	210c      	movs	r1, #12
    53e8:	4846      	ldr	r0, [pc, #280]	; (5504 <main+0x264>)
    53ea:	4d47      	ldr	r5, [pc, #284]	; (5508 <main+0x268>)
    53ec:	47a8      	blx	r5
	printf("\r\nProvision Mode started.\r\nConnect to [%s] via AP[%s] and fill up the page.\r\n\r\n",
    53ee:	0022      	movs	r2, r4
    53f0:	4946      	ldr	r1, [pc, #280]	; (550c <main+0x26c>)
    53f2:	4847      	ldr	r0, [pc, #284]	; (5510 <main+0x270>)
    53f4:	4b35      	ldr	r3, [pc, #212]	; (54cc <main+0x22c>)
    53f6:	4798      	blx	r3
			MAIN_HTTP_PROV_SERVER_DOMAIN_NAME, gstrM2MAPConfig.au8SSID);

	while (1) {
		m2m_wifi_handle_events(NULL);
    53f8:	4d46      	ldr	r5, [pc, #280]	; (5514 <main+0x274>)

		if (gbConnectedWifi && !gbTcpConnection) {
    53fa:	4c47      	ldr	r4, [pc, #284]	; (5518 <main+0x278>)
    53fc:	4e47      	ldr	r6, [pc, #284]	; (551c <main+0x27c>)
    53fe:	e013      	b.n	5428 <main+0x188>
		m2m_wifi_set_mac_address(gau8MacAddr);
    5400:	4838      	ldr	r0, [pc, #224]	; (54e4 <main+0x244>)
    5402:	4b47      	ldr	r3, [pc, #284]	; (5520 <main+0x280>)
    5404:	4798      	blx	r3
    5406:	e7cb      	b.n	53a0 <main+0x100>
			if (gbHostIpByName) {
				/* Open TCP client socket. */
				if (tcp_client_socket < 0) {
					if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    5408:	2200      	movs	r2, #0
    540a:	2101      	movs	r1, #1
    540c:	2002      	movs	r0, #2
    540e:	4b45      	ldr	r3, [pc, #276]	; (5524 <main+0x284>)
    5410:	4798      	blx	r3
    5412:	4b45      	ldr	r3, [pc, #276]	; (5528 <main+0x288>)
    5414:	7018      	strb	r0, [r3, #0]
    5416:	2800      	cmp	r0, #0
    5418:	da16      	bge.n	5448 <main+0x1a8>
						printf("main: failed to create TCP client socket error!\r\n");
    541a:	4844      	ldr	r0, [pc, #272]	; (552c <main+0x28c>)
    541c:	4b25      	ldr	r3, [pc, #148]	; (54b4 <main+0x214>)
    541e:	4798      	blx	r3
						continue;
    5420:	e002      	b.n	5428 <main+0x188>
				/* Connect TCP client socket. */
				addr_in.sin_family = AF_INET;
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
				addr_in.sin_addr.s_addr = gu32HostIp;
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
					printf("main: failed to connect socket error!\r\n");
    5422:	4843      	ldr	r0, [pc, #268]	; (5530 <main+0x290>)
    5424:	4b23      	ldr	r3, [pc, #140]	; (54b4 <main+0x214>)
    5426:	4798      	blx	r3
		m2m_wifi_handle_events(NULL);
    5428:	2000      	movs	r0, #0
    542a:	47a8      	blx	r5
		if (gbConnectedWifi && !gbTcpConnection) {
    542c:	7823      	ldrb	r3, [r4, #0]
    542e:	2b00      	cmp	r3, #0
    5430:	d0fa      	beq.n	5428 <main+0x188>
    5432:	7833      	ldrb	r3, [r6, #0]
    5434:	2b00      	cmp	r3, #0
    5436:	d1f7      	bne.n	5428 <main+0x188>
			if (gbHostIpByName) {
    5438:	4b3e      	ldr	r3, [pc, #248]	; (5534 <main+0x294>)
    543a:	781b      	ldrb	r3, [r3, #0]
    543c:	2b00      	cmp	r3, #0
    543e:	d0f3      	beq.n	5428 <main+0x188>
				if (tcp_client_socket < 0) {
    5440:	4b39      	ldr	r3, [pc, #228]	; (5528 <main+0x288>)
    5442:	781b      	ldrb	r3, [r3, #0]
    5444:	2b7f      	cmp	r3, #127	; 0x7f
    5446:	d8df      	bhi.n	5408 <main+0x168>
				addr_in.sin_family = AF_INET;
    5448:	a913      	add	r1, sp, #76	; 0x4c
    544a:	2302      	movs	r3, #2
    544c:	800b      	strh	r3, [r1, #0]
				addr_in.sin_port = _htons(MAIN_SERVER_PORT);
    544e:	23a0      	movs	r3, #160	; 0xa0
    5450:	01db      	lsls	r3, r3, #7
    5452:	804b      	strh	r3, [r1, #2]
				addr_in.sin_addr.s_addr = gu32HostIp;
    5454:	4b38      	ldr	r3, [pc, #224]	; (5538 <main+0x298>)
    5456:	681b      	ldr	r3, [r3, #0]
    5458:	604b      	str	r3, [r1, #4]
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    545a:	4b33      	ldr	r3, [pc, #204]	; (5528 <main+0x288>)
    545c:	2000      	movs	r0, #0
    545e:	5618      	ldrsb	r0, [r3, r0]
    5460:	2210      	movs	r2, #16
    5462:	4b36      	ldr	r3, [pc, #216]	; (553c <main+0x29c>)
    5464:	4798      	blx	r3
    5466:	2800      	cmp	r0, #0
    5468:	d1db      	bne.n	5422 <main+0x182>
					continue;
				}

				gbTcpConnection = true;
    546a:	2201      	movs	r2, #1
    546c:	4b2b      	ldr	r3, [pc, #172]	; (551c <main+0x27c>)
    546e:	701a      	strb	r2, [r3, #0]
    5470:	e7da      	b.n	5428 <main+0x188>
    5472:	46c0      	nop			; (mov r8, r8)
    5474:	00004cb5 	.word	0x00004cb5
    5478:	00160002 	.word	0x00160002
    547c:	00170002 	.word	0x00170002
    5480:	200002f4 	.word	0x200002f4
    5484:	20000a58 	.word	0x20000a58
    5488:	00005289 	.word	0x00005289
    548c:	20000a54 	.word	0x20000a54
    5490:	0000525d 	.word	0x0000525d
    5494:	20000a50 	.word	0x20000a50
    5498:	42001400 	.word	0x42001400
    549c:	00003fd1 	.word	0x00003fd1
    54a0:	200000b0 	.word	0x200000b0
    54a4:	00005a3d 	.word	0x00005a3d
    54a8:	00003aa5 	.word	0x00003aa5
    54ac:	e000e100 	.word	0xe000e100
    54b0:	000088b4 	.word	0x000088b4
    54b4:	000059f5 	.word	0x000059f5
    54b8:	00000195 	.word	0x00000195
    54bc:	000058c9 	.word	0x000058c9
    54c0:	0000517d 	.word	0x0000517d
    54c4:	0000110d 	.word	0x0000110d
    54c8:	0000891c 	.word	0x0000891c
    54cc:	000058d9 	.word	0x000058d9
    54d0:	00002efd 	.word	0x00002efd
    54d4:	00004e99 	.word	0x00004e99
    54d8:	00004f49 	.word	0x00004f49
    54dc:	00002f41 	.word	0x00002f41
    54e0:	0000152d 	.word	0x0000152d
    54e4:	2000001c 	.word	0x2000001c
    54e8:	0000155d 	.word	0x0000155d
    54ec:	2000000c 	.word	0x2000000c
    54f0:	00004ed9 	.word	0x00004ed9
    54f4:	20000024 	.word	0x20000024
    54f8:	0000059d 	.word	0x0000059d
    54fc:	00001589 	.word	0x00001589
    5500:	00008be0 	.word	0x00008be0
    5504:	00008bec 	.word	0x00008bec
    5508:	000014dd 	.word	0x000014dd
    550c:	00008944 	.word	0x00008944
    5510:	00008954 	.word	0x00008954
    5514:	00001241 	.word	0x00001241
    5518:	200008b4 	.word	0x200008b4
    551c:	200008b6 	.word	0x200008b6
    5520:	000014f9 	.word	0x000014f9
    5524:	00002f55 	.word	0x00002f55
    5528:	200000ac 	.word	0x200000ac
    552c:	000089a4 	.word	0x000089a4
    5530:	000089d8 	.word	0x000089d8
    5534:	200008b5 	.word	0x200008b5
    5538:	200008b8 	.word	0x200008b8
    553c:	000030d9 	.word	0x000030d9

00005540 <__udivsi3>:
    5540:	2200      	movs	r2, #0
    5542:	0843      	lsrs	r3, r0, #1
    5544:	428b      	cmp	r3, r1
    5546:	d374      	bcc.n	5632 <__udivsi3+0xf2>
    5548:	0903      	lsrs	r3, r0, #4
    554a:	428b      	cmp	r3, r1
    554c:	d35f      	bcc.n	560e <__udivsi3+0xce>
    554e:	0a03      	lsrs	r3, r0, #8
    5550:	428b      	cmp	r3, r1
    5552:	d344      	bcc.n	55de <__udivsi3+0x9e>
    5554:	0b03      	lsrs	r3, r0, #12
    5556:	428b      	cmp	r3, r1
    5558:	d328      	bcc.n	55ac <__udivsi3+0x6c>
    555a:	0c03      	lsrs	r3, r0, #16
    555c:	428b      	cmp	r3, r1
    555e:	d30d      	bcc.n	557c <__udivsi3+0x3c>
    5560:	22ff      	movs	r2, #255	; 0xff
    5562:	0209      	lsls	r1, r1, #8
    5564:	ba12      	rev	r2, r2
    5566:	0c03      	lsrs	r3, r0, #16
    5568:	428b      	cmp	r3, r1
    556a:	d302      	bcc.n	5572 <__udivsi3+0x32>
    556c:	1212      	asrs	r2, r2, #8
    556e:	0209      	lsls	r1, r1, #8
    5570:	d065      	beq.n	563e <__udivsi3+0xfe>
    5572:	0b03      	lsrs	r3, r0, #12
    5574:	428b      	cmp	r3, r1
    5576:	d319      	bcc.n	55ac <__udivsi3+0x6c>
    5578:	e000      	b.n	557c <__udivsi3+0x3c>
    557a:	0a09      	lsrs	r1, r1, #8
    557c:	0bc3      	lsrs	r3, r0, #15
    557e:	428b      	cmp	r3, r1
    5580:	d301      	bcc.n	5586 <__udivsi3+0x46>
    5582:	03cb      	lsls	r3, r1, #15
    5584:	1ac0      	subs	r0, r0, r3
    5586:	4152      	adcs	r2, r2
    5588:	0b83      	lsrs	r3, r0, #14
    558a:	428b      	cmp	r3, r1
    558c:	d301      	bcc.n	5592 <__udivsi3+0x52>
    558e:	038b      	lsls	r3, r1, #14
    5590:	1ac0      	subs	r0, r0, r3
    5592:	4152      	adcs	r2, r2
    5594:	0b43      	lsrs	r3, r0, #13
    5596:	428b      	cmp	r3, r1
    5598:	d301      	bcc.n	559e <__udivsi3+0x5e>
    559a:	034b      	lsls	r3, r1, #13
    559c:	1ac0      	subs	r0, r0, r3
    559e:	4152      	adcs	r2, r2
    55a0:	0b03      	lsrs	r3, r0, #12
    55a2:	428b      	cmp	r3, r1
    55a4:	d301      	bcc.n	55aa <__udivsi3+0x6a>
    55a6:	030b      	lsls	r3, r1, #12
    55a8:	1ac0      	subs	r0, r0, r3
    55aa:	4152      	adcs	r2, r2
    55ac:	0ac3      	lsrs	r3, r0, #11
    55ae:	428b      	cmp	r3, r1
    55b0:	d301      	bcc.n	55b6 <__udivsi3+0x76>
    55b2:	02cb      	lsls	r3, r1, #11
    55b4:	1ac0      	subs	r0, r0, r3
    55b6:	4152      	adcs	r2, r2
    55b8:	0a83      	lsrs	r3, r0, #10
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <__udivsi3+0x82>
    55be:	028b      	lsls	r3, r1, #10
    55c0:	1ac0      	subs	r0, r0, r3
    55c2:	4152      	adcs	r2, r2
    55c4:	0a43      	lsrs	r3, r0, #9
    55c6:	428b      	cmp	r3, r1
    55c8:	d301      	bcc.n	55ce <__udivsi3+0x8e>
    55ca:	024b      	lsls	r3, r1, #9
    55cc:	1ac0      	subs	r0, r0, r3
    55ce:	4152      	adcs	r2, r2
    55d0:	0a03      	lsrs	r3, r0, #8
    55d2:	428b      	cmp	r3, r1
    55d4:	d301      	bcc.n	55da <__udivsi3+0x9a>
    55d6:	020b      	lsls	r3, r1, #8
    55d8:	1ac0      	subs	r0, r0, r3
    55da:	4152      	adcs	r2, r2
    55dc:	d2cd      	bcs.n	557a <__udivsi3+0x3a>
    55de:	09c3      	lsrs	r3, r0, #7
    55e0:	428b      	cmp	r3, r1
    55e2:	d301      	bcc.n	55e8 <__udivsi3+0xa8>
    55e4:	01cb      	lsls	r3, r1, #7
    55e6:	1ac0      	subs	r0, r0, r3
    55e8:	4152      	adcs	r2, r2
    55ea:	0983      	lsrs	r3, r0, #6
    55ec:	428b      	cmp	r3, r1
    55ee:	d301      	bcc.n	55f4 <__udivsi3+0xb4>
    55f0:	018b      	lsls	r3, r1, #6
    55f2:	1ac0      	subs	r0, r0, r3
    55f4:	4152      	adcs	r2, r2
    55f6:	0943      	lsrs	r3, r0, #5
    55f8:	428b      	cmp	r3, r1
    55fa:	d301      	bcc.n	5600 <__udivsi3+0xc0>
    55fc:	014b      	lsls	r3, r1, #5
    55fe:	1ac0      	subs	r0, r0, r3
    5600:	4152      	adcs	r2, r2
    5602:	0903      	lsrs	r3, r0, #4
    5604:	428b      	cmp	r3, r1
    5606:	d301      	bcc.n	560c <__udivsi3+0xcc>
    5608:	010b      	lsls	r3, r1, #4
    560a:	1ac0      	subs	r0, r0, r3
    560c:	4152      	adcs	r2, r2
    560e:	08c3      	lsrs	r3, r0, #3
    5610:	428b      	cmp	r3, r1
    5612:	d301      	bcc.n	5618 <__udivsi3+0xd8>
    5614:	00cb      	lsls	r3, r1, #3
    5616:	1ac0      	subs	r0, r0, r3
    5618:	4152      	adcs	r2, r2
    561a:	0883      	lsrs	r3, r0, #2
    561c:	428b      	cmp	r3, r1
    561e:	d301      	bcc.n	5624 <__udivsi3+0xe4>
    5620:	008b      	lsls	r3, r1, #2
    5622:	1ac0      	subs	r0, r0, r3
    5624:	4152      	adcs	r2, r2
    5626:	0843      	lsrs	r3, r0, #1
    5628:	428b      	cmp	r3, r1
    562a:	d301      	bcc.n	5630 <__udivsi3+0xf0>
    562c:	004b      	lsls	r3, r1, #1
    562e:	1ac0      	subs	r0, r0, r3
    5630:	4152      	adcs	r2, r2
    5632:	1a41      	subs	r1, r0, r1
    5634:	d200      	bcs.n	5638 <__udivsi3+0xf8>
    5636:	4601      	mov	r1, r0
    5638:	4152      	adcs	r2, r2
    563a:	4610      	mov	r0, r2
    563c:	4770      	bx	lr
    563e:	e7ff      	b.n	5640 <__udivsi3+0x100>
    5640:	b501      	push	{r0, lr}
    5642:	2000      	movs	r0, #0
    5644:	f000 f8f0 	bl	5828 <__aeabi_idiv0>
    5648:	bd02      	pop	{r1, pc}
    564a:	46c0      	nop			; (mov r8, r8)

0000564c <__aeabi_uidivmod>:
    564c:	2900      	cmp	r1, #0
    564e:	d0f7      	beq.n	5640 <__udivsi3+0x100>
    5650:	e776      	b.n	5540 <__udivsi3>
    5652:	4770      	bx	lr

00005654 <__divsi3>:
    5654:	4603      	mov	r3, r0
    5656:	430b      	orrs	r3, r1
    5658:	d47f      	bmi.n	575a <__divsi3+0x106>
    565a:	2200      	movs	r2, #0
    565c:	0843      	lsrs	r3, r0, #1
    565e:	428b      	cmp	r3, r1
    5660:	d374      	bcc.n	574c <__divsi3+0xf8>
    5662:	0903      	lsrs	r3, r0, #4
    5664:	428b      	cmp	r3, r1
    5666:	d35f      	bcc.n	5728 <__divsi3+0xd4>
    5668:	0a03      	lsrs	r3, r0, #8
    566a:	428b      	cmp	r3, r1
    566c:	d344      	bcc.n	56f8 <__divsi3+0xa4>
    566e:	0b03      	lsrs	r3, r0, #12
    5670:	428b      	cmp	r3, r1
    5672:	d328      	bcc.n	56c6 <__divsi3+0x72>
    5674:	0c03      	lsrs	r3, r0, #16
    5676:	428b      	cmp	r3, r1
    5678:	d30d      	bcc.n	5696 <__divsi3+0x42>
    567a:	22ff      	movs	r2, #255	; 0xff
    567c:	0209      	lsls	r1, r1, #8
    567e:	ba12      	rev	r2, r2
    5680:	0c03      	lsrs	r3, r0, #16
    5682:	428b      	cmp	r3, r1
    5684:	d302      	bcc.n	568c <__divsi3+0x38>
    5686:	1212      	asrs	r2, r2, #8
    5688:	0209      	lsls	r1, r1, #8
    568a:	d065      	beq.n	5758 <__divsi3+0x104>
    568c:	0b03      	lsrs	r3, r0, #12
    568e:	428b      	cmp	r3, r1
    5690:	d319      	bcc.n	56c6 <__divsi3+0x72>
    5692:	e000      	b.n	5696 <__divsi3+0x42>
    5694:	0a09      	lsrs	r1, r1, #8
    5696:	0bc3      	lsrs	r3, r0, #15
    5698:	428b      	cmp	r3, r1
    569a:	d301      	bcc.n	56a0 <__divsi3+0x4c>
    569c:	03cb      	lsls	r3, r1, #15
    569e:	1ac0      	subs	r0, r0, r3
    56a0:	4152      	adcs	r2, r2
    56a2:	0b83      	lsrs	r3, r0, #14
    56a4:	428b      	cmp	r3, r1
    56a6:	d301      	bcc.n	56ac <__divsi3+0x58>
    56a8:	038b      	lsls	r3, r1, #14
    56aa:	1ac0      	subs	r0, r0, r3
    56ac:	4152      	adcs	r2, r2
    56ae:	0b43      	lsrs	r3, r0, #13
    56b0:	428b      	cmp	r3, r1
    56b2:	d301      	bcc.n	56b8 <__divsi3+0x64>
    56b4:	034b      	lsls	r3, r1, #13
    56b6:	1ac0      	subs	r0, r0, r3
    56b8:	4152      	adcs	r2, r2
    56ba:	0b03      	lsrs	r3, r0, #12
    56bc:	428b      	cmp	r3, r1
    56be:	d301      	bcc.n	56c4 <__divsi3+0x70>
    56c0:	030b      	lsls	r3, r1, #12
    56c2:	1ac0      	subs	r0, r0, r3
    56c4:	4152      	adcs	r2, r2
    56c6:	0ac3      	lsrs	r3, r0, #11
    56c8:	428b      	cmp	r3, r1
    56ca:	d301      	bcc.n	56d0 <__divsi3+0x7c>
    56cc:	02cb      	lsls	r3, r1, #11
    56ce:	1ac0      	subs	r0, r0, r3
    56d0:	4152      	adcs	r2, r2
    56d2:	0a83      	lsrs	r3, r0, #10
    56d4:	428b      	cmp	r3, r1
    56d6:	d301      	bcc.n	56dc <__divsi3+0x88>
    56d8:	028b      	lsls	r3, r1, #10
    56da:	1ac0      	subs	r0, r0, r3
    56dc:	4152      	adcs	r2, r2
    56de:	0a43      	lsrs	r3, r0, #9
    56e0:	428b      	cmp	r3, r1
    56e2:	d301      	bcc.n	56e8 <__divsi3+0x94>
    56e4:	024b      	lsls	r3, r1, #9
    56e6:	1ac0      	subs	r0, r0, r3
    56e8:	4152      	adcs	r2, r2
    56ea:	0a03      	lsrs	r3, r0, #8
    56ec:	428b      	cmp	r3, r1
    56ee:	d301      	bcc.n	56f4 <__divsi3+0xa0>
    56f0:	020b      	lsls	r3, r1, #8
    56f2:	1ac0      	subs	r0, r0, r3
    56f4:	4152      	adcs	r2, r2
    56f6:	d2cd      	bcs.n	5694 <__divsi3+0x40>
    56f8:	09c3      	lsrs	r3, r0, #7
    56fa:	428b      	cmp	r3, r1
    56fc:	d301      	bcc.n	5702 <__divsi3+0xae>
    56fe:	01cb      	lsls	r3, r1, #7
    5700:	1ac0      	subs	r0, r0, r3
    5702:	4152      	adcs	r2, r2
    5704:	0983      	lsrs	r3, r0, #6
    5706:	428b      	cmp	r3, r1
    5708:	d301      	bcc.n	570e <__divsi3+0xba>
    570a:	018b      	lsls	r3, r1, #6
    570c:	1ac0      	subs	r0, r0, r3
    570e:	4152      	adcs	r2, r2
    5710:	0943      	lsrs	r3, r0, #5
    5712:	428b      	cmp	r3, r1
    5714:	d301      	bcc.n	571a <__divsi3+0xc6>
    5716:	014b      	lsls	r3, r1, #5
    5718:	1ac0      	subs	r0, r0, r3
    571a:	4152      	adcs	r2, r2
    571c:	0903      	lsrs	r3, r0, #4
    571e:	428b      	cmp	r3, r1
    5720:	d301      	bcc.n	5726 <__divsi3+0xd2>
    5722:	010b      	lsls	r3, r1, #4
    5724:	1ac0      	subs	r0, r0, r3
    5726:	4152      	adcs	r2, r2
    5728:	08c3      	lsrs	r3, r0, #3
    572a:	428b      	cmp	r3, r1
    572c:	d301      	bcc.n	5732 <__divsi3+0xde>
    572e:	00cb      	lsls	r3, r1, #3
    5730:	1ac0      	subs	r0, r0, r3
    5732:	4152      	adcs	r2, r2
    5734:	0883      	lsrs	r3, r0, #2
    5736:	428b      	cmp	r3, r1
    5738:	d301      	bcc.n	573e <__divsi3+0xea>
    573a:	008b      	lsls	r3, r1, #2
    573c:	1ac0      	subs	r0, r0, r3
    573e:	4152      	adcs	r2, r2
    5740:	0843      	lsrs	r3, r0, #1
    5742:	428b      	cmp	r3, r1
    5744:	d301      	bcc.n	574a <__divsi3+0xf6>
    5746:	004b      	lsls	r3, r1, #1
    5748:	1ac0      	subs	r0, r0, r3
    574a:	4152      	adcs	r2, r2
    574c:	1a41      	subs	r1, r0, r1
    574e:	d200      	bcs.n	5752 <__divsi3+0xfe>
    5750:	4601      	mov	r1, r0
    5752:	4152      	adcs	r2, r2
    5754:	4610      	mov	r0, r2
    5756:	4770      	bx	lr
    5758:	e05d      	b.n	5816 <__divsi3+0x1c2>
    575a:	0fca      	lsrs	r2, r1, #31
    575c:	d000      	beq.n	5760 <__divsi3+0x10c>
    575e:	4249      	negs	r1, r1
    5760:	1003      	asrs	r3, r0, #32
    5762:	d300      	bcc.n	5766 <__divsi3+0x112>
    5764:	4240      	negs	r0, r0
    5766:	4053      	eors	r3, r2
    5768:	2200      	movs	r2, #0
    576a:	469c      	mov	ip, r3
    576c:	0903      	lsrs	r3, r0, #4
    576e:	428b      	cmp	r3, r1
    5770:	d32d      	bcc.n	57ce <__divsi3+0x17a>
    5772:	0a03      	lsrs	r3, r0, #8
    5774:	428b      	cmp	r3, r1
    5776:	d312      	bcc.n	579e <__divsi3+0x14a>
    5778:	22fc      	movs	r2, #252	; 0xfc
    577a:	0189      	lsls	r1, r1, #6
    577c:	ba12      	rev	r2, r2
    577e:	0a03      	lsrs	r3, r0, #8
    5780:	428b      	cmp	r3, r1
    5782:	d30c      	bcc.n	579e <__divsi3+0x14a>
    5784:	0189      	lsls	r1, r1, #6
    5786:	1192      	asrs	r2, r2, #6
    5788:	428b      	cmp	r3, r1
    578a:	d308      	bcc.n	579e <__divsi3+0x14a>
    578c:	0189      	lsls	r1, r1, #6
    578e:	1192      	asrs	r2, r2, #6
    5790:	428b      	cmp	r3, r1
    5792:	d304      	bcc.n	579e <__divsi3+0x14a>
    5794:	0189      	lsls	r1, r1, #6
    5796:	d03a      	beq.n	580e <__divsi3+0x1ba>
    5798:	1192      	asrs	r2, r2, #6
    579a:	e000      	b.n	579e <__divsi3+0x14a>
    579c:	0989      	lsrs	r1, r1, #6
    579e:	09c3      	lsrs	r3, r0, #7
    57a0:	428b      	cmp	r3, r1
    57a2:	d301      	bcc.n	57a8 <__divsi3+0x154>
    57a4:	01cb      	lsls	r3, r1, #7
    57a6:	1ac0      	subs	r0, r0, r3
    57a8:	4152      	adcs	r2, r2
    57aa:	0983      	lsrs	r3, r0, #6
    57ac:	428b      	cmp	r3, r1
    57ae:	d301      	bcc.n	57b4 <__divsi3+0x160>
    57b0:	018b      	lsls	r3, r1, #6
    57b2:	1ac0      	subs	r0, r0, r3
    57b4:	4152      	adcs	r2, r2
    57b6:	0943      	lsrs	r3, r0, #5
    57b8:	428b      	cmp	r3, r1
    57ba:	d301      	bcc.n	57c0 <__divsi3+0x16c>
    57bc:	014b      	lsls	r3, r1, #5
    57be:	1ac0      	subs	r0, r0, r3
    57c0:	4152      	adcs	r2, r2
    57c2:	0903      	lsrs	r3, r0, #4
    57c4:	428b      	cmp	r3, r1
    57c6:	d301      	bcc.n	57cc <__divsi3+0x178>
    57c8:	010b      	lsls	r3, r1, #4
    57ca:	1ac0      	subs	r0, r0, r3
    57cc:	4152      	adcs	r2, r2
    57ce:	08c3      	lsrs	r3, r0, #3
    57d0:	428b      	cmp	r3, r1
    57d2:	d301      	bcc.n	57d8 <__divsi3+0x184>
    57d4:	00cb      	lsls	r3, r1, #3
    57d6:	1ac0      	subs	r0, r0, r3
    57d8:	4152      	adcs	r2, r2
    57da:	0883      	lsrs	r3, r0, #2
    57dc:	428b      	cmp	r3, r1
    57de:	d301      	bcc.n	57e4 <__divsi3+0x190>
    57e0:	008b      	lsls	r3, r1, #2
    57e2:	1ac0      	subs	r0, r0, r3
    57e4:	4152      	adcs	r2, r2
    57e6:	d2d9      	bcs.n	579c <__divsi3+0x148>
    57e8:	0843      	lsrs	r3, r0, #1
    57ea:	428b      	cmp	r3, r1
    57ec:	d301      	bcc.n	57f2 <__divsi3+0x19e>
    57ee:	004b      	lsls	r3, r1, #1
    57f0:	1ac0      	subs	r0, r0, r3
    57f2:	4152      	adcs	r2, r2
    57f4:	1a41      	subs	r1, r0, r1
    57f6:	d200      	bcs.n	57fa <__divsi3+0x1a6>
    57f8:	4601      	mov	r1, r0
    57fa:	4663      	mov	r3, ip
    57fc:	4152      	adcs	r2, r2
    57fe:	105b      	asrs	r3, r3, #1
    5800:	4610      	mov	r0, r2
    5802:	d301      	bcc.n	5808 <__divsi3+0x1b4>
    5804:	4240      	negs	r0, r0
    5806:	2b00      	cmp	r3, #0
    5808:	d500      	bpl.n	580c <__divsi3+0x1b8>
    580a:	4249      	negs	r1, r1
    580c:	4770      	bx	lr
    580e:	4663      	mov	r3, ip
    5810:	105b      	asrs	r3, r3, #1
    5812:	d300      	bcc.n	5816 <__divsi3+0x1c2>
    5814:	4240      	negs	r0, r0
    5816:	b501      	push	{r0, lr}
    5818:	2000      	movs	r0, #0
    581a:	f000 f805 	bl	5828 <__aeabi_idiv0>
    581e:	bd02      	pop	{r1, pc}

00005820 <__aeabi_idivmod>:
    5820:	2900      	cmp	r1, #0
    5822:	d0f8      	beq.n	5816 <__divsi3+0x1c2>
    5824:	e716      	b.n	5654 <__divsi3>
    5826:	4770      	bx	lr

00005828 <__aeabi_idiv0>:
    5828:	4770      	bx	lr
    582a:	46c0      	nop			; (mov r8, r8)

0000582c <__aeabi_lmul>:
    582c:	b5f0      	push	{r4, r5, r6, r7, lr}
    582e:	46ce      	mov	lr, r9
    5830:	4647      	mov	r7, r8
    5832:	0415      	lsls	r5, r2, #16
    5834:	0c2d      	lsrs	r5, r5, #16
    5836:	002e      	movs	r6, r5
    5838:	b580      	push	{r7, lr}
    583a:	0407      	lsls	r7, r0, #16
    583c:	0c14      	lsrs	r4, r2, #16
    583e:	0c3f      	lsrs	r7, r7, #16
    5840:	4699      	mov	r9, r3
    5842:	0c03      	lsrs	r3, r0, #16
    5844:	437e      	muls	r6, r7
    5846:	435d      	muls	r5, r3
    5848:	4367      	muls	r7, r4
    584a:	4363      	muls	r3, r4
    584c:	197f      	adds	r7, r7, r5
    584e:	0c34      	lsrs	r4, r6, #16
    5850:	19e4      	adds	r4, r4, r7
    5852:	469c      	mov	ip, r3
    5854:	42a5      	cmp	r5, r4
    5856:	d903      	bls.n	5860 <__aeabi_lmul+0x34>
    5858:	2380      	movs	r3, #128	; 0x80
    585a:	025b      	lsls	r3, r3, #9
    585c:	4698      	mov	r8, r3
    585e:	44c4      	add	ip, r8
    5860:	464b      	mov	r3, r9
    5862:	4351      	muls	r1, r2
    5864:	4343      	muls	r3, r0
    5866:	0436      	lsls	r6, r6, #16
    5868:	0c36      	lsrs	r6, r6, #16
    586a:	0c25      	lsrs	r5, r4, #16
    586c:	0424      	lsls	r4, r4, #16
    586e:	4465      	add	r5, ip
    5870:	19a4      	adds	r4, r4, r6
    5872:	1859      	adds	r1, r3, r1
    5874:	1949      	adds	r1, r1, r5
    5876:	0020      	movs	r0, r4
    5878:	bc0c      	pop	{r2, r3}
    587a:	4690      	mov	r8, r2
    587c:	4699      	mov	r9, r3
    587e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005880 <__libc_init_array>:
    5880:	b570      	push	{r4, r5, r6, lr}
    5882:	2600      	movs	r6, #0
    5884:	4d0c      	ldr	r5, [pc, #48]	; (58b8 <__libc_init_array+0x38>)
    5886:	4c0d      	ldr	r4, [pc, #52]	; (58bc <__libc_init_array+0x3c>)
    5888:	1b64      	subs	r4, r4, r5
    588a:	10a4      	asrs	r4, r4, #2
    588c:	42a6      	cmp	r6, r4
    588e:	d109      	bne.n	58a4 <__libc_init_array+0x24>
    5890:	2600      	movs	r6, #0
    5892:	f003 fad9 	bl	8e48 <_init>
    5896:	4d0a      	ldr	r5, [pc, #40]	; (58c0 <__libc_init_array+0x40>)
    5898:	4c0a      	ldr	r4, [pc, #40]	; (58c4 <__libc_init_array+0x44>)
    589a:	1b64      	subs	r4, r4, r5
    589c:	10a4      	asrs	r4, r4, #2
    589e:	42a6      	cmp	r6, r4
    58a0:	d105      	bne.n	58ae <__libc_init_array+0x2e>
    58a2:	bd70      	pop	{r4, r5, r6, pc}
    58a4:	00b3      	lsls	r3, r6, #2
    58a6:	58eb      	ldr	r3, [r5, r3]
    58a8:	4798      	blx	r3
    58aa:	3601      	adds	r6, #1
    58ac:	e7ee      	b.n	588c <__libc_init_array+0xc>
    58ae:	00b3      	lsls	r3, r6, #2
    58b0:	58eb      	ldr	r3, [r5, r3]
    58b2:	4798      	blx	r3
    58b4:	3601      	adds	r6, #1
    58b6:	e7f2      	b.n	589e <__libc_init_array+0x1e>
    58b8:	00008e54 	.word	0x00008e54
    58bc:	00008e54 	.word	0x00008e54
    58c0:	00008e54 	.word	0x00008e54
    58c4:	00008e58 	.word	0x00008e58

000058c8 <memset>:
    58c8:	0003      	movs	r3, r0
    58ca:	1882      	adds	r2, r0, r2
    58cc:	4293      	cmp	r3, r2
    58ce:	d100      	bne.n	58d2 <memset+0xa>
    58d0:	4770      	bx	lr
    58d2:	7019      	strb	r1, [r3, #0]
    58d4:	3301      	adds	r3, #1
    58d6:	e7f9      	b.n	58cc <memset+0x4>

000058d8 <iprintf>:
    58d8:	b40f      	push	{r0, r1, r2, r3}
    58da:	4b0b      	ldr	r3, [pc, #44]	; (5908 <iprintf+0x30>)
    58dc:	b513      	push	{r0, r1, r4, lr}
    58de:	681c      	ldr	r4, [r3, #0]
    58e0:	2c00      	cmp	r4, #0
    58e2:	d005      	beq.n	58f0 <iprintf+0x18>
    58e4:	69a3      	ldr	r3, [r4, #24]
    58e6:	2b00      	cmp	r3, #0
    58e8:	d102      	bne.n	58f0 <iprintf+0x18>
    58ea:	0020      	movs	r0, r4
    58ec:	f000 fb76 	bl	5fdc <__sinit>
    58f0:	ab05      	add	r3, sp, #20
    58f2:	9a04      	ldr	r2, [sp, #16]
    58f4:	68a1      	ldr	r1, [r4, #8]
    58f6:	0020      	movs	r0, r4
    58f8:	9301      	str	r3, [sp, #4]
    58fa:	f000 fec7 	bl	668c <_vfiprintf_r>
    58fe:	bc16      	pop	{r1, r2, r4}
    5900:	bc08      	pop	{r3}
    5902:	b004      	add	sp, #16
    5904:	4718      	bx	r3
    5906:	46c0      	nop			; (mov r8, r8)
    5908:	200000b0 	.word	0x200000b0

0000590c <putchar>:
    590c:	4b08      	ldr	r3, [pc, #32]	; (5930 <putchar+0x24>)
    590e:	b570      	push	{r4, r5, r6, lr}
    5910:	681c      	ldr	r4, [r3, #0]
    5912:	0005      	movs	r5, r0
    5914:	2c00      	cmp	r4, #0
    5916:	d005      	beq.n	5924 <putchar+0x18>
    5918:	69a3      	ldr	r3, [r4, #24]
    591a:	2b00      	cmp	r3, #0
    591c:	d102      	bne.n	5924 <putchar+0x18>
    591e:	0020      	movs	r0, r4
    5920:	f000 fb5c 	bl	5fdc <__sinit>
    5924:	0029      	movs	r1, r5
    5926:	68a2      	ldr	r2, [r4, #8]
    5928:	0020      	movs	r0, r4
    592a:	f001 fc65 	bl	71f8 <_putc_r>
    592e:	bd70      	pop	{r4, r5, r6, pc}
    5930:	200000b0 	.word	0x200000b0

00005934 <_puts_r>:
    5934:	b570      	push	{r4, r5, r6, lr}
    5936:	0005      	movs	r5, r0
    5938:	000e      	movs	r6, r1
    593a:	2800      	cmp	r0, #0
    593c:	d004      	beq.n	5948 <_puts_r+0x14>
    593e:	6983      	ldr	r3, [r0, #24]
    5940:	2b00      	cmp	r3, #0
    5942:	d101      	bne.n	5948 <_puts_r+0x14>
    5944:	f000 fb4a 	bl	5fdc <__sinit>
    5948:	69ab      	ldr	r3, [r5, #24]
    594a:	68ac      	ldr	r4, [r5, #8]
    594c:	2b00      	cmp	r3, #0
    594e:	d102      	bne.n	5956 <_puts_r+0x22>
    5950:	0028      	movs	r0, r5
    5952:	f000 fb43 	bl	5fdc <__sinit>
    5956:	4b24      	ldr	r3, [pc, #144]	; (59e8 <_puts_r+0xb4>)
    5958:	429c      	cmp	r4, r3
    595a:	d10f      	bne.n	597c <_puts_r+0x48>
    595c:	686c      	ldr	r4, [r5, #4]
    595e:	89a3      	ldrh	r3, [r4, #12]
    5960:	071b      	lsls	r3, r3, #28
    5962:	d502      	bpl.n	596a <_puts_r+0x36>
    5964:	6923      	ldr	r3, [r4, #16]
    5966:	2b00      	cmp	r3, #0
    5968:	d120      	bne.n	59ac <_puts_r+0x78>
    596a:	0021      	movs	r1, r4
    596c:	0028      	movs	r0, r5
    596e:	f000 f9b3 	bl	5cd8 <__swsetup_r>
    5972:	2800      	cmp	r0, #0
    5974:	d01a      	beq.n	59ac <_puts_r+0x78>
    5976:	2001      	movs	r0, #1
    5978:	4240      	negs	r0, r0
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	4b1b      	ldr	r3, [pc, #108]	; (59ec <_puts_r+0xb8>)
    597e:	429c      	cmp	r4, r3
    5980:	d101      	bne.n	5986 <_puts_r+0x52>
    5982:	68ac      	ldr	r4, [r5, #8]
    5984:	e7eb      	b.n	595e <_puts_r+0x2a>
    5986:	4b1a      	ldr	r3, [pc, #104]	; (59f0 <_puts_r+0xbc>)
    5988:	429c      	cmp	r4, r3
    598a:	d1e8      	bne.n	595e <_puts_r+0x2a>
    598c:	68ec      	ldr	r4, [r5, #12]
    598e:	e7e6      	b.n	595e <_puts_r+0x2a>
    5990:	3b01      	subs	r3, #1
    5992:	3601      	adds	r6, #1
    5994:	60a3      	str	r3, [r4, #8]
    5996:	2b00      	cmp	r3, #0
    5998:	da04      	bge.n	59a4 <_puts_r+0x70>
    599a:	69a2      	ldr	r2, [r4, #24]
    599c:	4293      	cmp	r3, r2
    599e:	db16      	blt.n	59ce <_puts_r+0x9a>
    59a0:	290a      	cmp	r1, #10
    59a2:	d014      	beq.n	59ce <_puts_r+0x9a>
    59a4:	6823      	ldr	r3, [r4, #0]
    59a6:	1c5a      	adds	r2, r3, #1
    59a8:	6022      	str	r2, [r4, #0]
    59aa:	7019      	strb	r1, [r3, #0]
    59ac:	7831      	ldrb	r1, [r6, #0]
    59ae:	68a3      	ldr	r3, [r4, #8]
    59b0:	2900      	cmp	r1, #0
    59b2:	d1ed      	bne.n	5990 <_puts_r+0x5c>
    59b4:	3b01      	subs	r3, #1
    59b6:	60a3      	str	r3, [r4, #8]
    59b8:	2b00      	cmp	r3, #0
    59ba:	da0f      	bge.n	59dc <_puts_r+0xa8>
    59bc:	0022      	movs	r2, r4
    59be:	310a      	adds	r1, #10
    59c0:	0028      	movs	r0, r5
    59c2:	f000 f933 	bl	5c2c <__swbuf_r>
    59c6:	1c43      	adds	r3, r0, #1
    59c8:	d0d5      	beq.n	5976 <_puts_r+0x42>
    59ca:	200a      	movs	r0, #10
    59cc:	e7d5      	b.n	597a <_puts_r+0x46>
    59ce:	0022      	movs	r2, r4
    59d0:	0028      	movs	r0, r5
    59d2:	f000 f92b 	bl	5c2c <__swbuf_r>
    59d6:	1c43      	adds	r3, r0, #1
    59d8:	d1e8      	bne.n	59ac <_puts_r+0x78>
    59da:	e7cc      	b.n	5976 <_puts_r+0x42>
    59dc:	200a      	movs	r0, #10
    59de:	6823      	ldr	r3, [r4, #0]
    59e0:	1c5a      	adds	r2, r3, #1
    59e2:	6022      	str	r2, [r4, #0]
    59e4:	7018      	strb	r0, [r3, #0]
    59e6:	e7c8      	b.n	597a <_puts_r+0x46>
    59e8:	00008ca0 	.word	0x00008ca0
    59ec:	00008cc0 	.word	0x00008cc0
    59f0:	00008c80 	.word	0x00008c80

000059f4 <puts>:
    59f4:	b510      	push	{r4, lr}
    59f6:	4b03      	ldr	r3, [pc, #12]	; (5a04 <puts+0x10>)
    59f8:	0001      	movs	r1, r0
    59fa:	6818      	ldr	r0, [r3, #0]
    59fc:	f7ff ff9a 	bl	5934 <_puts_r>
    5a00:	bd10      	pop	{r4, pc}
    5a02:	46c0      	nop			; (mov r8, r8)
    5a04:	200000b0 	.word	0x200000b0

00005a08 <iscanf>:
    5a08:	b40f      	push	{r0, r1, r2, r3}
    5a0a:	4b0b      	ldr	r3, [pc, #44]	; (5a38 <iscanf+0x30>)
    5a0c:	b513      	push	{r0, r1, r4, lr}
    5a0e:	681c      	ldr	r4, [r3, #0]
    5a10:	2c00      	cmp	r4, #0
    5a12:	d005      	beq.n	5a20 <iscanf+0x18>
    5a14:	69a3      	ldr	r3, [r4, #24]
    5a16:	2b00      	cmp	r3, #0
    5a18:	d102      	bne.n	5a20 <iscanf+0x18>
    5a1a:	0020      	movs	r0, r4
    5a1c:	f000 fade 	bl	5fdc <__sinit>
    5a20:	ab05      	add	r3, sp, #20
    5a22:	9a04      	ldr	r2, [sp, #16]
    5a24:	6861      	ldr	r1, [r4, #4]
    5a26:	0020      	movs	r0, r4
    5a28:	9301      	str	r3, [sp, #4]
    5a2a:	f001 fa59 	bl	6ee0 <_vfiscanf_r>
    5a2e:	bc16      	pop	{r1, r2, r4}
    5a30:	bc08      	pop	{r3}
    5a32:	b004      	add	sp, #16
    5a34:	4718      	bx	r3
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	200000b0 	.word	0x200000b0

00005a3c <setbuf>:
    5a3c:	424a      	negs	r2, r1
    5a3e:	414a      	adcs	r2, r1
    5a40:	2380      	movs	r3, #128	; 0x80
    5a42:	b510      	push	{r4, lr}
    5a44:	0052      	lsls	r2, r2, #1
    5a46:	00db      	lsls	r3, r3, #3
    5a48:	f000 f802 	bl	5a50 <setvbuf>
    5a4c:	bd10      	pop	{r4, pc}
	...

00005a50 <setvbuf>:
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a52:	001d      	movs	r5, r3
    5a54:	4b4f      	ldr	r3, [pc, #316]	; (5b94 <setvbuf+0x144>)
    5a56:	b085      	sub	sp, #20
    5a58:	681e      	ldr	r6, [r3, #0]
    5a5a:	0004      	movs	r4, r0
    5a5c:	000f      	movs	r7, r1
    5a5e:	9200      	str	r2, [sp, #0]
    5a60:	2e00      	cmp	r6, #0
    5a62:	d005      	beq.n	5a70 <setvbuf+0x20>
    5a64:	69b3      	ldr	r3, [r6, #24]
    5a66:	2b00      	cmp	r3, #0
    5a68:	d102      	bne.n	5a70 <setvbuf+0x20>
    5a6a:	0030      	movs	r0, r6
    5a6c:	f000 fab6 	bl	5fdc <__sinit>
    5a70:	4b49      	ldr	r3, [pc, #292]	; (5b98 <setvbuf+0x148>)
    5a72:	429c      	cmp	r4, r3
    5a74:	d150      	bne.n	5b18 <setvbuf+0xc8>
    5a76:	6874      	ldr	r4, [r6, #4]
    5a78:	9b00      	ldr	r3, [sp, #0]
    5a7a:	2b02      	cmp	r3, #2
    5a7c:	d005      	beq.n	5a8a <setvbuf+0x3a>
    5a7e:	2b01      	cmp	r3, #1
    5a80:	d900      	bls.n	5a84 <setvbuf+0x34>
    5a82:	e084      	b.n	5b8e <setvbuf+0x13e>
    5a84:	2d00      	cmp	r5, #0
    5a86:	da00      	bge.n	5a8a <setvbuf+0x3a>
    5a88:	e081      	b.n	5b8e <setvbuf+0x13e>
    5a8a:	0021      	movs	r1, r4
    5a8c:	0030      	movs	r0, r6
    5a8e:	f000 fa23 	bl	5ed8 <_fflush_r>
    5a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5a94:	2900      	cmp	r1, #0
    5a96:	d008      	beq.n	5aaa <setvbuf+0x5a>
    5a98:	0023      	movs	r3, r4
    5a9a:	3344      	adds	r3, #68	; 0x44
    5a9c:	4299      	cmp	r1, r3
    5a9e:	d002      	beq.n	5aa6 <setvbuf+0x56>
    5aa0:	0030      	movs	r0, r6
    5aa2:	f000 fbbd 	bl	6220 <_free_r>
    5aa6:	2300      	movs	r3, #0
    5aa8:	6363      	str	r3, [r4, #52]	; 0x34
    5aaa:	2300      	movs	r3, #0
    5aac:	61a3      	str	r3, [r4, #24]
    5aae:	6063      	str	r3, [r4, #4]
    5ab0:	89a3      	ldrh	r3, [r4, #12]
    5ab2:	061b      	lsls	r3, r3, #24
    5ab4:	d503      	bpl.n	5abe <setvbuf+0x6e>
    5ab6:	6921      	ldr	r1, [r4, #16]
    5ab8:	0030      	movs	r0, r6
    5aba:	f000 fbb1 	bl	6220 <_free_r>
    5abe:	89a3      	ldrh	r3, [r4, #12]
    5ac0:	4a36      	ldr	r2, [pc, #216]	; (5b9c <setvbuf+0x14c>)
    5ac2:	4013      	ands	r3, r2
    5ac4:	81a3      	strh	r3, [r4, #12]
    5ac6:	9b00      	ldr	r3, [sp, #0]
    5ac8:	2b02      	cmp	r3, #2
    5aca:	d05a      	beq.n	5b82 <setvbuf+0x132>
    5acc:	ab03      	add	r3, sp, #12
    5ace:	aa02      	add	r2, sp, #8
    5ad0:	0021      	movs	r1, r4
    5ad2:	0030      	movs	r0, r6
    5ad4:	f000 fb34 	bl	6140 <__swhatbuf_r>
    5ad8:	89a3      	ldrh	r3, [r4, #12]
    5ada:	4318      	orrs	r0, r3
    5adc:	81a0      	strh	r0, [r4, #12]
    5ade:	2d00      	cmp	r5, #0
    5ae0:	d124      	bne.n	5b2c <setvbuf+0xdc>
    5ae2:	9d02      	ldr	r5, [sp, #8]
    5ae4:	0028      	movs	r0, r5
    5ae6:	f000 fb91 	bl	620c <malloc>
    5aea:	9501      	str	r5, [sp, #4]
    5aec:	1e07      	subs	r7, r0, #0
    5aee:	d142      	bne.n	5b76 <setvbuf+0x126>
    5af0:	9b02      	ldr	r3, [sp, #8]
    5af2:	9301      	str	r3, [sp, #4]
    5af4:	42ab      	cmp	r3, r5
    5af6:	d139      	bne.n	5b6c <setvbuf+0x11c>
    5af8:	2001      	movs	r0, #1
    5afa:	4240      	negs	r0, r0
    5afc:	2302      	movs	r3, #2
    5afe:	89a2      	ldrh	r2, [r4, #12]
    5b00:	4313      	orrs	r3, r2
    5b02:	81a3      	strh	r3, [r4, #12]
    5b04:	2300      	movs	r3, #0
    5b06:	60a3      	str	r3, [r4, #8]
    5b08:	0023      	movs	r3, r4
    5b0a:	3347      	adds	r3, #71	; 0x47
    5b0c:	6023      	str	r3, [r4, #0]
    5b0e:	6123      	str	r3, [r4, #16]
    5b10:	2301      	movs	r3, #1
    5b12:	6163      	str	r3, [r4, #20]
    5b14:	b005      	add	sp, #20
    5b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b18:	4b21      	ldr	r3, [pc, #132]	; (5ba0 <setvbuf+0x150>)
    5b1a:	429c      	cmp	r4, r3
    5b1c:	d101      	bne.n	5b22 <setvbuf+0xd2>
    5b1e:	68b4      	ldr	r4, [r6, #8]
    5b20:	e7aa      	b.n	5a78 <setvbuf+0x28>
    5b22:	4b20      	ldr	r3, [pc, #128]	; (5ba4 <setvbuf+0x154>)
    5b24:	429c      	cmp	r4, r3
    5b26:	d1a7      	bne.n	5a78 <setvbuf+0x28>
    5b28:	68f4      	ldr	r4, [r6, #12]
    5b2a:	e7a5      	b.n	5a78 <setvbuf+0x28>
    5b2c:	2f00      	cmp	r7, #0
    5b2e:	d0d9      	beq.n	5ae4 <setvbuf+0x94>
    5b30:	69b3      	ldr	r3, [r6, #24]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d102      	bne.n	5b3c <setvbuf+0xec>
    5b36:	0030      	movs	r0, r6
    5b38:	f000 fa50 	bl	5fdc <__sinit>
    5b3c:	9b00      	ldr	r3, [sp, #0]
    5b3e:	2b01      	cmp	r3, #1
    5b40:	d103      	bne.n	5b4a <setvbuf+0xfa>
    5b42:	89a3      	ldrh	r3, [r4, #12]
    5b44:	9a00      	ldr	r2, [sp, #0]
    5b46:	431a      	orrs	r2, r3
    5b48:	81a2      	strh	r2, [r4, #12]
    5b4a:	2008      	movs	r0, #8
    5b4c:	89a3      	ldrh	r3, [r4, #12]
    5b4e:	6027      	str	r7, [r4, #0]
    5b50:	6127      	str	r7, [r4, #16]
    5b52:	6165      	str	r5, [r4, #20]
    5b54:	4018      	ands	r0, r3
    5b56:	d018      	beq.n	5b8a <setvbuf+0x13a>
    5b58:	2001      	movs	r0, #1
    5b5a:	4018      	ands	r0, r3
    5b5c:	2300      	movs	r3, #0
    5b5e:	4298      	cmp	r0, r3
    5b60:	d011      	beq.n	5b86 <setvbuf+0x136>
    5b62:	426d      	negs	r5, r5
    5b64:	60a3      	str	r3, [r4, #8]
    5b66:	61a5      	str	r5, [r4, #24]
    5b68:	0018      	movs	r0, r3
    5b6a:	e7d3      	b.n	5b14 <setvbuf+0xc4>
    5b6c:	9801      	ldr	r0, [sp, #4]
    5b6e:	f000 fb4d 	bl	620c <malloc>
    5b72:	1e07      	subs	r7, r0, #0
    5b74:	d0c0      	beq.n	5af8 <setvbuf+0xa8>
    5b76:	2380      	movs	r3, #128	; 0x80
    5b78:	89a2      	ldrh	r2, [r4, #12]
    5b7a:	9d01      	ldr	r5, [sp, #4]
    5b7c:	4313      	orrs	r3, r2
    5b7e:	81a3      	strh	r3, [r4, #12]
    5b80:	e7d6      	b.n	5b30 <setvbuf+0xe0>
    5b82:	2000      	movs	r0, #0
    5b84:	e7ba      	b.n	5afc <setvbuf+0xac>
    5b86:	60a5      	str	r5, [r4, #8]
    5b88:	e7c4      	b.n	5b14 <setvbuf+0xc4>
    5b8a:	60a0      	str	r0, [r4, #8]
    5b8c:	e7c2      	b.n	5b14 <setvbuf+0xc4>
    5b8e:	2001      	movs	r0, #1
    5b90:	4240      	negs	r0, r0
    5b92:	e7bf      	b.n	5b14 <setvbuf+0xc4>
    5b94:	200000b0 	.word	0x200000b0
    5b98:	00008ca0 	.word	0x00008ca0
    5b9c:	fffff35c 	.word	0xfffff35c
    5ba0:	00008cc0 	.word	0x00008cc0
    5ba4:	00008c80 	.word	0x00008c80

00005ba8 <siprintf>:
    5ba8:	b40e      	push	{r1, r2, r3}
    5baa:	b510      	push	{r4, lr}
    5bac:	b09d      	sub	sp, #116	; 0x74
    5bae:	a902      	add	r1, sp, #8
    5bb0:	9002      	str	r0, [sp, #8]
    5bb2:	6108      	str	r0, [r1, #16]
    5bb4:	480b      	ldr	r0, [pc, #44]	; (5be4 <siprintf+0x3c>)
    5bb6:	2482      	movs	r4, #130	; 0x82
    5bb8:	6088      	str	r0, [r1, #8]
    5bba:	6148      	str	r0, [r1, #20]
    5bbc:	2001      	movs	r0, #1
    5bbe:	4240      	negs	r0, r0
    5bc0:	ab1f      	add	r3, sp, #124	; 0x7c
    5bc2:	81c8      	strh	r0, [r1, #14]
    5bc4:	4808      	ldr	r0, [pc, #32]	; (5be8 <siprintf+0x40>)
    5bc6:	cb04      	ldmia	r3!, {r2}
    5bc8:	00a4      	lsls	r4, r4, #2
    5bca:	6800      	ldr	r0, [r0, #0]
    5bcc:	9301      	str	r3, [sp, #4]
    5bce:	818c      	strh	r4, [r1, #12]
    5bd0:	f000 fc30 	bl	6434 <_svfiprintf_r>
    5bd4:	2300      	movs	r3, #0
    5bd6:	9a02      	ldr	r2, [sp, #8]
    5bd8:	7013      	strb	r3, [r2, #0]
    5bda:	b01d      	add	sp, #116	; 0x74
    5bdc:	bc10      	pop	{r4}
    5bde:	bc08      	pop	{r3}
    5be0:	b003      	add	sp, #12
    5be2:	4718      	bx	r3
    5be4:	7fffffff 	.word	0x7fffffff
    5be8:	200000b0 	.word	0x200000b0

00005bec <strlen>:
    5bec:	2300      	movs	r3, #0
    5bee:	5cc2      	ldrb	r2, [r0, r3]
    5bf0:	3301      	adds	r3, #1
    5bf2:	2a00      	cmp	r2, #0
    5bf4:	d1fb      	bne.n	5bee <strlen+0x2>
    5bf6:	1e58      	subs	r0, r3, #1
    5bf8:	4770      	bx	lr

00005bfa <strstr>:
    5bfa:	b510      	push	{r4, lr}
    5bfc:	0002      	movs	r2, r0
    5bfe:	7800      	ldrb	r0, [r0, #0]
    5c00:	2800      	cmp	r0, #0
    5c02:	d104      	bne.n	5c0e <strstr+0x14>
    5c04:	7809      	ldrb	r1, [r1, #0]
    5c06:	2900      	cmp	r1, #0
    5c08:	d00d      	beq.n	5c26 <strstr+0x2c>
    5c0a:	bd10      	pop	{r4, pc}
    5c0c:	3201      	adds	r2, #1
    5c0e:	7810      	ldrb	r0, [r2, #0]
    5c10:	2800      	cmp	r0, #0
    5c12:	d0fa      	beq.n	5c0a <strstr+0x10>
    5c14:	2300      	movs	r3, #0
    5c16:	5cc8      	ldrb	r0, [r1, r3]
    5c18:	2800      	cmp	r0, #0
    5c1a:	d004      	beq.n	5c26 <strstr+0x2c>
    5c1c:	5cd4      	ldrb	r4, [r2, r3]
    5c1e:	4284      	cmp	r4, r0
    5c20:	d1f4      	bne.n	5c0c <strstr+0x12>
    5c22:	3301      	adds	r3, #1
    5c24:	e7f7      	b.n	5c16 <strstr+0x1c>
    5c26:	0010      	movs	r0, r2
    5c28:	e7ef      	b.n	5c0a <strstr+0x10>
	...

00005c2c <__swbuf_r>:
    5c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c2e:	0005      	movs	r5, r0
    5c30:	000e      	movs	r6, r1
    5c32:	0014      	movs	r4, r2
    5c34:	2800      	cmp	r0, #0
    5c36:	d004      	beq.n	5c42 <__swbuf_r+0x16>
    5c38:	6983      	ldr	r3, [r0, #24]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d101      	bne.n	5c42 <__swbuf_r+0x16>
    5c3e:	f000 f9cd 	bl	5fdc <__sinit>
    5c42:	4b22      	ldr	r3, [pc, #136]	; (5ccc <__swbuf_r+0xa0>)
    5c44:	429c      	cmp	r4, r3
    5c46:	d12d      	bne.n	5ca4 <__swbuf_r+0x78>
    5c48:	686c      	ldr	r4, [r5, #4]
    5c4a:	69a3      	ldr	r3, [r4, #24]
    5c4c:	60a3      	str	r3, [r4, #8]
    5c4e:	89a3      	ldrh	r3, [r4, #12]
    5c50:	071b      	lsls	r3, r3, #28
    5c52:	d531      	bpl.n	5cb8 <__swbuf_r+0x8c>
    5c54:	6923      	ldr	r3, [r4, #16]
    5c56:	2b00      	cmp	r3, #0
    5c58:	d02e      	beq.n	5cb8 <__swbuf_r+0x8c>
    5c5a:	6823      	ldr	r3, [r4, #0]
    5c5c:	6922      	ldr	r2, [r4, #16]
    5c5e:	b2f7      	uxtb	r7, r6
    5c60:	1a98      	subs	r0, r3, r2
    5c62:	6963      	ldr	r3, [r4, #20]
    5c64:	b2f6      	uxtb	r6, r6
    5c66:	4298      	cmp	r0, r3
    5c68:	db05      	blt.n	5c76 <__swbuf_r+0x4a>
    5c6a:	0021      	movs	r1, r4
    5c6c:	0028      	movs	r0, r5
    5c6e:	f000 f933 	bl	5ed8 <_fflush_r>
    5c72:	2800      	cmp	r0, #0
    5c74:	d126      	bne.n	5cc4 <__swbuf_r+0x98>
    5c76:	68a3      	ldr	r3, [r4, #8]
    5c78:	3001      	adds	r0, #1
    5c7a:	3b01      	subs	r3, #1
    5c7c:	60a3      	str	r3, [r4, #8]
    5c7e:	6823      	ldr	r3, [r4, #0]
    5c80:	1c5a      	adds	r2, r3, #1
    5c82:	6022      	str	r2, [r4, #0]
    5c84:	701f      	strb	r7, [r3, #0]
    5c86:	6963      	ldr	r3, [r4, #20]
    5c88:	4298      	cmp	r0, r3
    5c8a:	d004      	beq.n	5c96 <__swbuf_r+0x6a>
    5c8c:	89a3      	ldrh	r3, [r4, #12]
    5c8e:	07db      	lsls	r3, r3, #31
    5c90:	d51a      	bpl.n	5cc8 <__swbuf_r+0x9c>
    5c92:	2e0a      	cmp	r6, #10
    5c94:	d118      	bne.n	5cc8 <__swbuf_r+0x9c>
    5c96:	0021      	movs	r1, r4
    5c98:	0028      	movs	r0, r5
    5c9a:	f000 f91d 	bl	5ed8 <_fflush_r>
    5c9e:	2800      	cmp	r0, #0
    5ca0:	d012      	beq.n	5cc8 <__swbuf_r+0x9c>
    5ca2:	e00f      	b.n	5cc4 <__swbuf_r+0x98>
    5ca4:	4b0a      	ldr	r3, [pc, #40]	; (5cd0 <__swbuf_r+0xa4>)
    5ca6:	429c      	cmp	r4, r3
    5ca8:	d101      	bne.n	5cae <__swbuf_r+0x82>
    5caa:	68ac      	ldr	r4, [r5, #8]
    5cac:	e7cd      	b.n	5c4a <__swbuf_r+0x1e>
    5cae:	4b09      	ldr	r3, [pc, #36]	; (5cd4 <__swbuf_r+0xa8>)
    5cb0:	429c      	cmp	r4, r3
    5cb2:	d1ca      	bne.n	5c4a <__swbuf_r+0x1e>
    5cb4:	68ec      	ldr	r4, [r5, #12]
    5cb6:	e7c8      	b.n	5c4a <__swbuf_r+0x1e>
    5cb8:	0021      	movs	r1, r4
    5cba:	0028      	movs	r0, r5
    5cbc:	f000 f80c 	bl	5cd8 <__swsetup_r>
    5cc0:	2800      	cmp	r0, #0
    5cc2:	d0ca      	beq.n	5c5a <__swbuf_r+0x2e>
    5cc4:	2601      	movs	r6, #1
    5cc6:	4276      	negs	r6, r6
    5cc8:	0030      	movs	r0, r6
    5cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ccc:	00008ca0 	.word	0x00008ca0
    5cd0:	00008cc0 	.word	0x00008cc0
    5cd4:	00008c80 	.word	0x00008c80

00005cd8 <__swsetup_r>:
    5cd8:	4b36      	ldr	r3, [pc, #216]	; (5db4 <__swsetup_r+0xdc>)
    5cda:	b570      	push	{r4, r5, r6, lr}
    5cdc:	681d      	ldr	r5, [r3, #0]
    5cde:	0006      	movs	r6, r0
    5ce0:	000c      	movs	r4, r1
    5ce2:	2d00      	cmp	r5, #0
    5ce4:	d005      	beq.n	5cf2 <__swsetup_r+0x1a>
    5ce6:	69ab      	ldr	r3, [r5, #24]
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d102      	bne.n	5cf2 <__swsetup_r+0x1a>
    5cec:	0028      	movs	r0, r5
    5cee:	f000 f975 	bl	5fdc <__sinit>
    5cf2:	4b31      	ldr	r3, [pc, #196]	; (5db8 <__swsetup_r+0xe0>)
    5cf4:	429c      	cmp	r4, r3
    5cf6:	d10f      	bne.n	5d18 <__swsetup_r+0x40>
    5cf8:	686c      	ldr	r4, [r5, #4]
    5cfa:	230c      	movs	r3, #12
    5cfc:	5ee2      	ldrsh	r2, [r4, r3]
    5cfe:	b293      	uxth	r3, r2
    5d00:	0719      	lsls	r1, r3, #28
    5d02:	d42d      	bmi.n	5d60 <__swsetup_r+0x88>
    5d04:	06d9      	lsls	r1, r3, #27
    5d06:	d411      	bmi.n	5d2c <__swsetup_r+0x54>
    5d08:	2309      	movs	r3, #9
    5d0a:	2001      	movs	r0, #1
    5d0c:	6033      	str	r3, [r6, #0]
    5d0e:	3337      	adds	r3, #55	; 0x37
    5d10:	4313      	orrs	r3, r2
    5d12:	81a3      	strh	r3, [r4, #12]
    5d14:	4240      	negs	r0, r0
    5d16:	bd70      	pop	{r4, r5, r6, pc}
    5d18:	4b28      	ldr	r3, [pc, #160]	; (5dbc <__swsetup_r+0xe4>)
    5d1a:	429c      	cmp	r4, r3
    5d1c:	d101      	bne.n	5d22 <__swsetup_r+0x4a>
    5d1e:	68ac      	ldr	r4, [r5, #8]
    5d20:	e7eb      	b.n	5cfa <__swsetup_r+0x22>
    5d22:	4b27      	ldr	r3, [pc, #156]	; (5dc0 <__swsetup_r+0xe8>)
    5d24:	429c      	cmp	r4, r3
    5d26:	d1e8      	bne.n	5cfa <__swsetup_r+0x22>
    5d28:	68ec      	ldr	r4, [r5, #12]
    5d2a:	e7e6      	b.n	5cfa <__swsetup_r+0x22>
    5d2c:	075b      	lsls	r3, r3, #29
    5d2e:	d513      	bpl.n	5d58 <__swsetup_r+0x80>
    5d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d32:	2900      	cmp	r1, #0
    5d34:	d008      	beq.n	5d48 <__swsetup_r+0x70>
    5d36:	0023      	movs	r3, r4
    5d38:	3344      	adds	r3, #68	; 0x44
    5d3a:	4299      	cmp	r1, r3
    5d3c:	d002      	beq.n	5d44 <__swsetup_r+0x6c>
    5d3e:	0030      	movs	r0, r6
    5d40:	f000 fa6e 	bl	6220 <_free_r>
    5d44:	2300      	movs	r3, #0
    5d46:	6363      	str	r3, [r4, #52]	; 0x34
    5d48:	2224      	movs	r2, #36	; 0x24
    5d4a:	89a3      	ldrh	r3, [r4, #12]
    5d4c:	4393      	bics	r3, r2
    5d4e:	81a3      	strh	r3, [r4, #12]
    5d50:	2300      	movs	r3, #0
    5d52:	6063      	str	r3, [r4, #4]
    5d54:	6923      	ldr	r3, [r4, #16]
    5d56:	6023      	str	r3, [r4, #0]
    5d58:	2308      	movs	r3, #8
    5d5a:	89a2      	ldrh	r2, [r4, #12]
    5d5c:	4313      	orrs	r3, r2
    5d5e:	81a3      	strh	r3, [r4, #12]
    5d60:	6923      	ldr	r3, [r4, #16]
    5d62:	2b00      	cmp	r3, #0
    5d64:	d10b      	bne.n	5d7e <__swsetup_r+0xa6>
    5d66:	21a0      	movs	r1, #160	; 0xa0
    5d68:	2280      	movs	r2, #128	; 0x80
    5d6a:	89a3      	ldrh	r3, [r4, #12]
    5d6c:	0089      	lsls	r1, r1, #2
    5d6e:	0092      	lsls	r2, r2, #2
    5d70:	400b      	ands	r3, r1
    5d72:	4293      	cmp	r3, r2
    5d74:	d003      	beq.n	5d7e <__swsetup_r+0xa6>
    5d76:	0021      	movs	r1, r4
    5d78:	0030      	movs	r0, r6
    5d7a:	f000 fa09 	bl	6190 <__smakebuf_r>
    5d7e:	2301      	movs	r3, #1
    5d80:	89a2      	ldrh	r2, [r4, #12]
    5d82:	4013      	ands	r3, r2
    5d84:	d011      	beq.n	5daa <__swsetup_r+0xd2>
    5d86:	2300      	movs	r3, #0
    5d88:	60a3      	str	r3, [r4, #8]
    5d8a:	6963      	ldr	r3, [r4, #20]
    5d8c:	425b      	negs	r3, r3
    5d8e:	61a3      	str	r3, [r4, #24]
    5d90:	2000      	movs	r0, #0
    5d92:	6923      	ldr	r3, [r4, #16]
    5d94:	4283      	cmp	r3, r0
    5d96:	d1be      	bne.n	5d16 <__swsetup_r+0x3e>
    5d98:	230c      	movs	r3, #12
    5d9a:	5ee2      	ldrsh	r2, [r4, r3]
    5d9c:	0613      	lsls	r3, r2, #24
    5d9e:	d5ba      	bpl.n	5d16 <__swsetup_r+0x3e>
    5da0:	2340      	movs	r3, #64	; 0x40
    5da2:	4313      	orrs	r3, r2
    5da4:	81a3      	strh	r3, [r4, #12]
    5da6:	3801      	subs	r0, #1
    5da8:	e7b5      	b.n	5d16 <__swsetup_r+0x3e>
    5daa:	0792      	lsls	r2, r2, #30
    5dac:	d400      	bmi.n	5db0 <__swsetup_r+0xd8>
    5dae:	6963      	ldr	r3, [r4, #20]
    5db0:	60a3      	str	r3, [r4, #8]
    5db2:	e7ed      	b.n	5d90 <__swsetup_r+0xb8>
    5db4:	200000b0 	.word	0x200000b0
    5db8:	00008ca0 	.word	0x00008ca0
    5dbc:	00008cc0 	.word	0x00008cc0
    5dc0:	00008c80 	.word	0x00008c80

00005dc4 <__sflush_r>:
    5dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5dc6:	898a      	ldrh	r2, [r1, #12]
    5dc8:	0005      	movs	r5, r0
    5dca:	000c      	movs	r4, r1
    5dcc:	0713      	lsls	r3, r2, #28
    5dce:	d460      	bmi.n	5e92 <__sflush_r+0xce>
    5dd0:	684b      	ldr	r3, [r1, #4]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	dc04      	bgt.n	5de0 <__sflush_r+0x1c>
    5dd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5dd8:	2b00      	cmp	r3, #0
    5dda:	dc01      	bgt.n	5de0 <__sflush_r+0x1c>
    5ddc:	2000      	movs	r0, #0
    5dde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5de0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5de2:	2f00      	cmp	r7, #0
    5de4:	d0fa      	beq.n	5ddc <__sflush_r+0x18>
    5de6:	2300      	movs	r3, #0
    5de8:	682e      	ldr	r6, [r5, #0]
    5dea:	602b      	str	r3, [r5, #0]
    5dec:	2380      	movs	r3, #128	; 0x80
    5dee:	015b      	lsls	r3, r3, #5
    5df0:	401a      	ands	r2, r3
    5df2:	d034      	beq.n	5e5e <__sflush_r+0x9a>
    5df4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5df6:	89a3      	ldrh	r3, [r4, #12]
    5df8:	075b      	lsls	r3, r3, #29
    5dfa:	d506      	bpl.n	5e0a <__sflush_r+0x46>
    5dfc:	6863      	ldr	r3, [r4, #4]
    5dfe:	1ac0      	subs	r0, r0, r3
    5e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5e02:	2b00      	cmp	r3, #0
    5e04:	d001      	beq.n	5e0a <__sflush_r+0x46>
    5e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5e08:	1ac0      	subs	r0, r0, r3
    5e0a:	0002      	movs	r2, r0
    5e0c:	6a21      	ldr	r1, [r4, #32]
    5e0e:	2300      	movs	r3, #0
    5e10:	0028      	movs	r0, r5
    5e12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5e14:	47b8      	blx	r7
    5e16:	89a1      	ldrh	r1, [r4, #12]
    5e18:	1c43      	adds	r3, r0, #1
    5e1a:	d106      	bne.n	5e2a <__sflush_r+0x66>
    5e1c:	682b      	ldr	r3, [r5, #0]
    5e1e:	2b1d      	cmp	r3, #29
    5e20:	d831      	bhi.n	5e86 <__sflush_r+0xc2>
    5e22:	4a2c      	ldr	r2, [pc, #176]	; (5ed4 <__sflush_r+0x110>)
    5e24:	40da      	lsrs	r2, r3
    5e26:	07d3      	lsls	r3, r2, #31
    5e28:	d52d      	bpl.n	5e86 <__sflush_r+0xc2>
    5e2a:	2300      	movs	r3, #0
    5e2c:	6063      	str	r3, [r4, #4]
    5e2e:	6923      	ldr	r3, [r4, #16]
    5e30:	6023      	str	r3, [r4, #0]
    5e32:	04cb      	lsls	r3, r1, #19
    5e34:	d505      	bpl.n	5e42 <__sflush_r+0x7e>
    5e36:	1c43      	adds	r3, r0, #1
    5e38:	d102      	bne.n	5e40 <__sflush_r+0x7c>
    5e3a:	682b      	ldr	r3, [r5, #0]
    5e3c:	2b00      	cmp	r3, #0
    5e3e:	d100      	bne.n	5e42 <__sflush_r+0x7e>
    5e40:	6560      	str	r0, [r4, #84]	; 0x54
    5e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5e44:	602e      	str	r6, [r5, #0]
    5e46:	2900      	cmp	r1, #0
    5e48:	d0c8      	beq.n	5ddc <__sflush_r+0x18>
    5e4a:	0023      	movs	r3, r4
    5e4c:	3344      	adds	r3, #68	; 0x44
    5e4e:	4299      	cmp	r1, r3
    5e50:	d002      	beq.n	5e58 <__sflush_r+0x94>
    5e52:	0028      	movs	r0, r5
    5e54:	f000 f9e4 	bl	6220 <_free_r>
    5e58:	2000      	movs	r0, #0
    5e5a:	6360      	str	r0, [r4, #52]	; 0x34
    5e5c:	e7bf      	b.n	5dde <__sflush_r+0x1a>
    5e5e:	2301      	movs	r3, #1
    5e60:	6a21      	ldr	r1, [r4, #32]
    5e62:	0028      	movs	r0, r5
    5e64:	47b8      	blx	r7
    5e66:	1c43      	adds	r3, r0, #1
    5e68:	d1c5      	bne.n	5df6 <__sflush_r+0x32>
    5e6a:	682b      	ldr	r3, [r5, #0]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d0c2      	beq.n	5df6 <__sflush_r+0x32>
    5e70:	2b1d      	cmp	r3, #29
    5e72:	d001      	beq.n	5e78 <__sflush_r+0xb4>
    5e74:	2b16      	cmp	r3, #22
    5e76:	d101      	bne.n	5e7c <__sflush_r+0xb8>
    5e78:	602e      	str	r6, [r5, #0]
    5e7a:	e7af      	b.n	5ddc <__sflush_r+0x18>
    5e7c:	2340      	movs	r3, #64	; 0x40
    5e7e:	89a2      	ldrh	r2, [r4, #12]
    5e80:	4313      	orrs	r3, r2
    5e82:	81a3      	strh	r3, [r4, #12]
    5e84:	e7ab      	b.n	5dde <__sflush_r+0x1a>
    5e86:	2340      	movs	r3, #64	; 0x40
    5e88:	430b      	orrs	r3, r1
    5e8a:	2001      	movs	r0, #1
    5e8c:	81a3      	strh	r3, [r4, #12]
    5e8e:	4240      	negs	r0, r0
    5e90:	e7a5      	b.n	5dde <__sflush_r+0x1a>
    5e92:	690f      	ldr	r7, [r1, #16]
    5e94:	2f00      	cmp	r7, #0
    5e96:	d0a1      	beq.n	5ddc <__sflush_r+0x18>
    5e98:	680b      	ldr	r3, [r1, #0]
    5e9a:	600f      	str	r7, [r1, #0]
    5e9c:	1bdb      	subs	r3, r3, r7
    5e9e:	9301      	str	r3, [sp, #4]
    5ea0:	2300      	movs	r3, #0
    5ea2:	0792      	lsls	r2, r2, #30
    5ea4:	d100      	bne.n	5ea8 <__sflush_r+0xe4>
    5ea6:	694b      	ldr	r3, [r1, #20]
    5ea8:	60a3      	str	r3, [r4, #8]
    5eaa:	9b01      	ldr	r3, [sp, #4]
    5eac:	2b00      	cmp	r3, #0
    5eae:	dc00      	bgt.n	5eb2 <__sflush_r+0xee>
    5eb0:	e794      	b.n	5ddc <__sflush_r+0x18>
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	003a      	movs	r2, r7
    5eb6:	6a21      	ldr	r1, [r4, #32]
    5eb8:	0028      	movs	r0, r5
    5eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5ebc:	47b0      	blx	r6
    5ebe:	2800      	cmp	r0, #0
    5ec0:	dc03      	bgt.n	5eca <__sflush_r+0x106>
    5ec2:	2340      	movs	r3, #64	; 0x40
    5ec4:	89a2      	ldrh	r2, [r4, #12]
    5ec6:	4313      	orrs	r3, r2
    5ec8:	e7df      	b.n	5e8a <__sflush_r+0xc6>
    5eca:	9b01      	ldr	r3, [sp, #4]
    5ecc:	183f      	adds	r7, r7, r0
    5ece:	1a1b      	subs	r3, r3, r0
    5ed0:	9301      	str	r3, [sp, #4]
    5ed2:	e7ea      	b.n	5eaa <__sflush_r+0xe6>
    5ed4:	20400001 	.word	0x20400001

00005ed8 <_fflush_r>:
    5ed8:	690b      	ldr	r3, [r1, #16]
    5eda:	b570      	push	{r4, r5, r6, lr}
    5edc:	0005      	movs	r5, r0
    5ede:	000c      	movs	r4, r1
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d101      	bne.n	5ee8 <_fflush_r+0x10>
    5ee4:	2000      	movs	r0, #0
    5ee6:	bd70      	pop	{r4, r5, r6, pc}
    5ee8:	2800      	cmp	r0, #0
    5eea:	d004      	beq.n	5ef6 <_fflush_r+0x1e>
    5eec:	6983      	ldr	r3, [r0, #24]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d101      	bne.n	5ef6 <_fflush_r+0x1e>
    5ef2:	f000 f873 	bl	5fdc <__sinit>
    5ef6:	4b0b      	ldr	r3, [pc, #44]	; (5f24 <_fflush_r+0x4c>)
    5ef8:	429c      	cmp	r4, r3
    5efa:	d109      	bne.n	5f10 <_fflush_r+0x38>
    5efc:	686c      	ldr	r4, [r5, #4]
    5efe:	220c      	movs	r2, #12
    5f00:	5ea3      	ldrsh	r3, [r4, r2]
    5f02:	2b00      	cmp	r3, #0
    5f04:	d0ee      	beq.n	5ee4 <_fflush_r+0xc>
    5f06:	0021      	movs	r1, r4
    5f08:	0028      	movs	r0, r5
    5f0a:	f7ff ff5b 	bl	5dc4 <__sflush_r>
    5f0e:	e7ea      	b.n	5ee6 <_fflush_r+0xe>
    5f10:	4b05      	ldr	r3, [pc, #20]	; (5f28 <_fflush_r+0x50>)
    5f12:	429c      	cmp	r4, r3
    5f14:	d101      	bne.n	5f1a <_fflush_r+0x42>
    5f16:	68ac      	ldr	r4, [r5, #8]
    5f18:	e7f1      	b.n	5efe <_fflush_r+0x26>
    5f1a:	4b04      	ldr	r3, [pc, #16]	; (5f2c <_fflush_r+0x54>)
    5f1c:	429c      	cmp	r4, r3
    5f1e:	d1ee      	bne.n	5efe <_fflush_r+0x26>
    5f20:	68ec      	ldr	r4, [r5, #12]
    5f22:	e7ec      	b.n	5efe <_fflush_r+0x26>
    5f24:	00008ca0 	.word	0x00008ca0
    5f28:	00008cc0 	.word	0x00008cc0
    5f2c:	00008c80 	.word	0x00008c80

00005f30 <fflush>:
    5f30:	b510      	push	{r4, lr}
    5f32:	1e01      	subs	r1, r0, #0
    5f34:	d105      	bne.n	5f42 <fflush+0x12>
    5f36:	4b05      	ldr	r3, [pc, #20]	; (5f4c <fflush+0x1c>)
    5f38:	4905      	ldr	r1, [pc, #20]	; (5f50 <fflush+0x20>)
    5f3a:	6818      	ldr	r0, [r3, #0]
    5f3c:	f000 f8de 	bl	60fc <_fwalk_reent>
    5f40:	bd10      	pop	{r4, pc}
    5f42:	4b04      	ldr	r3, [pc, #16]	; (5f54 <fflush+0x24>)
    5f44:	6818      	ldr	r0, [r3, #0]
    5f46:	f7ff ffc7 	bl	5ed8 <_fflush_r>
    5f4a:	e7f9      	b.n	5f40 <fflush+0x10>
    5f4c:	00008c7c 	.word	0x00008c7c
    5f50:	00005ed9 	.word	0x00005ed9
    5f54:	200000b0 	.word	0x200000b0

00005f58 <_cleanup_r>:
    5f58:	b510      	push	{r4, lr}
    5f5a:	4902      	ldr	r1, [pc, #8]	; (5f64 <_cleanup_r+0xc>)
    5f5c:	f000 f8ce 	bl	60fc <_fwalk_reent>
    5f60:	bd10      	pop	{r4, pc}
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	00005ed9 	.word	0x00005ed9

00005f68 <std.isra.0>:
    5f68:	2300      	movs	r3, #0
    5f6a:	b510      	push	{r4, lr}
    5f6c:	0004      	movs	r4, r0
    5f6e:	6003      	str	r3, [r0, #0]
    5f70:	6043      	str	r3, [r0, #4]
    5f72:	6083      	str	r3, [r0, #8]
    5f74:	8181      	strh	r1, [r0, #12]
    5f76:	6643      	str	r3, [r0, #100]	; 0x64
    5f78:	81c2      	strh	r2, [r0, #14]
    5f7a:	6103      	str	r3, [r0, #16]
    5f7c:	6143      	str	r3, [r0, #20]
    5f7e:	6183      	str	r3, [r0, #24]
    5f80:	0019      	movs	r1, r3
    5f82:	2208      	movs	r2, #8
    5f84:	305c      	adds	r0, #92	; 0x5c
    5f86:	f7ff fc9f 	bl	58c8 <memset>
    5f8a:	4b05      	ldr	r3, [pc, #20]	; (5fa0 <std.isra.0+0x38>)
    5f8c:	6224      	str	r4, [r4, #32]
    5f8e:	6263      	str	r3, [r4, #36]	; 0x24
    5f90:	4b04      	ldr	r3, [pc, #16]	; (5fa4 <std.isra.0+0x3c>)
    5f92:	62a3      	str	r3, [r4, #40]	; 0x28
    5f94:	4b04      	ldr	r3, [pc, #16]	; (5fa8 <std.isra.0+0x40>)
    5f96:	62e3      	str	r3, [r4, #44]	; 0x2c
    5f98:	4b04      	ldr	r3, [pc, #16]	; (5fac <std.isra.0+0x44>)
    5f9a:	6323      	str	r3, [r4, #48]	; 0x30
    5f9c:	bd10      	pop	{r4, pc}
    5f9e:	46c0      	nop			; (mov r8, r8)
    5fa0:	00007425 	.word	0x00007425
    5fa4:	0000744d 	.word	0x0000744d
    5fa8:	00007485 	.word	0x00007485
    5fac:	000074b1 	.word	0x000074b1

00005fb0 <__sfmoreglue>:
    5fb0:	b570      	push	{r4, r5, r6, lr}
    5fb2:	2568      	movs	r5, #104	; 0x68
    5fb4:	1e4a      	subs	r2, r1, #1
    5fb6:	4355      	muls	r5, r2
    5fb8:	000e      	movs	r6, r1
    5fba:	0029      	movs	r1, r5
    5fbc:	3174      	adds	r1, #116	; 0x74
    5fbe:	f000 f979 	bl	62b4 <_malloc_r>
    5fc2:	1e04      	subs	r4, r0, #0
    5fc4:	d008      	beq.n	5fd8 <__sfmoreglue+0x28>
    5fc6:	2100      	movs	r1, #0
    5fc8:	002a      	movs	r2, r5
    5fca:	6001      	str	r1, [r0, #0]
    5fcc:	6046      	str	r6, [r0, #4]
    5fce:	300c      	adds	r0, #12
    5fd0:	60a0      	str	r0, [r4, #8]
    5fd2:	3268      	adds	r2, #104	; 0x68
    5fd4:	f7ff fc78 	bl	58c8 <memset>
    5fd8:	0020      	movs	r0, r4
    5fda:	bd70      	pop	{r4, r5, r6, pc}

00005fdc <__sinit>:
    5fdc:	6983      	ldr	r3, [r0, #24]
    5fde:	b513      	push	{r0, r1, r4, lr}
    5fe0:	0004      	movs	r4, r0
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d128      	bne.n	6038 <__sinit+0x5c>
    5fe6:	6483      	str	r3, [r0, #72]	; 0x48
    5fe8:	64c3      	str	r3, [r0, #76]	; 0x4c
    5fea:	6503      	str	r3, [r0, #80]	; 0x50
    5fec:	4b13      	ldr	r3, [pc, #76]	; (603c <__sinit+0x60>)
    5fee:	4a14      	ldr	r2, [pc, #80]	; (6040 <__sinit+0x64>)
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	6282      	str	r2, [r0, #40]	; 0x28
    5ff4:	9301      	str	r3, [sp, #4]
    5ff6:	4298      	cmp	r0, r3
    5ff8:	d101      	bne.n	5ffe <__sinit+0x22>
    5ffa:	2301      	movs	r3, #1
    5ffc:	6183      	str	r3, [r0, #24]
    5ffe:	0020      	movs	r0, r4
    6000:	f000 f820 	bl	6044 <__sfp>
    6004:	6060      	str	r0, [r4, #4]
    6006:	0020      	movs	r0, r4
    6008:	f000 f81c 	bl	6044 <__sfp>
    600c:	60a0      	str	r0, [r4, #8]
    600e:	0020      	movs	r0, r4
    6010:	f000 f818 	bl	6044 <__sfp>
    6014:	2200      	movs	r2, #0
    6016:	60e0      	str	r0, [r4, #12]
    6018:	2104      	movs	r1, #4
    601a:	6860      	ldr	r0, [r4, #4]
    601c:	f7ff ffa4 	bl	5f68 <std.isra.0>
    6020:	2201      	movs	r2, #1
    6022:	2109      	movs	r1, #9
    6024:	68a0      	ldr	r0, [r4, #8]
    6026:	f7ff ff9f 	bl	5f68 <std.isra.0>
    602a:	2202      	movs	r2, #2
    602c:	2112      	movs	r1, #18
    602e:	68e0      	ldr	r0, [r4, #12]
    6030:	f7ff ff9a 	bl	5f68 <std.isra.0>
    6034:	2301      	movs	r3, #1
    6036:	61a3      	str	r3, [r4, #24]
    6038:	bd13      	pop	{r0, r1, r4, pc}
    603a:	46c0      	nop			; (mov r8, r8)
    603c:	00008c7c 	.word	0x00008c7c
    6040:	00005f59 	.word	0x00005f59

00006044 <__sfp>:
    6044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6046:	4b1e      	ldr	r3, [pc, #120]	; (60c0 <__sfp+0x7c>)
    6048:	0007      	movs	r7, r0
    604a:	681e      	ldr	r6, [r3, #0]
    604c:	69b3      	ldr	r3, [r6, #24]
    604e:	2b00      	cmp	r3, #0
    6050:	d102      	bne.n	6058 <__sfp+0x14>
    6052:	0030      	movs	r0, r6
    6054:	f7ff ffc2 	bl	5fdc <__sinit>
    6058:	3648      	adds	r6, #72	; 0x48
    605a:	68b4      	ldr	r4, [r6, #8]
    605c:	6873      	ldr	r3, [r6, #4]
    605e:	3b01      	subs	r3, #1
    6060:	d504      	bpl.n	606c <__sfp+0x28>
    6062:	6833      	ldr	r3, [r6, #0]
    6064:	2b00      	cmp	r3, #0
    6066:	d007      	beq.n	6078 <__sfp+0x34>
    6068:	6836      	ldr	r6, [r6, #0]
    606a:	e7f6      	b.n	605a <__sfp+0x16>
    606c:	220c      	movs	r2, #12
    606e:	5ea5      	ldrsh	r5, [r4, r2]
    6070:	2d00      	cmp	r5, #0
    6072:	d00d      	beq.n	6090 <__sfp+0x4c>
    6074:	3468      	adds	r4, #104	; 0x68
    6076:	e7f2      	b.n	605e <__sfp+0x1a>
    6078:	2104      	movs	r1, #4
    607a:	0038      	movs	r0, r7
    607c:	f7ff ff98 	bl	5fb0 <__sfmoreglue>
    6080:	6030      	str	r0, [r6, #0]
    6082:	2800      	cmp	r0, #0
    6084:	d1f0      	bne.n	6068 <__sfp+0x24>
    6086:	230c      	movs	r3, #12
    6088:	0004      	movs	r4, r0
    608a:	603b      	str	r3, [r7, #0]
    608c:	0020      	movs	r0, r4
    608e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6090:	2301      	movs	r3, #1
    6092:	0020      	movs	r0, r4
    6094:	425b      	negs	r3, r3
    6096:	81e3      	strh	r3, [r4, #14]
    6098:	3302      	adds	r3, #2
    609a:	81a3      	strh	r3, [r4, #12]
    609c:	6665      	str	r5, [r4, #100]	; 0x64
    609e:	6025      	str	r5, [r4, #0]
    60a0:	60a5      	str	r5, [r4, #8]
    60a2:	6065      	str	r5, [r4, #4]
    60a4:	6125      	str	r5, [r4, #16]
    60a6:	6165      	str	r5, [r4, #20]
    60a8:	61a5      	str	r5, [r4, #24]
    60aa:	2208      	movs	r2, #8
    60ac:	0029      	movs	r1, r5
    60ae:	305c      	adds	r0, #92	; 0x5c
    60b0:	f7ff fc0a 	bl	58c8 <memset>
    60b4:	6365      	str	r5, [r4, #52]	; 0x34
    60b6:	63a5      	str	r5, [r4, #56]	; 0x38
    60b8:	64a5      	str	r5, [r4, #72]	; 0x48
    60ba:	64e5      	str	r5, [r4, #76]	; 0x4c
    60bc:	e7e6      	b.n	608c <__sfp+0x48>
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	00008c7c 	.word	0x00008c7c

000060c4 <_fwalk>:
    60c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60c6:	3048      	adds	r0, #72	; 0x48
    60c8:	0004      	movs	r4, r0
    60ca:	2600      	movs	r6, #0
    60cc:	9101      	str	r1, [sp, #4]
    60ce:	2c00      	cmp	r4, #0
    60d0:	d101      	bne.n	60d6 <_fwalk+0x12>
    60d2:	0030      	movs	r0, r6
    60d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    60d6:	68a5      	ldr	r5, [r4, #8]
    60d8:	6867      	ldr	r7, [r4, #4]
    60da:	3f01      	subs	r7, #1
    60dc:	d501      	bpl.n	60e2 <_fwalk+0x1e>
    60de:	6824      	ldr	r4, [r4, #0]
    60e0:	e7f5      	b.n	60ce <_fwalk+0xa>
    60e2:	89ab      	ldrh	r3, [r5, #12]
    60e4:	2b01      	cmp	r3, #1
    60e6:	d907      	bls.n	60f8 <_fwalk+0x34>
    60e8:	220e      	movs	r2, #14
    60ea:	5eab      	ldrsh	r3, [r5, r2]
    60ec:	3301      	adds	r3, #1
    60ee:	d003      	beq.n	60f8 <_fwalk+0x34>
    60f0:	0028      	movs	r0, r5
    60f2:	9b01      	ldr	r3, [sp, #4]
    60f4:	4798      	blx	r3
    60f6:	4306      	orrs	r6, r0
    60f8:	3568      	adds	r5, #104	; 0x68
    60fa:	e7ee      	b.n	60da <_fwalk+0x16>

000060fc <_fwalk_reent>:
    60fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    60fe:	0004      	movs	r4, r0
    6100:	0007      	movs	r7, r0
    6102:	2600      	movs	r6, #0
    6104:	9101      	str	r1, [sp, #4]
    6106:	3448      	adds	r4, #72	; 0x48
    6108:	2c00      	cmp	r4, #0
    610a:	d101      	bne.n	6110 <_fwalk_reent+0x14>
    610c:	0030      	movs	r0, r6
    610e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6110:	6863      	ldr	r3, [r4, #4]
    6112:	68a5      	ldr	r5, [r4, #8]
    6114:	9300      	str	r3, [sp, #0]
    6116:	9b00      	ldr	r3, [sp, #0]
    6118:	3b01      	subs	r3, #1
    611a:	9300      	str	r3, [sp, #0]
    611c:	d501      	bpl.n	6122 <_fwalk_reent+0x26>
    611e:	6824      	ldr	r4, [r4, #0]
    6120:	e7f2      	b.n	6108 <_fwalk_reent+0xc>
    6122:	89ab      	ldrh	r3, [r5, #12]
    6124:	2b01      	cmp	r3, #1
    6126:	d908      	bls.n	613a <_fwalk_reent+0x3e>
    6128:	220e      	movs	r2, #14
    612a:	5eab      	ldrsh	r3, [r5, r2]
    612c:	3301      	adds	r3, #1
    612e:	d004      	beq.n	613a <_fwalk_reent+0x3e>
    6130:	0029      	movs	r1, r5
    6132:	0038      	movs	r0, r7
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	4798      	blx	r3
    6138:	4306      	orrs	r6, r0
    613a:	3568      	adds	r5, #104	; 0x68
    613c:	e7eb      	b.n	6116 <_fwalk_reent+0x1a>
	...

00006140 <__swhatbuf_r>:
    6140:	b570      	push	{r4, r5, r6, lr}
    6142:	000e      	movs	r6, r1
    6144:	001d      	movs	r5, r3
    6146:	230e      	movs	r3, #14
    6148:	5ec9      	ldrsh	r1, [r1, r3]
    614a:	b090      	sub	sp, #64	; 0x40
    614c:	0014      	movs	r4, r2
    614e:	2900      	cmp	r1, #0
    6150:	da07      	bge.n	6162 <__swhatbuf_r+0x22>
    6152:	2300      	movs	r3, #0
    6154:	602b      	str	r3, [r5, #0]
    6156:	89b3      	ldrh	r3, [r6, #12]
    6158:	061b      	lsls	r3, r3, #24
    615a:	d411      	bmi.n	6180 <__swhatbuf_r+0x40>
    615c:	2380      	movs	r3, #128	; 0x80
    615e:	00db      	lsls	r3, r3, #3
    6160:	e00f      	b.n	6182 <__swhatbuf_r+0x42>
    6162:	aa01      	add	r2, sp, #4
    6164:	f001 fbae 	bl	78c4 <_fstat_r>
    6168:	2800      	cmp	r0, #0
    616a:	dbf2      	blt.n	6152 <__swhatbuf_r+0x12>
    616c:	22f0      	movs	r2, #240	; 0xf0
    616e:	9b02      	ldr	r3, [sp, #8]
    6170:	0212      	lsls	r2, r2, #8
    6172:	4013      	ands	r3, r2
    6174:	4a05      	ldr	r2, [pc, #20]	; (618c <__swhatbuf_r+0x4c>)
    6176:	189b      	adds	r3, r3, r2
    6178:	425a      	negs	r2, r3
    617a:	4153      	adcs	r3, r2
    617c:	602b      	str	r3, [r5, #0]
    617e:	e7ed      	b.n	615c <__swhatbuf_r+0x1c>
    6180:	2340      	movs	r3, #64	; 0x40
    6182:	2000      	movs	r0, #0
    6184:	6023      	str	r3, [r4, #0]
    6186:	b010      	add	sp, #64	; 0x40
    6188:	bd70      	pop	{r4, r5, r6, pc}
    618a:	46c0      	nop			; (mov r8, r8)
    618c:	ffffe000 	.word	0xffffe000

00006190 <__smakebuf_r>:
    6190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6192:	2602      	movs	r6, #2
    6194:	898b      	ldrh	r3, [r1, #12]
    6196:	0005      	movs	r5, r0
    6198:	000c      	movs	r4, r1
    619a:	4233      	tst	r3, r6
    619c:	d006      	beq.n	61ac <__smakebuf_r+0x1c>
    619e:	0023      	movs	r3, r4
    61a0:	3347      	adds	r3, #71	; 0x47
    61a2:	6023      	str	r3, [r4, #0]
    61a4:	6123      	str	r3, [r4, #16]
    61a6:	2301      	movs	r3, #1
    61a8:	6163      	str	r3, [r4, #20]
    61aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    61ac:	ab01      	add	r3, sp, #4
    61ae:	466a      	mov	r2, sp
    61b0:	f7ff ffc6 	bl	6140 <__swhatbuf_r>
    61b4:	9900      	ldr	r1, [sp, #0]
    61b6:	0007      	movs	r7, r0
    61b8:	0028      	movs	r0, r5
    61ba:	f000 f87b 	bl	62b4 <_malloc_r>
    61be:	2800      	cmp	r0, #0
    61c0:	d106      	bne.n	61d0 <__smakebuf_r+0x40>
    61c2:	220c      	movs	r2, #12
    61c4:	5ea3      	ldrsh	r3, [r4, r2]
    61c6:	059a      	lsls	r2, r3, #22
    61c8:	d4ef      	bmi.n	61aa <__smakebuf_r+0x1a>
    61ca:	431e      	orrs	r6, r3
    61cc:	81a6      	strh	r6, [r4, #12]
    61ce:	e7e6      	b.n	619e <__smakebuf_r+0xe>
    61d0:	4b0d      	ldr	r3, [pc, #52]	; (6208 <__smakebuf_r+0x78>)
    61d2:	62ab      	str	r3, [r5, #40]	; 0x28
    61d4:	2380      	movs	r3, #128	; 0x80
    61d6:	89a2      	ldrh	r2, [r4, #12]
    61d8:	6020      	str	r0, [r4, #0]
    61da:	4313      	orrs	r3, r2
    61dc:	81a3      	strh	r3, [r4, #12]
    61de:	9b00      	ldr	r3, [sp, #0]
    61e0:	6120      	str	r0, [r4, #16]
    61e2:	6163      	str	r3, [r4, #20]
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d00a      	beq.n	6200 <__smakebuf_r+0x70>
    61ea:	230e      	movs	r3, #14
    61ec:	5ee1      	ldrsh	r1, [r4, r3]
    61ee:	0028      	movs	r0, r5
    61f0:	f001 fb7a 	bl	78e8 <_isatty_r>
    61f4:	2800      	cmp	r0, #0
    61f6:	d003      	beq.n	6200 <__smakebuf_r+0x70>
    61f8:	2301      	movs	r3, #1
    61fa:	89a2      	ldrh	r2, [r4, #12]
    61fc:	4313      	orrs	r3, r2
    61fe:	81a3      	strh	r3, [r4, #12]
    6200:	89a0      	ldrh	r0, [r4, #12]
    6202:	4338      	orrs	r0, r7
    6204:	81a0      	strh	r0, [r4, #12]
    6206:	e7d0      	b.n	61aa <__smakebuf_r+0x1a>
    6208:	00005f59 	.word	0x00005f59

0000620c <malloc>:
    620c:	b510      	push	{r4, lr}
    620e:	4b03      	ldr	r3, [pc, #12]	; (621c <malloc+0x10>)
    6210:	0001      	movs	r1, r0
    6212:	6818      	ldr	r0, [r3, #0]
    6214:	f000 f84e 	bl	62b4 <_malloc_r>
    6218:	bd10      	pop	{r4, pc}
    621a:	46c0      	nop			; (mov r8, r8)
    621c:	200000b0 	.word	0x200000b0

00006220 <_free_r>:
    6220:	b570      	push	{r4, r5, r6, lr}
    6222:	0005      	movs	r5, r0
    6224:	2900      	cmp	r1, #0
    6226:	d010      	beq.n	624a <_free_r+0x2a>
    6228:	1f0c      	subs	r4, r1, #4
    622a:	6823      	ldr	r3, [r4, #0]
    622c:	2b00      	cmp	r3, #0
    622e:	da00      	bge.n	6232 <_free_r+0x12>
    6230:	18e4      	adds	r4, r4, r3
    6232:	0028      	movs	r0, r5
    6234:	f001 fbc8 	bl	79c8 <__malloc_lock>
    6238:	4a1d      	ldr	r2, [pc, #116]	; (62b0 <_free_r+0x90>)
    623a:	6813      	ldr	r3, [r2, #0]
    623c:	2b00      	cmp	r3, #0
    623e:	d105      	bne.n	624c <_free_r+0x2c>
    6240:	6063      	str	r3, [r4, #4]
    6242:	6014      	str	r4, [r2, #0]
    6244:	0028      	movs	r0, r5
    6246:	f001 fbc0 	bl	79ca <__malloc_unlock>
    624a:	bd70      	pop	{r4, r5, r6, pc}
    624c:	42a3      	cmp	r3, r4
    624e:	d909      	bls.n	6264 <_free_r+0x44>
    6250:	6821      	ldr	r1, [r4, #0]
    6252:	1860      	adds	r0, r4, r1
    6254:	4283      	cmp	r3, r0
    6256:	d1f3      	bne.n	6240 <_free_r+0x20>
    6258:	6818      	ldr	r0, [r3, #0]
    625a:	685b      	ldr	r3, [r3, #4]
    625c:	1841      	adds	r1, r0, r1
    625e:	6021      	str	r1, [r4, #0]
    6260:	e7ee      	b.n	6240 <_free_r+0x20>
    6262:	0013      	movs	r3, r2
    6264:	685a      	ldr	r2, [r3, #4]
    6266:	2a00      	cmp	r2, #0
    6268:	d001      	beq.n	626e <_free_r+0x4e>
    626a:	42a2      	cmp	r2, r4
    626c:	d9f9      	bls.n	6262 <_free_r+0x42>
    626e:	6819      	ldr	r1, [r3, #0]
    6270:	1858      	adds	r0, r3, r1
    6272:	42a0      	cmp	r0, r4
    6274:	d10b      	bne.n	628e <_free_r+0x6e>
    6276:	6820      	ldr	r0, [r4, #0]
    6278:	1809      	adds	r1, r1, r0
    627a:	1858      	adds	r0, r3, r1
    627c:	6019      	str	r1, [r3, #0]
    627e:	4282      	cmp	r2, r0
    6280:	d1e0      	bne.n	6244 <_free_r+0x24>
    6282:	6810      	ldr	r0, [r2, #0]
    6284:	6852      	ldr	r2, [r2, #4]
    6286:	1841      	adds	r1, r0, r1
    6288:	6019      	str	r1, [r3, #0]
    628a:	605a      	str	r2, [r3, #4]
    628c:	e7da      	b.n	6244 <_free_r+0x24>
    628e:	42a0      	cmp	r0, r4
    6290:	d902      	bls.n	6298 <_free_r+0x78>
    6292:	230c      	movs	r3, #12
    6294:	602b      	str	r3, [r5, #0]
    6296:	e7d5      	b.n	6244 <_free_r+0x24>
    6298:	6821      	ldr	r1, [r4, #0]
    629a:	1860      	adds	r0, r4, r1
    629c:	4282      	cmp	r2, r0
    629e:	d103      	bne.n	62a8 <_free_r+0x88>
    62a0:	6810      	ldr	r0, [r2, #0]
    62a2:	6852      	ldr	r2, [r2, #4]
    62a4:	1841      	adds	r1, r0, r1
    62a6:	6021      	str	r1, [r4, #0]
    62a8:	6062      	str	r2, [r4, #4]
    62aa:	605c      	str	r4, [r3, #4]
    62ac:	e7ca      	b.n	6244 <_free_r+0x24>
    62ae:	46c0      	nop			; (mov r8, r8)
    62b0:	200008bc 	.word	0x200008bc

000062b4 <_malloc_r>:
    62b4:	2303      	movs	r3, #3
    62b6:	b570      	push	{r4, r5, r6, lr}
    62b8:	1ccd      	adds	r5, r1, #3
    62ba:	439d      	bics	r5, r3
    62bc:	3508      	adds	r5, #8
    62be:	0006      	movs	r6, r0
    62c0:	2d0c      	cmp	r5, #12
    62c2:	d21e      	bcs.n	6302 <_malloc_r+0x4e>
    62c4:	250c      	movs	r5, #12
    62c6:	42a9      	cmp	r1, r5
    62c8:	d81d      	bhi.n	6306 <_malloc_r+0x52>
    62ca:	0030      	movs	r0, r6
    62cc:	f001 fb7c 	bl	79c8 <__malloc_lock>
    62d0:	4a25      	ldr	r2, [pc, #148]	; (6368 <_malloc_r+0xb4>)
    62d2:	6814      	ldr	r4, [r2, #0]
    62d4:	0021      	movs	r1, r4
    62d6:	2900      	cmp	r1, #0
    62d8:	d119      	bne.n	630e <_malloc_r+0x5a>
    62da:	4c24      	ldr	r4, [pc, #144]	; (636c <_malloc_r+0xb8>)
    62dc:	6823      	ldr	r3, [r4, #0]
    62de:	2b00      	cmp	r3, #0
    62e0:	d103      	bne.n	62ea <_malloc_r+0x36>
    62e2:	0030      	movs	r0, r6
    62e4:	f001 f85a 	bl	739c <_sbrk_r>
    62e8:	6020      	str	r0, [r4, #0]
    62ea:	0029      	movs	r1, r5
    62ec:	0030      	movs	r0, r6
    62ee:	f001 f855 	bl	739c <_sbrk_r>
    62f2:	1c43      	adds	r3, r0, #1
    62f4:	d12c      	bne.n	6350 <_malloc_r+0x9c>
    62f6:	230c      	movs	r3, #12
    62f8:	0030      	movs	r0, r6
    62fa:	6033      	str	r3, [r6, #0]
    62fc:	f001 fb65 	bl	79ca <__malloc_unlock>
    6300:	e003      	b.n	630a <_malloc_r+0x56>
    6302:	2d00      	cmp	r5, #0
    6304:	dadf      	bge.n	62c6 <_malloc_r+0x12>
    6306:	230c      	movs	r3, #12
    6308:	6033      	str	r3, [r6, #0]
    630a:	2000      	movs	r0, #0
    630c:	bd70      	pop	{r4, r5, r6, pc}
    630e:	680b      	ldr	r3, [r1, #0]
    6310:	1b5b      	subs	r3, r3, r5
    6312:	d41a      	bmi.n	634a <_malloc_r+0x96>
    6314:	2b0b      	cmp	r3, #11
    6316:	d903      	bls.n	6320 <_malloc_r+0x6c>
    6318:	600b      	str	r3, [r1, #0]
    631a:	18cc      	adds	r4, r1, r3
    631c:	6025      	str	r5, [r4, #0]
    631e:	e003      	b.n	6328 <_malloc_r+0x74>
    6320:	428c      	cmp	r4, r1
    6322:	d10e      	bne.n	6342 <_malloc_r+0x8e>
    6324:	6863      	ldr	r3, [r4, #4]
    6326:	6013      	str	r3, [r2, #0]
    6328:	0030      	movs	r0, r6
    632a:	f001 fb4e 	bl	79ca <__malloc_unlock>
    632e:	0020      	movs	r0, r4
    6330:	2207      	movs	r2, #7
    6332:	300b      	adds	r0, #11
    6334:	1d23      	adds	r3, r4, #4
    6336:	4390      	bics	r0, r2
    6338:	1ac3      	subs	r3, r0, r3
    633a:	d0e7      	beq.n	630c <_malloc_r+0x58>
    633c:	425a      	negs	r2, r3
    633e:	50e2      	str	r2, [r4, r3]
    6340:	e7e4      	b.n	630c <_malloc_r+0x58>
    6342:	684b      	ldr	r3, [r1, #4]
    6344:	6063      	str	r3, [r4, #4]
    6346:	000c      	movs	r4, r1
    6348:	e7ee      	b.n	6328 <_malloc_r+0x74>
    634a:	000c      	movs	r4, r1
    634c:	6849      	ldr	r1, [r1, #4]
    634e:	e7c2      	b.n	62d6 <_malloc_r+0x22>
    6350:	2303      	movs	r3, #3
    6352:	1cc4      	adds	r4, r0, #3
    6354:	439c      	bics	r4, r3
    6356:	42a0      	cmp	r0, r4
    6358:	d0e0      	beq.n	631c <_malloc_r+0x68>
    635a:	1a21      	subs	r1, r4, r0
    635c:	0030      	movs	r0, r6
    635e:	f001 f81d 	bl	739c <_sbrk_r>
    6362:	1c43      	adds	r3, r0, #1
    6364:	d1da      	bne.n	631c <_malloc_r+0x68>
    6366:	e7c6      	b.n	62f6 <_malloc_r+0x42>
    6368:	200008bc 	.word	0x200008bc
    636c:	200008c0 	.word	0x200008c0

00006370 <__ssputs_r>:
    6370:	b5f0      	push	{r4, r5, r6, r7, lr}
    6372:	688e      	ldr	r6, [r1, #8]
    6374:	b085      	sub	sp, #20
    6376:	0007      	movs	r7, r0
    6378:	000c      	movs	r4, r1
    637a:	9203      	str	r2, [sp, #12]
    637c:	9301      	str	r3, [sp, #4]
    637e:	429e      	cmp	r6, r3
    6380:	d839      	bhi.n	63f6 <__ssputs_r+0x86>
    6382:	2390      	movs	r3, #144	; 0x90
    6384:	898a      	ldrh	r2, [r1, #12]
    6386:	00db      	lsls	r3, r3, #3
    6388:	421a      	tst	r2, r3
    638a:	d034      	beq.n	63f6 <__ssputs_r+0x86>
    638c:	2503      	movs	r5, #3
    638e:	6909      	ldr	r1, [r1, #16]
    6390:	6823      	ldr	r3, [r4, #0]
    6392:	1a5b      	subs	r3, r3, r1
    6394:	9302      	str	r3, [sp, #8]
    6396:	6963      	ldr	r3, [r4, #20]
    6398:	9802      	ldr	r0, [sp, #8]
    639a:	435d      	muls	r5, r3
    639c:	0feb      	lsrs	r3, r5, #31
    639e:	195d      	adds	r5, r3, r5
    63a0:	9b01      	ldr	r3, [sp, #4]
    63a2:	106d      	asrs	r5, r5, #1
    63a4:	3301      	adds	r3, #1
    63a6:	181b      	adds	r3, r3, r0
    63a8:	42ab      	cmp	r3, r5
    63aa:	d900      	bls.n	63ae <__ssputs_r+0x3e>
    63ac:	001d      	movs	r5, r3
    63ae:	0553      	lsls	r3, r2, #21
    63b0:	d532      	bpl.n	6418 <__ssputs_r+0xa8>
    63b2:	0029      	movs	r1, r5
    63b4:	0038      	movs	r0, r7
    63b6:	f7ff ff7d 	bl	62b4 <_malloc_r>
    63ba:	1e06      	subs	r6, r0, #0
    63bc:	d109      	bne.n	63d2 <__ssputs_r+0x62>
    63be:	230c      	movs	r3, #12
    63c0:	603b      	str	r3, [r7, #0]
    63c2:	2340      	movs	r3, #64	; 0x40
    63c4:	2001      	movs	r0, #1
    63c6:	89a2      	ldrh	r2, [r4, #12]
    63c8:	4240      	negs	r0, r0
    63ca:	4313      	orrs	r3, r2
    63cc:	81a3      	strh	r3, [r4, #12]
    63ce:	b005      	add	sp, #20
    63d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63d2:	9a02      	ldr	r2, [sp, #8]
    63d4:	6921      	ldr	r1, [r4, #16]
    63d6:	f001 fadc 	bl	7992 <memcpy>
    63da:	89a3      	ldrh	r3, [r4, #12]
    63dc:	4a14      	ldr	r2, [pc, #80]	; (6430 <__ssputs_r+0xc0>)
    63de:	401a      	ands	r2, r3
    63e0:	2380      	movs	r3, #128	; 0x80
    63e2:	4313      	orrs	r3, r2
    63e4:	81a3      	strh	r3, [r4, #12]
    63e6:	9b02      	ldr	r3, [sp, #8]
    63e8:	6126      	str	r6, [r4, #16]
    63ea:	18f6      	adds	r6, r6, r3
    63ec:	6026      	str	r6, [r4, #0]
    63ee:	6165      	str	r5, [r4, #20]
    63f0:	9e01      	ldr	r6, [sp, #4]
    63f2:	1aed      	subs	r5, r5, r3
    63f4:	60a5      	str	r5, [r4, #8]
    63f6:	9b01      	ldr	r3, [sp, #4]
    63f8:	42b3      	cmp	r3, r6
    63fa:	d200      	bcs.n	63fe <__ssputs_r+0x8e>
    63fc:	001e      	movs	r6, r3
    63fe:	0032      	movs	r2, r6
    6400:	9903      	ldr	r1, [sp, #12]
    6402:	6820      	ldr	r0, [r4, #0]
    6404:	f001 face 	bl	79a4 <memmove>
    6408:	68a3      	ldr	r3, [r4, #8]
    640a:	2000      	movs	r0, #0
    640c:	1b9b      	subs	r3, r3, r6
    640e:	60a3      	str	r3, [r4, #8]
    6410:	6823      	ldr	r3, [r4, #0]
    6412:	199e      	adds	r6, r3, r6
    6414:	6026      	str	r6, [r4, #0]
    6416:	e7da      	b.n	63ce <__ssputs_r+0x5e>
    6418:	002a      	movs	r2, r5
    641a:	0038      	movs	r0, r7
    641c:	f001 fad6 	bl	79cc <_realloc_r>
    6420:	1e06      	subs	r6, r0, #0
    6422:	d1e0      	bne.n	63e6 <__ssputs_r+0x76>
    6424:	6921      	ldr	r1, [r4, #16]
    6426:	0038      	movs	r0, r7
    6428:	f7ff fefa 	bl	6220 <_free_r>
    642c:	e7c7      	b.n	63be <__ssputs_r+0x4e>
    642e:	46c0      	nop			; (mov r8, r8)
    6430:	fffffb7f 	.word	0xfffffb7f

00006434 <_svfiprintf_r>:
    6434:	b5f0      	push	{r4, r5, r6, r7, lr}
    6436:	b09f      	sub	sp, #124	; 0x7c
    6438:	9002      	str	r0, [sp, #8]
    643a:	9305      	str	r3, [sp, #20]
    643c:	898b      	ldrh	r3, [r1, #12]
    643e:	000f      	movs	r7, r1
    6440:	0016      	movs	r6, r2
    6442:	061b      	lsls	r3, r3, #24
    6444:	d511      	bpl.n	646a <_svfiprintf_r+0x36>
    6446:	690b      	ldr	r3, [r1, #16]
    6448:	2b00      	cmp	r3, #0
    644a:	d10e      	bne.n	646a <_svfiprintf_r+0x36>
    644c:	2140      	movs	r1, #64	; 0x40
    644e:	f7ff ff31 	bl	62b4 <_malloc_r>
    6452:	6038      	str	r0, [r7, #0]
    6454:	6138      	str	r0, [r7, #16]
    6456:	2800      	cmp	r0, #0
    6458:	d105      	bne.n	6466 <_svfiprintf_r+0x32>
    645a:	230c      	movs	r3, #12
    645c:	9a02      	ldr	r2, [sp, #8]
    645e:	3801      	subs	r0, #1
    6460:	6013      	str	r3, [r2, #0]
    6462:	b01f      	add	sp, #124	; 0x7c
    6464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6466:	2340      	movs	r3, #64	; 0x40
    6468:	617b      	str	r3, [r7, #20]
    646a:	2300      	movs	r3, #0
    646c:	ad06      	add	r5, sp, #24
    646e:	616b      	str	r3, [r5, #20]
    6470:	3320      	adds	r3, #32
    6472:	766b      	strb	r3, [r5, #25]
    6474:	3310      	adds	r3, #16
    6476:	76ab      	strb	r3, [r5, #26]
    6478:	0034      	movs	r4, r6
    647a:	7823      	ldrb	r3, [r4, #0]
    647c:	2b00      	cmp	r3, #0
    647e:	d147      	bne.n	6510 <_svfiprintf_r+0xdc>
    6480:	1ba3      	subs	r3, r4, r6
    6482:	9304      	str	r3, [sp, #16]
    6484:	d00d      	beq.n	64a2 <_svfiprintf_r+0x6e>
    6486:	1ba3      	subs	r3, r4, r6
    6488:	0032      	movs	r2, r6
    648a:	0039      	movs	r1, r7
    648c:	9802      	ldr	r0, [sp, #8]
    648e:	f7ff ff6f 	bl	6370 <__ssputs_r>
    6492:	1c43      	adds	r3, r0, #1
    6494:	d100      	bne.n	6498 <_svfiprintf_r+0x64>
    6496:	e0b5      	b.n	6604 <_svfiprintf_r+0x1d0>
    6498:	696a      	ldr	r2, [r5, #20]
    649a:	9b04      	ldr	r3, [sp, #16]
    649c:	4694      	mov	ip, r2
    649e:	4463      	add	r3, ip
    64a0:	616b      	str	r3, [r5, #20]
    64a2:	7823      	ldrb	r3, [r4, #0]
    64a4:	2b00      	cmp	r3, #0
    64a6:	d100      	bne.n	64aa <_svfiprintf_r+0x76>
    64a8:	e0ac      	b.n	6604 <_svfiprintf_r+0x1d0>
    64aa:	2201      	movs	r2, #1
    64ac:	2300      	movs	r3, #0
    64ae:	4252      	negs	r2, r2
    64b0:	606a      	str	r2, [r5, #4]
    64b2:	a902      	add	r1, sp, #8
    64b4:	3254      	adds	r2, #84	; 0x54
    64b6:	1852      	adds	r2, r2, r1
    64b8:	3401      	adds	r4, #1
    64ba:	602b      	str	r3, [r5, #0]
    64bc:	60eb      	str	r3, [r5, #12]
    64be:	60ab      	str	r3, [r5, #8]
    64c0:	7013      	strb	r3, [r2, #0]
    64c2:	65ab      	str	r3, [r5, #88]	; 0x58
    64c4:	4e58      	ldr	r6, [pc, #352]	; (6628 <_svfiprintf_r+0x1f4>)
    64c6:	2205      	movs	r2, #5
    64c8:	7821      	ldrb	r1, [r4, #0]
    64ca:	0030      	movs	r0, r6
    64cc:	f001 fa56 	bl	797c <memchr>
    64d0:	1c62      	adds	r2, r4, #1
    64d2:	2800      	cmp	r0, #0
    64d4:	d120      	bne.n	6518 <_svfiprintf_r+0xe4>
    64d6:	6829      	ldr	r1, [r5, #0]
    64d8:	06cb      	lsls	r3, r1, #27
    64da:	d504      	bpl.n	64e6 <_svfiprintf_r+0xb2>
    64dc:	2353      	movs	r3, #83	; 0x53
    64de:	ae02      	add	r6, sp, #8
    64e0:	3020      	adds	r0, #32
    64e2:	199b      	adds	r3, r3, r6
    64e4:	7018      	strb	r0, [r3, #0]
    64e6:	070b      	lsls	r3, r1, #28
    64e8:	d504      	bpl.n	64f4 <_svfiprintf_r+0xc0>
    64ea:	2353      	movs	r3, #83	; 0x53
    64ec:	202b      	movs	r0, #43	; 0x2b
    64ee:	ae02      	add	r6, sp, #8
    64f0:	199b      	adds	r3, r3, r6
    64f2:	7018      	strb	r0, [r3, #0]
    64f4:	7823      	ldrb	r3, [r4, #0]
    64f6:	2b2a      	cmp	r3, #42	; 0x2a
    64f8:	d016      	beq.n	6528 <_svfiprintf_r+0xf4>
    64fa:	2000      	movs	r0, #0
    64fc:	210a      	movs	r1, #10
    64fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6500:	7822      	ldrb	r2, [r4, #0]
    6502:	3a30      	subs	r2, #48	; 0x30
    6504:	2a09      	cmp	r2, #9
    6506:	d955      	bls.n	65b4 <_svfiprintf_r+0x180>
    6508:	2800      	cmp	r0, #0
    650a:	d015      	beq.n	6538 <_svfiprintf_r+0x104>
    650c:	9309      	str	r3, [sp, #36]	; 0x24
    650e:	e013      	b.n	6538 <_svfiprintf_r+0x104>
    6510:	2b25      	cmp	r3, #37	; 0x25
    6512:	d0b5      	beq.n	6480 <_svfiprintf_r+0x4c>
    6514:	3401      	adds	r4, #1
    6516:	e7b0      	b.n	647a <_svfiprintf_r+0x46>
    6518:	2301      	movs	r3, #1
    651a:	1b80      	subs	r0, r0, r6
    651c:	4083      	lsls	r3, r0
    651e:	6829      	ldr	r1, [r5, #0]
    6520:	0014      	movs	r4, r2
    6522:	430b      	orrs	r3, r1
    6524:	602b      	str	r3, [r5, #0]
    6526:	e7cd      	b.n	64c4 <_svfiprintf_r+0x90>
    6528:	9b05      	ldr	r3, [sp, #20]
    652a:	1d18      	adds	r0, r3, #4
    652c:	681b      	ldr	r3, [r3, #0]
    652e:	9005      	str	r0, [sp, #20]
    6530:	2b00      	cmp	r3, #0
    6532:	db39      	blt.n	65a8 <_svfiprintf_r+0x174>
    6534:	9309      	str	r3, [sp, #36]	; 0x24
    6536:	0014      	movs	r4, r2
    6538:	7823      	ldrb	r3, [r4, #0]
    653a:	2b2e      	cmp	r3, #46	; 0x2e
    653c:	d10b      	bne.n	6556 <_svfiprintf_r+0x122>
    653e:	7863      	ldrb	r3, [r4, #1]
    6540:	1c62      	adds	r2, r4, #1
    6542:	2b2a      	cmp	r3, #42	; 0x2a
    6544:	d13e      	bne.n	65c4 <_svfiprintf_r+0x190>
    6546:	9b05      	ldr	r3, [sp, #20]
    6548:	3402      	adds	r4, #2
    654a:	1d1a      	adds	r2, r3, #4
    654c:	681b      	ldr	r3, [r3, #0]
    654e:	9205      	str	r2, [sp, #20]
    6550:	2b00      	cmp	r3, #0
    6552:	db34      	blt.n	65be <_svfiprintf_r+0x18a>
    6554:	9307      	str	r3, [sp, #28]
    6556:	4e35      	ldr	r6, [pc, #212]	; (662c <_svfiprintf_r+0x1f8>)
    6558:	7821      	ldrb	r1, [r4, #0]
    655a:	2203      	movs	r2, #3
    655c:	0030      	movs	r0, r6
    655e:	f001 fa0d 	bl	797c <memchr>
    6562:	2800      	cmp	r0, #0
    6564:	d006      	beq.n	6574 <_svfiprintf_r+0x140>
    6566:	2340      	movs	r3, #64	; 0x40
    6568:	1b80      	subs	r0, r0, r6
    656a:	4083      	lsls	r3, r0
    656c:	682a      	ldr	r2, [r5, #0]
    656e:	3401      	adds	r4, #1
    6570:	4313      	orrs	r3, r2
    6572:	602b      	str	r3, [r5, #0]
    6574:	7821      	ldrb	r1, [r4, #0]
    6576:	2206      	movs	r2, #6
    6578:	482d      	ldr	r0, [pc, #180]	; (6630 <_svfiprintf_r+0x1fc>)
    657a:	1c66      	adds	r6, r4, #1
    657c:	7629      	strb	r1, [r5, #24]
    657e:	f001 f9fd 	bl	797c <memchr>
    6582:	2800      	cmp	r0, #0
    6584:	d046      	beq.n	6614 <_svfiprintf_r+0x1e0>
    6586:	4b2b      	ldr	r3, [pc, #172]	; (6634 <_svfiprintf_r+0x200>)
    6588:	2b00      	cmp	r3, #0
    658a:	d12f      	bne.n	65ec <_svfiprintf_r+0x1b8>
    658c:	6829      	ldr	r1, [r5, #0]
    658e:	9b05      	ldr	r3, [sp, #20]
    6590:	2207      	movs	r2, #7
    6592:	05c9      	lsls	r1, r1, #23
    6594:	d528      	bpl.n	65e8 <_svfiprintf_r+0x1b4>
    6596:	189b      	adds	r3, r3, r2
    6598:	4393      	bics	r3, r2
    659a:	3308      	adds	r3, #8
    659c:	9305      	str	r3, [sp, #20]
    659e:	696b      	ldr	r3, [r5, #20]
    65a0:	9a03      	ldr	r2, [sp, #12]
    65a2:	189b      	adds	r3, r3, r2
    65a4:	616b      	str	r3, [r5, #20]
    65a6:	e767      	b.n	6478 <_svfiprintf_r+0x44>
    65a8:	425b      	negs	r3, r3
    65aa:	60eb      	str	r3, [r5, #12]
    65ac:	2302      	movs	r3, #2
    65ae:	430b      	orrs	r3, r1
    65b0:	602b      	str	r3, [r5, #0]
    65b2:	e7c0      	b.n	6536 <_svfiprintf_r+0x102>
    65b4:	434b      	muls	r3, r1
    65b6:	3401      	adds	r4, #1
    65b8:	189b      	adds	r3, r3, r2
    65ba:	2001      	movs	r0, #1
    65bc:	e7a0      	b.n	6500 <_svfiprintf_r+0xcc>
    65be:	2301      	movs	r3, #1
    65c0:	425b      	negs	r3, r3
    65c2:	e7c7      	b.n	6554 <_svfiprintf_r+0x120>
    65c4:	2300      	movs	r3, #0
    65c6:	0014      	movs	r4, r2
    65c8:	200a      	movs	r0, #10
    65ca:	001a      	movs	r2, r3
    65cc:	606b      	str	r3, [r5, #4]
    65ce:	7821      	ldrb	r1, [r4, #0]
    65d0:	3930      	subs	r1, #48	; 0x30
    65d2:	2909      	cmp	r1, #9
    65d4:	d903      	bls.n	65de <_svfiprintf_r+0x1aa>
    65d6:	2b00      	cmp	r3, #0
    65d8:	d0bd      	beq.n	6556 <_svfiprintf_r+0x122>
    65da:	9207      	str	r2, [sp, #28]
    65dc:	e7bb      	b.n	6556 <_svfiprintf_r+0x122>
    65de:	4342      	muls	r2, r0
    65e0:	3401      	adds	r4, #1
    65e2:	1852      	adds	r2, r2, r1
    65e4:	2301      	movs	r3, #1
    65e6:	e7f2      	b.n	65ce <_svfiprintf_r+0x19a>
    65e8:	3307      	adds	r3, #7
    65ea:	e7d5      	b.n	6598 <_svfiprintf_r+0x164>
    65ec:	ab05      	add	r3, sp, #20
    65ee:	9300      	str	r3, [sp, #0]
    65f0:	003a      	movs	r2, r7
    65f2:	4b11      	ldr	r3, [pc, #68]	; (6638 <_svfiprintf_r+0x204>)
    65f4:	0029      	movs	r1, r5
    65f6:	9802      	ldr	r0, [sp, #8]
    65f8:	e000      	b.n	65fc <_svfiprintf_r+0x1c8>
    65fa:	bf00      	nop
    65fc:	9003      	str	r0, [sp, #12]
    65fe:	9b03      	ldr	r3, [sp, #12]
    6600:	3301      	adds	r3, #1
    6602:	d1cc      	bne.n	659e <_svfiprintf_r+0x16a>
    6604:	89bb      	ldrh	r3, [r7, #12]
    6606:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6608:	065b      	lsls	r3, r3, #25
    660a:	d400      	bmi.n	660e <_svfiprintf_r+0x1da>
    660c:	e729      	b.n	6462 <_svfiprintf_r+0x2e>
    660e:	2001      	movs	r0, #1
    6610:	4240      	negs	r0, r0
    6612:	e726      	b.n	6462 <_svfiprintf_r+0x2e>
    6614:	ab05      	add	r3, sp, #20
    6616:	9300      	str	r3, [sp, #0]
    6618:	003a      	movs	r2, r7
    661a:	4b07      	ldr	r3, [pc, #28]	; (6638 <_svfiprintf_r+0x204>)
    661c:	0029      	movs	r1, r5
    661e:	9802      	ldr	r0, [sp, #8]
    6620:	f000 f9be 	bl	69a0 <_printf_i>
    6624:	e7ea      	b.n	65fc <_svfiprintf_r+0x1c8>
    6626:	46c0      	nop			; (mov r8, r8)
    6628:	00008ce0 	.word	0x00008ce0
    662c:	00008ce6 	.word	0x00008ce6
    6630:	00008cea 	.word	0x00008cea
    6634:	00000000 	.word	0x00000000
    6638:	00006371 	.word	0x00006371

0000663c <__sfputc_r>:
    663c:	6893      	ldr	r3, [r2, #8]
    663e:	b510      	push	{r4, lr}
    6640:	3b01      	subs	r3, #1
    6642:	6093      	str	r3, [r2, #8]
    6644:	2b00      	cmp	r3, #0
    6646:	da05      	bge.n	6654 <__sfputc_r+0x18>
    6648:	6994      	ldr	r4, [r2, #24]
    664a:	42a3      	cmp	r3, r4
    664c:	db08      	blt.n	6660 <__sfputc_r+0x24>
    664e:	b2cb      	uxtb	r3, r1
    6650:	2b0a      	cmp	r3, #10
    6652:	d005      	beq.n	6660 <__sfputc_r+0x24>
    6654:	6813      	ldr	r3, [r2, #0]
    6656:	1c58      	adds	r0, r3, #1
    6658:	6010      	str	r0, [r2, #0]
    665a:	7019      	strb	r1, [r3, #0]
    665c:	b2c8      	uxtb	r0, r1
    665e:	bd10      	pop	{r4, pc}
    6660:	f7ff fae4 	bl	5c2c <__swbuf_r>
    6664:	e7fb      	b.n	665e <__sfputc_r+0x22>

00006666 <__sfputs_r>:
    6666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6668:	0006      	movs	r6, r0
    666a:	000f      	movs	r7, r1
    666c:	0014      	movs	r4, r2
    666e:	18d5      	adds	r5, r2, r3
    6670:	42ac      	cmp	r4, r5
    6672:	d101      	bne.n	6678 <__sfputs_r+0x12>
    6674:	2000      	movs	r0, #0
    6676:	e007      	b.n	6688 <__sfputs_r+0x22>
    6678:	7821      	ldrb	r1, [r4, #0]
    667a:	003a      	movs	r2, r7
    667c:	0030      	movs	r0, r6
    667e:	f7ff ffdd 	bl	663c <__sfputc_r>
    6682:	3401      	adds	r4, #1
    6684:	1c43      	adds	r3, r0, #1
    6686:	d1f3      	bne.n	6670 <__sfputs_r+0xa>
    6688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000668c <_vfiprintf_r>:
    668c:	b5f0      	push	{r4, r5, r6, r7, lr}
    668e:	b09f      	sub	sp, #124	; 0x7c
    6690:	0006      	movs	r6, r0
    6692:	000f      	movs	r7, r1
    6694:	0014      	movs	r4, r2
    6696:	9305      	str	r3, [sp, #20]
    6698:	2800      	cmp	r0, #0
    669a:	d004      	beq.n	66a6 <_vfiprintf_r+0x1a>
    669c:	6983      	ldr	r3, [r0, #24]
    669e:	2b00      	cmp	r3, #0
    66a0:	d101      	bne.n	66a6 <_vfiprintf_r+0x1a>
    66a2:	f7ff fc9b 	bl	5fdc <__sinit>
    66a6:	4b7f      	ldr	r3, [pc, #508]	; (68a4 <_vfiprintf_r+0x218>)
    66a8:	429f      	cmp	r7, r3
    66aa:	d15c      	bne.n	6766 <_vfiprintf_r+0xda>
    66ac:	6877      	ldr	r7, [r6, #4]
    66ae:	89bb      	ldrh	r3, [r7, #12]
    66b0:	071b      	lsls	r3, r3, #28
    66b2:	d562      	bpl.n	677a <_vfiprintf_r+0xee>
    66b4:	693b      	ldr	r3, [r7, #16]
    66b6:	2b00      	cmp	r3, #0
    66b8:	d05f      	beq.n	677a <_vfiprintf_r+0xee>
    66ba:	2300      	movs	r3, #0
    66bc:	ad06      	add	r5, sp, #24
    66be:	616b      	str	r3, [r5, #20]
    66c0:	3320      	adds	r3, #32
    66c2:	766b      	strb	r3, [r5, #25]
    66c4:	3310      	adds	r3, #16
    66c6:	76ab      	strb	r3, [r5, #26]
    66c8:	9402      	str	r4, [sp, #8]
    66ca:	9c02      	ldr	r4, [sp, #8]
    66cc:	7823      	ldrb	r3, [r4, #0]
    66ce:	2b00      	cmp	r3, #0
    66d0:	d15d      	bne.n	678e <_vfiprintf_r+0x102>
    66d2:	9b02      	ldr	r3, [sp, #8]
    66d4:	1ae3      	subs	r3, r4, r3
    66d6:	9304      	str	r3, [sp, #16]
    66d8:	d00d      	beq.n	66f6 <_vfiprintf_r+0x6a>
    66da:	9b04      	ldr	r3, [sp, #16]
    66dc:	9a02      	ldr	r2, [sp, #8]
    66de:	0039      	movs	r1, r7
    66e0:	0030      	movs	r0, r6
    66e2:	f7ff ffc0 	bl	6666 <__sfputs_r>
    66e6:	1c43      	adds	r3, r0, #1
    66e8:	d100      	bne.n	66ec <_vfiprintf_r+0x60>
    66ea:	e0cc      	b.n	6886 <_vfiprintf_r+0x1fa>
    66ec:	696a      	ldr	r2, [r5, #20]
    66ee:	9b04      	ldr	r3, [sp, #16]
    66f0:	4694      	mov	ip, r2
    66f2:	4463      	add	r3, ip
    66f4:	616b      	str	r3, [r5, #20]
    66f6:	7823      	ldrb	r3, [r4, #0]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d100      	bne.n	66fe <_vfiprintf_r+0x72>
    66fc:	e0c3      	b.n	6886 <_vfiprintf_r+0x1fa>
    66fe:	2201      	movs	r2, #1
    6700:	2300      	movs	r3, #0
    6702:	4252      	negs	r2, r2
    6704:	606a      	str	r2, [r5, #4]
    6706:	a902      	add	r1, sp, #8
    6708:	3254      	adds	r2, #84	; 0x54
    670a:	1852      	adds	r2, r2, r1
    670c:	3401      	adds	r4, #1
    670e:	602b      	str	r3, [r5, #0]
    6710:	60eb      	str	r3, [r5, #12]
    6712:	60ab      	str	r3, [r5, #8]
    6714:	7013      	strb	r3, [r2, #0]
    6716:	65ab      	str	r3, [r5, #88]	; 0x58
    6718:	7821      	ldrb	r1, [r4, #0]
    671a:	2205      	movs	r2, #5
    671c:	4862      	ldr	r0, [pc, #392]	; (68a8 <_vfiprintf_r+0x21c>)
    671e:	f001 f92d 	bl	797c <memchr>
    6722:	1c63      	adds	r3, r4, #1
    6724:	469c      	mov	ip, r3
    6726:	2800      	cmp	r0, #0
    6728:	d135      	bne.n	6796 <_vfiprintf_r+0x10a>
    672a:	6829      	ldr	r1, [r5, #0]
    672c:	06cb      	lsls	r3, r1, #27
    672e:	d504      	bpl.n	673a <_vfiprintf_r+0xae>
    6730:	2353      	movs	r3, #83	; 0x53
    6732:	aa02      	add	r2, sp, #8
    6734:	3020      	adds	r0, #32
    6736:	189b      	adds	r3, r3, r2
    6738:	7018      	strb	r0, [r3, #0]
    673a:	070b      	lsls	r3, r1, #28
    673c:	d504      	bpl.n	6748 <_vfiprintf_r+0xbc>
    673e:	2353      	movs	r3, #83	; 0x53
    6740:	202b      	movs	r0, #43	; 0x2b
    6742:	aa02      	add	r2, sp, #8
    6744:	189b      	adds	r3, r3, r2
    6746:	7018      	strb	r0, [r3, #0]
    6748:	7823      	ldrb	r3, [r4, #0]
    674a:	2b2a      	cmp	r3, #42	; 0x2a
    674c:	d02c      	beq.n	67a8 <_vfiprintf_r+0x11c>
    674e:	2000      	movs	r0, #0
    6750:	210a      	movs	r1, #10
    6752:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6754:	7822      	ldrb	r2, [r4, #0]
    6756:	3a30      	subs	r2, #48	; 0x30
    6758:	2a09      	cmp	r2, #9
    675a:	d800      	bhi.n	675e <_vfiprintf_r+0xd2>
    675c:	e06b      	b.n	6836 <_vfiprintf_r+0x1aa>
    675e:	2800      	cmp	r0, #0
    6760:	d02a      	beq.n	67b8 <_vfiprintf_r+0x12c>
    6762:	9309      	str	r3, [sp, #36]	; 0x24
    6764:	e028      	b.n	67b8 <_vfiprintf_r+0x12c>
    6766:	4b51      	ldr	r3, [pc, #324]	; (68ac <_vfiprintf_r+0x220>)
    6768:	429f      	cmp	r7, r3
    676a:	d101      	bne.n	6770 <_vfiprintf_r+0xe4>
    676c:	68b7      	ldr	r7, [r6, #8]
    676e:	e79e      	b.n	66ae <_vfiprintf_r+0x22>
    6770:	4b4f      	ldr	r3, [pc, #316]	; (68b0 <_vfiprintf_r+0x224>)
    6772:	429f      	cmp	r7, r3
    6774:	d19b      	bne.n	66ae <_vfiprintf_r+0x22>
    6776:	68f7      	ldr	r7, [r6, #12]
    6778:	e799      	b.n	66ae <_vfiprintf_r+0x22>
    677a:	0039      	movs	r1, r7
    677c:	0030      	movs	r0, r6
    677e:	f7ff faab 	bl	5cd8 <__swsetup_r>
    6782:	2800      	cmp	r0, #0
    6784:	d099      	beq.n	66ba <_vfiprintf_r+0x2e>
    6786:	2001      	movs	r0, #1
    6788:	4240      	negs	r0, r0
    678a:	b01f      	add	sp, #124	; 0x7c
    678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    678e:	2b25      	cmp	r3, #37	; 0x25
    6790:	d09f      	beq.n	66d2 <_vfiprintf_r+0x46>
    6792:	3401      	adds	r4, #1
    6794:	e79a      	b.n	66cc <_vfiprintf_r+0x40>
    6796:	4b44      	ldr	r3, [pc, #272]	; (68a8 <_vfiprintf_r+0x21c>)
    6798:	6829      	ldr	r1, [r5, #0]
    679a:	1ac0      	subs	r0, r0, r3
    679c:	2301      	movs	r3, #1
    679e:	4083      	lsls	r3, r0
    67a0:	430b      	orrs	r3, r1
    67a2:	602b      	str	r3, [r5, #0]
    67a4:	4664      	mov	r4, ip
    67a6:	e7b7      	b.n	6718 <_vfiprintf_r+0x8c>
    67a8:	9b05      	ldr	r3, [sp, #20]
    67aa:	1d18      	adds	r0, r3, #4
    67ac:	681b      	ldr	r3, [r3, #0]
    67ae:	9005      	str	r0, [sp, #20]
    67b0:	2b00      	cmp	r3, #0
    67b2:	db3a      	blt.n	682a <_vfiprintf_r+0x19e>
    67b4:	9309      	str	r3, [sp, #36]	; 0x24
    67b6:	4664      	mov	r4, ip
    67b8:	7823      	ldrb	r3, [r4, #0]
    67ba:	2b2e      	cmp	r3, #46	; 0x2e
    67bc:	d10b      	bne.n	67d6 <_vfiprintf_r+0x14a>
    67be:	7863      	ldrb	r3, [r4, #1]
    67c0:	1c62      	adds	r2, r4, #1
    67c2:	2b2a      	cmp	r3, #42	; 0x2a
    67c4:	d13f      	bne.n	6846 <_vfiprintf_r+0x1ba>
    67c6:	9b05      	ldr	r3, [sp, #20]
    67c8:	3402      	adds	r4, #2
    67ca:	1d1a      	adds	r2, r3, #4
    67cc:	681b      	ldr	r3, [r3, #0]
    67ce:	9205      	str	r2, [sp, #20]
    67d0:	2b00      	cmp	r3, #0
    67d2:	db35      	blt.n	6840 <_vfiprintf_r+0x1b4>
    67d4:	9307      	str	r3, [sp, #28]
    67d6:	7821      	ldrb	r1, [r4, #0]
    67d8:	2203      	movs	r2, #3
    67da:	4836      	ldr	r0, [pc, #216]	; (68b4 <_vfiprintf_r+0x228>)
    67dc:	f001 f8ce 	bl	797c <memchr>
    67e0:	2800      	cmp	r0, #0
    67e2:	d007      	beq.n	67f4 <_vfiprintf_r+0x168>
    67e4:	4b33      	ldr	r3, [pc, #204]	; (68b4 <_vfiprintf_r+0x228>)
    67e6:	682a      	ldr	r2, [r5, #0]
    67e8:	1ac0      	subs	r0, r0, r3
    67ea:	2340      	movs	r3, #64	; 0x40
    67ec:	4083      	lsls	r3, r0
    67ee:	4313      	orrs	r3, r2
    67f0:	602b      	str	r3, [r5, #0]
    67f2:	3401      	adds	r4, #1
    67f4:	7821      	ldrb	r1, [r4, #0]
    67f6:	1c63      	adds	r3, r4, #1
    67f8:	2206      	movs	r2, #6
    67fa:	482f      	ldr	r0, [pc, #188]	; (68b8 <_vfiprintf_r+0x22c>)
    67fc:	9302      	str	r3, [sp, #8]
    67fe:	7629      	strb	r1, [r5, #24]
    6800:	f001 f8bc 	bl	797c <memchr>
    6804:	2800      	cmp	r0, #0
    6806:	d044      	beq.n	6892 <_vfiprintf_r+0x206>
    6808:	4b2c      	ldr	r3, [pc, #176]	; (68bc <_vfiprintf_r+0x230>)
    680a:	2b00      	cmp	r3, #0
    680c:	d12f      	bne.n	686e <_vfiprintf_r+0x1e2>
    680e:	6829      	ldr	r1, [r5, #0]
    6810:	9b05      	ldr	r3, [sp, #20]
    6812:	2207      	movs	r2, #7
    6814:	05c9      	lsls	r1, r1, #23
    6816:	d528      	bpl.n	686a <_vfiprintf_r+0x1de>
    6818:	189b      	adds	r3, r3, r2
    681a:	4393      	bics	r3, r2
    681c:	3308      	adds	r3, #8
    681e:	9305      	str	r3, [sp, #20]
    6820:	696b      	ldr	r3, [r5, #20]
    6822:	9a03      	ldr	r2, [sp, #12]
    6824:	189b      	adds	r3, r3, r2
    6826:	616b      	str	r3, [r5, #20]
    6828:	e74f      	b.n	66ca <_vfiprintf_r+0x3e>
    682a:	425b      	negs	r3, r3
    682c:	60eb      	str	r3, [r5, #12]
    682e:	2302      	movs	r3, #2
    6830:	430b      	orrs	r3, r1
    6832:	602b      	str	r3, [r5, #0]
    6834:	e7bf      	b.n	67b6 <_vfiprintf_r+0x12a>
    6836:	434b      	muls	r3, r1
    6838:	3401      	adds	r4, #1
    683a:	189b      	adds	r3, r3, r2
    683c:	2001      	movs	r0, #1
    683e:	e789      	b.n	6754 <_vfiprintf_r+0xc8>
    6840:	2301      	movs	r3, #1
    6842:	425b      	negs	r3, r3
    6844:	e7c6      	b.n	67d4 <_vfiprintf_r+0x148>
    6846:	2300      	movs	r3, #0
    6848:	0014      	movs	r4, r2
    684a:	200a      	movs	r0, #10
    684c:	001a      	movs	r2, r3
    684e:	606b      	str	r3, [r5, #4]
    6850:	7821      	ldrb	r1, [r4, #0]
    6852:	3930      	subs	r1, #48	; 0x30
    6854:	2909      	cmp	r1, #9
    6856:	d903      	bls.n	6860 <_vfiprintf_r+0x1d4>
    6858:	2b00      	cmp	r3, #0
    685a:	d0bc      	beq.n	67d6 <_vfiprintf_r+0x14a>
    685c:	9207      	str	r2, [sp, #28]
    685e:	e7ba      	b.n	67d6 <_vfiprintf_r+0x14a>
    6860:	4342      	muls	r2, r0
    6862:	3401      	adds	r4, #1
    6864:	1852      	adds	r2, r2, r1
    6866:	2301      	movs	r3, #1
    6868:	e7f2      	b.n	6850 <_vfiprintf_r+0x1c4>
    686a:	3307      	adds	r3, #7
    686c:	e7d5      	b.n	681a <_vfiprintf_r+0x18e>
    686e:	ab05      	add	r3, sp, #20
    6870:	9300      	str	r3, [sp, #0]
    6872:	003a      	movs	r2, r7
    6874:	4b12      	ldr	r3, [pc, #72]	; (68c0 <_vfiprintf_r+0x234>)
    6876:	0029      	movs	r1, r5
    6878:	0030      	movs	r0, r6
    687a:	e000      	b.n	687e <_vfiprintf_r+0x1f2>
    687c:	bf00      	nop
    687e:	9003      	str	r0, [sp, #12]
    6880:	9b03      	ldr	r3, [sp, #12]
    6882:	3301      	adds	r3, #1
    6884:	d1cc      	bne.n	6820 <_vfiprintf_r+0x194>
    6886:	89bb      	ldrh	r3, [r7, #12]
    6888:	065b      	lsls	r3, r3, #25
    688a:	d500      	bpl.n	688e <_vfiprintf_r+0x202>
    688c:	e77b      	b.n	6786 <_vfiprintf_r+0xfa>
    688e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6890:	e77b      	b.n	678a <_vfiprintf_r+0xfe>
    6892:	ab05      	add	r3, sp, #20
    6894:	9300      	str	r3, [sp, #0]
    6896:	003a      	movs	r2, r7
    6898:	4b09      	ldr	r3, [pc, #36]	; (68c0 <_vfiprintf_r+0x234>)
    689a:	0029      	movs	r1, r5
    689c:	0030      	movs	r0, r6
    689e:	f000 f87f 	bl	69a0 <_printf_i>
    68a2:	e7ec      	b.n	687e <_vfiprintf_r+0x1f2>
    68a4:	00008ca0 	.word	0x00008ca0
    68a8:	00008ce0 	.word	0x00008ce0
    68ac:	00008cc0 	.word	0x00008cc0
    68b0:	00008c80 	.word	0x00008c80
    68b4:	00008ce6 	.word	0x00008ce6
    68b8:	00008cea 	.word	0x00008cea
    68bc:	00000000 	.word	0x00000000
    68c0:	00006667 	.word	0x00006667

000068c4 <_printf_common>:
    68c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68c6:	0015      	movs	r5, r2
    68c8:	9301      	str	r3, [sp, #4]
    68ca:	688a      	ldr	r2, [r1, #8]
    68cc:	690b      	ldr	r3, [r1, #16]
    68ce:	9000      	str	r0, [sp, #0]
    68d0:	000c      	movs	r4, r1
    68d2:	4293      	cmp	r3, r2
    68d4:	da00      	bge.n	68d8 <_printf_common+0x14>
    68d6:	0013      	movs	r3, r2
    68d8:	0022      	movs	r2, r4
    68da:	602b      	str	r3, [r5, #0]
    68dc:	3243      	adds	r2, #67	; 0x43
    68de:	7812      	ldrb	r2, [r2, #0]
    68e0:	2a00      	cmp	r2, #0
    68e2:	d001      	beq.n	68e8 <_printf_common+0x24>
    68e4:	3301      	adds	r3, #1
    68e6:	602b      	str	r3, [r5, #0]
    68e8:	6823      	ldr	r3, [r4, #0]
    68ea:	069b      	lsls	r3, r3, #26
    68ec:	d502      	bpl.n	68f4 <_printf_common+0x30>
    68ee:	682b      	ldr	r3, [r5, #0]
    68f0:	3302      	adds	r3, #2
    68f2:	602b      	str	r3, [r5, #0]
    68f4:	2706      	movs	r7, #6
    68f6:	6823      	ldr	r3, [r4, #0]
    68f8:	401f      	ands	r7, r3
    68fa:	d027      	beq.n	694c <_printf_common+0x88>
    68fc:	0023      	movs	r3, r4
    68fe:	3343      	adds	r3, #67	; 0x43
    6900:	781b      	ldrb	r3, [r3, #0]
    6902:	1e5a      	subs	r2, r3, #1
    6904:	4193      	sbcs	r3, r2
    6906:	6822      	ldr	r2, [r4, #0]
    6908:	0692      	lsls	r2, r2, #26
    690a:	d430      	bmi.n	696e <_printf_common+0xaa>
    690c:	0022      	movs	r2, r4
    690e:	9901      	ldr	r1, [sp, #4]
    6910:	3243      	adds	r2, #67	; 0x43
    6912:	9800      	ldr	r0, [sp, #0]
    6914:	9e08      	ldr	r6, [sp, #32]
    6916:	47b0      	blx	r6
    6918:	1c43      	adds	r3, r0, #1
    691a:	d025      	beq.n	6968 <_printf_common+0xa4>
    691c:	2306      	movs	r3, #6
    691e:	6820      	ldr	r0, [r4, #0]
    6920:	682a      	ldr	r2, [r5, #0]
    6922:	68e1      	ldr	r1, [r4, #12]
    6924:	4003      	ands	r3, r0
    6926:	2500      	movs	r5, #0
    6928:	2b04      	cmp	r3, #4
    692a:	d103      	bne.n	6934 <_printf_common+0x70>
    692c:	1a8d      	subs	r5, r1, r2
    692e:	43eb      	mvns	r3, r5
    6930:	17db      	asrs	r3, r3, #31
    6932:	401d      	ands	r5, r3
    6934:	68a3      	ldr	r3, [r4, #8]
    6936:	6922      	ldr	r2, [r4, #16]
    6938:	4293      	cmp	r3, r2
    693a:	dd01      	ble.n	6940 <_printf_common+0x7c>
    693c:	1a9b      	subs	r3, r3, r2
    693e:	18ed      	adds	r5, r5, r3
    6940:	2700      	movs	r7, #0
    6942:	42bd      	cmp	r5, r7
    6944:	d120      	bne.n	6988 <_printf_common+0xc4>
    6946:	2000      	movs	r0, #0
    6948:	e010      	b.n	696c <_printf_common+0xa8>
    694a:	3701      	adds	r7, #1
    694c:	68e3      	ldr	r3, [r4, #12]
    694e:	682a      	ldr	r2, [r5, #0]
    6950:	1a9b      	subs	r3, r3, r2
    6952:	429f      	cmp	r7, r3
    6954:	dad2      	bge.n	68fc <_printf_common+0x38>
    6956:	0022      	movs	r2, r4
    6958:	2301      	movs	r3, #1
    695a:	3219      	adds	r2, #25
    695c:	9901      	ldr	r1, [sp, #4]
    695e:	9800      	ldr	r0, [sp, #0]
    6960:	9e08      	ldr	r6, [sp, #32]
    6962:	47b0      	blx	r6
    6964:	1c43      	adds	r3, r0, #1
    6966:	d1f0      	bne.n	694a <_printf_common+0x86>
    6968:	2001      	movs	r0, #1
    696a:	4240      	negs	r0, r0
    696c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    696e:	2030      	movs	r0, #48	; 0x30
    6970:	18e1      	adds	r1, r4, r3
    6972:	3143      	adds	r1, #67	; 0x43
    6974:	7008      	strb	r0, [r1, #0]
    6976:	0021      	movs	r1, r4
    6978:	1c5a      	adds	r2, r3, #1
    697a:	3145      	adds	r1, #69	; 0x45
    697c:	7809      	ldrb	r1, [r1, #0]
    697e:	18a2      	adds	r2, r4, r2
    6980:	3243      	adds	r2, #67	; 0x43
    6982:	3302      	adds	r3, #2
    6984:	7011      	strb	r1, [r2, #0]
    6986:	e7c1      	b.n	690c <_printf_common+0x48>
    6988:	0022      	movs	r2, r4
    698a:	2301      	movs	r3, #1
    698c:	321a      	adds	r2, #26
    698e:	9901      	ldr	r1, [sp, #4]
    6990:	9800      	ldr	r0, [sp, #0]
    6992:	9e08      	ldr	r6, [sp, #32]
    6994:	47b0      	blx	r6
    6996:	1c43      	adds	r3, r0, #1
    6998:	d0e6      	beq.n	6968 <_printf_common+0xa4>
    699a:	3701      	adds	r7, #1
    699c:	e7d1      	b.n	6942 <_printf_common+0x7e>
	...

000069a0 <_printf_i>:
    69a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    69a2:	b08b      	sub	sp, #44	; 0x2c
    69a4:	9206      	str	r2, [sp, #24]
    69a6:	000a      	movs	r2, r1
    69a8:	3243      	adds	r2, #67	; 0x43
    69aa:	9307      	str	r3, [sp, #28]
    69ac:	9005      	str	r0, [sp, #20]
    69ae:	9204      	str	r2, [sp, #16]
    69b0:	7e0a      	ldrb	r2, [r1, #24]
    69b2:	000c      	movs	r4, r1
    69b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    69b6:	2a6e      	cmp	r2, #110	; 0x6e
    69b8:	d100      	bne.n	69bc <_printf_i+0x1c>
    69ba:	e08f      	b.n	6adc <_printf_i+0x13c>
    69bc:	d817      	bhi.n	69ee <_printf_i+0x4e>
    69be:	2a63      	cmp	r2, #99	; 0x63
    69c0:	d02c      	beq.n	6a1c <_printf_i+0x7c>
    69c2:	d808      	bhi.n	69d6 <_printf_i+0x36>
    69c4:	2a00      	cmp	r2, #0
    69c6:	d100      	bne.n	69ca <_printf_i+0x2a>
    69c8:	e099      	b.n	6afe <_printf_i+0x15e>
    69ca:	2a58      	cmp	r2, #88	; 0x58
    69cc:	d054      	beq.n	6a78 <_printf_i+0xd8>
    69ce:	0026      	movs	r6, r4
    69d0:	3642      	adds	r6, #66	; 0x42
    69d2:	7032      	strb	r2, [r6, #0]
    69d4:	e029      	b.n	6a2a <_printf_i+0x8a>
    69d6:	2a64      	cmp	r2, #100	; 0x64
    69d8:	d001      	beq.n	69de <_printf_i+0x3e>
    69da:	2a69      	cmp	r2, #105	; 0x69
    69dc:	d1f7      	bne.n	69ce <_printf_i+0x2e>
    69de:	6821      	ldr	r1, [r4, #0]
    69e0:	681a      	ldr	r2, [r3, #0]
    69e2:	0608      	lsls	r0, r1, #24
    69e4:	d523      	bpl.n	6a2e <_printf_i+0x8e>
    69e6:	1d11      	adds	r1, r2, #4
    69e8:	6019      	str	r1, [r3, #0]
    69ea:	6815      	ldr	r5, [r2, #0]
    69ec:	e025      	b.n	6a3a <_printf_i+0x9a>
    69ee:	2a73      	cmp	r2, #115	; 0x73
    69f0:	d100      	bne.n	69f4 <_printf_i+0x54>
    69f2:	e088      	b.n	6b06 <_printf_i+0x166>
    69f4:	d808      	bhi.n	6a08 <_printf_i+0x68>
    69f6:	2a6f      	cmp	r2, #111	; 0x6f
    69f8:	d029      	beq.n	6a4e <_printf_i+0xae>
    69fa:	2a70      	cmp	r2, #112	; 0x70
    69fc:	d1e7      	bne.n	69ce <_printf_i+0x2e>
    69fe:	2220      	movs	r2, #32
    6a00:	6809      	ldr	r1, [r1, #0]
    6a02:	430a      	orrs	r2, r1
    6a04:	6022      	str	r2, [r4, #0]
    6a06:	e003      	b.n	6a10 <_printf_i+0x70>
    6a08:	2a75      	cmp	r2, #117	; 0x75
    6a0a:	d020      	beq.n	6a4e <_printf_i+0xae>
    6a0c:	2a78      	cmp	r2, #120	; 0x78
    6a0e:	d1de      	bne.n	69ce <_printf_i+0x2e>
    6a10:	0022      	movs	r2, r4
    6a12:	2178      	movs	r1, #120	; 0x78
    6a14:	3245      	adds	r2, #69	; 0x45
    6a16:	7011      	strb	r1, [r2, #0]
    6a18:	4a6c      	ldr	r2, [pc, #432]	; (6bcc <_printf_i+0x22c>)
    6a1a:	e030      	b.n	6a7e <_printf_i+0xde>
    6a1c:	000e      	movs	r6, r1
    6a1e:	681a      	ldr	r2, [r3, #0]
    6a20:	3642      	adds	r6, #66	; 0x42
    6a22:	1d11      	adds	r1, r2, #4
    6a24:	6019      	str	r1, [r3, #0]
    6a26:	6813      	ldr	r3, [r2, #0]
    6a28:	7033      	strb	r3, [r6, #0]
    6a2a:	2301      	movs	r3, #1
    6a2c:	e079      	b.n	6b22 <_printf_i+0x182>
    6a2e:	0649      	lsls	r1, r1, #25
    6a30:	d5d9      	bpl.n	69e6 <_printf_i+0x46>
    6a32:	1d11      	adds	r1, r2, #4
    6a34:	6019      	str	r1, [r3, #0]
    6a36:	2300      	movs	r3, #0
    6a38:	5ed5      	ldrsh	r5, [r2, r3]
    6a3a:	2d00      	cmp	r5, #0
    6a3c:	da03      	bge.n	6a46 <_printf_i+0xa6>
    6a3e:	232d      	movs	r3, #45	; 0x2d
    6a40:	9a04      	ldr	r2, [sp, #16]
    6a42:	426d      	negs	r5, r5
    6a44:	7013      	strb	r3, [r2, #0]
    6a46:	4b62      	ldr	r3, [pc, #392]	; (6bd0 <_printf_i+0x230>)
    6a48:	270a      	movs	r7, #10
    6a4a:	9303      	str	r3, [sp, #12]
    6a4c:	e02f      	b.n	6aae <_printf_i+0x10e>
    6a4e:	6820      	ldr	r0, [r4, #0]
    6a50:	6819      	ldr	r1, [r3, #0]
    6a52:	0605      	lsls	r5, r0, #24
    6a54:	d503      	bpl.n	6a5e <_printf_i+0xbe>
    6a56:	1d08      	adds	r0, r1, #4
    6a58:	6018      	str	r0, [r3, #0]
    6a5a:	680d      	ldr	r5, [r1, #0]
    6a5c:	e005      	b.n	6a6a <_printf_i+0xca>
    6a5e:	0640      	lsls	r0, r0, #25
    6a60:	d5f9      	bpl.n	6a56 <_printf_i+0xb6>
    6a62:	680d      	ldr	r5, [r1, #0]
    6a64:	1d08      	adds	r0, r1, #4
    6a66:	6018      	str	r0, [r3, #0]
    6a68:	b2ad      	uxth	r5, r5
    6a6a:	4b59      	ldr	r3, [pc, #356]	; (6bd0 <_printf_i+0x230>)
    6a6c:	2708      	movs	r7, #8
    6a6e:	9303      	str	r3, [sp, #12]
    6a70:	2a6f      	cmp	r2, #111	; 0x6f
    6a72:	d018      	beq.n	6aa6 <_printf_i+0x106>
    6a74:	270a      	movs	r7, #10
    6a76:	e016      	b.n	6aa6 <_printf_i+0x106>
    6a78:	3145      	adds	r1, #69	; 0x45
    6a7a:	700a      	strb	r2, [r1, #0]
    6a7c:	4a54      	ldr	r2, [pc, #336]	; (6bd0 <_printf_i+0x230>)
    6a7e:	9203      	str	r2, [sp, #12]
    6a80:	681a      	ldr	r2, [r3, #0]
    6a82:	6821      	ldr	r1, [r4, #0]
    6a84:	1d10      	adds	r0, r2, #4
    6a86:	6018      	str	r0, [r3, #0]
    6a88:	6815      	ldr	r5, [r2, #0]
    6a8a:	0608      	lsls	r0, r1, #24
    6a8c:	d522      	bpl.n	6ad4 <_printf_i+0x134>
    6a8e:	07cb      	lsls	r3, r1, #31
    6a90:	d502      	bpl.n	6a98 <_printf_i+0xf8>
    6a92:	2320      	movs	r3, #32
    6a94:	4319      	orrs	r1, r3
    6a96:	6021      	str	r1, [r4, #0]
    6a98:	2710      	movs	r7, #16
    6a9a:	2d00      	cmp	r5, #0
    6a9c:	d103      	bne.n	6aa6 <_printf_i+0x106>
    6a9e:	2320      	movs	r3, #32
    6aa0:	6822      	ldr	r2, [r4, #0]
    6aa2:	439a      	bics	r2, r3
    6aa4:	6022      	str	r2, [r4, #0]
    6aa6:	0023      	movs	r3, r4
    6aa8:	2200      	movs	r2, #0
    6aaa:	3343      	adds	r3, #67	; 0x43
    6aac:	701a      	strb	r2, [r3, #0]
    6aae:	6863      	ldr	r3, [r4, #4]
    6ab0:	60a3      	str	r3, [r4, #8]
    6ab2:	2b00      	cmp	r3, #0
    6ab4:	db5c      	blt.n	6b70 <_printf_i+0x1d0>
    6ab6:	2204      	movs	r2, #4
    6ab8:	6821      	ldr	r1, [r4, #0]
    6aba:	4391      	bics	r1, r2
    6abc:	6021      	str	r1, [r4, #0]
    6abe:	2d00      	cmp	r5, #0
    6ac0:	d158      	bne.n	6b74 <_printf_i+0x1d4>
    6ac2:	9e04      	ldr	r6, [sp, #16]
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	d064      	beq.n	6b92 <_printf_i+0x1f2>
    6ac8:	0026      	movs	r6, r4
    6aca:	9b03      	ldr	r3, [sp, #12]
    6acc:	3642      	adds	r6, #66	; 0x42
    6ace:	781b      	ldrb	r3, [r3, #0]
    6ad0:	7033      	strb	r3, [r6, #0]
    6ad2:	e05e      	b.n	6b92 <_printf_i+0x1f2>
    6ad4:	0648      	lsls	r0, r1, #25
    6ad6:	d5da      	bpl.n	6a8e <_printf_i+0xee>
    6ad8:	b2ad      	uxth	r5, r5
    6ada:	e7d8      	b.n	6a8e <_printf_i+0xee>
    6adc:	6809      	ldr	r1, [r1, #0]
    6ade:	681a      	ldr	r2, [r3, #0]
    6ae0:	0608      	lsls	r0, r1, #24
    6ae2:	d505      	bpl.n	6af0 <_printf_i+0x150>
    6ae4:	1d11      	adds	r1, r2, #4
    6ae6:	6019      	str	r1, [r3, #0]
    6ae8:	6813      	ldr	r3, [r2, #0]
    6aea:	6962      	ldr	r2, [r4, #20]
    6aec:	601a      	str	r2, [r3, #0]
    6aee:	e006      	b.n	6afe <_printf_i+0x15e>
    6af0:	0649      	lsls	r1, r1, #25
    6af2:	d5f7      	bpl.n	6ae4 <_printf_i+0x144>
    6af4:	1d11      	adds	r1, r2, #4
    6af6:	6019      	str	r1, [r3, #0]
    6af8:	6813      	ldr	r3, [r2, #0]
    6afa:	8aa2      	ldrh	r2, [r4, #20]
    6afc:	801a      	strh	r2, [r3, #0]
    6afe:	2300      	movs	r3, #0
    6b00:	9e04      	ldr	r6, [sp, #16]
    6b02:	6123      	str	r3, [r4, #16]
    6b04:	e054      	b.n	6bb0 <_printf_i+0x210>
    6b06:	681a      	ldr	r2, [r3, #0]
    6b08:	1d11      	adds	r1, r2, #4
    6b0a:	6019      	str	r1, [r3, #0]
    6b0c:	6816      	ldr	r6, [r2, #0]
    6b0e:	2100      	movs	r1, #0
    6b10:	6862      	ldr	r2, [r4, #4]
    6b12:	0030      	movs	r0, r6
    6b14:	f000 ff32 	bl	797c <memchr>
    6b18:	2800      	cmp	r0, #0
    6b1a:	d001      	beq.n	6b20 <_printf_i+0x180>
    6b1c:	1b80      	subs	r0, r0, r6
    6b1e:	6060      	str	r0, [r4, #4]
    6b20:	6863      	ldr	r3, [r4, #4]
    6b22:	6123      	str	r3, [r4, #16]
    6b24:	2300      	movs	r3, #0
    6b26:	9a04      	ldr	r2, [sp, #16]
    6b28:	7013      	strb	r3, [r2, #0]
    6b2a:	e041      	b.n	6bb0 <_printf_i+0x210>
    6b2c:	6923      	ldr	r3, [r4, #16]
    6b2e:	0032      	movs	r2, r6
    6b30:	9906      	ldr	r1, [sp, #24]
    6b32:	9805      	ldr	r0, [sp, #20]
    6b34:	9d07      	ldr	r5, [sp, #28]
    6b36:	47a8      	blx	r5
    6b38:	1c43      	adds	r3, r0, #1
    6b3a:	d043      	beq.n	6bc4 <_printf_i+0x224>
    6b3c:	6823      	ldr	r3, [r4, #0]
    6b3e:	2500      	movs	r5, #0
    6b40:	079b      	lsls	r3, r3, #30
    6b42:	d40f      	bmi.n	6b64 <_printf_i+0x1c4>
    6b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b46:	68e0      	ldr	r0, [r4, #12]
    6b48:	4298      	cmp	r0, r3
    6b4a:	da3d      	bge.n	6bc8 <_printf_i+0x228>
    6b4c:	0018      	movs	r0, r3
    6b4e:	e03b      	b.n	6bc8 <_printf_i+0x228>
    6b50:	0022      	movs	r2, r4
    6b52:	2301      	movs	r3, #1
    6b54:	3219      	adds	r2, #25
    6b56:	9906      	ldr	r1, [sp, #24]
    6b58:	9805      	ldr	r0, [sp, #20]
    6b5a:	9e07      	ldr	r6, [sp, #28]
    6b5c:	47b0      	blx	r6
    6b5e:	1c43      	adds	r3, r0, #1
    6b60:	d030      	beq.n	6bc4 <_printf_i+0x224>
    6b62:	3501      	adds	r5, #1
    6b64:	68e3      	ldr	r3, [r4, #12]
    6b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b68:	1a9b      	subs	r3, r3, r2
    6b6a:	429d      	cmp	r5, r3
    6b6c:	dbf0      	blt.n	6b50 <_printf_i+0x1b0>
    6b6e:	e7e9      	b.n	6b44 <_printf_i+0x1a4>
    6b70:	2d00      	cmp	r5, #0
    6b72:	d0a9      	beq.n	6ac8 <_printf_i+0x128>
    6b74:	9e04      	ldr	r6, [sp, #16]
    6b76:	0028      	movs	r0, r5
    6b78:	0039      	movs	r1, r7
    6b7a:	f7fe fd67 	bl	564c <__aeabi_uidivmod>
    6b7e:	9b03      	ldr	r3, [sp, #12]
    6b80:	3e01      	subs	r6, #1
    6b82:	5c5b      	ldrb	r3, [r3, r1]
    6b84:	0028      	movs	r0, r5
    6b86:	7033      	strb	r3, [r6, #0]
    6b88:	0039      	movs	r1, r7
    6b8a:	f7fe fcd9 	bl	5540 <__udivsi3>
    6b8e:	1e05      	subs	r5, r0, #0
    6b90:	d1f1      	bne.n	6b76 <_printf_i+0x1d6>
    6b92:	2f08      	cmp	r7, #8
    6b94:	d109      	bne.n	6baa <_printf_i+0x20a>
    6b96:	6823      	ldr	r3, [r4, #0]
    6b98:	07db      	lsls	r3, r3, #31
    6b9a:	d506      	bpl.n	6baa <_printf_i+0x20a>
    6b9c:	6863      	ldr	r3, [r4, #4]
    6b9e:	6922      	ldr	r2, [r4, #16]
    6ba0:	4293      	cmp	r3, r2
    6ba2:	dc02      	bgt.n	6baa <_printf_i+0x20a>
    6ba4:	2330      	movs	r3, #48	; 0x30
    6ba6:	3e01      	subs	r6, #1
    6ba8:	7033      	strb	r3, [r6, #0]
    6baa:	9b04      	ldr	r3, [sp, #16]
    6bac:	1b9b      	subs	r3, r3, r6
    6bae:	6123      	str	r3, [r4, #16]
    6bb0:	9b07      	ldr	r3, [sp, #28]
    6bb2:	aa09      	add	r2, sp, #36	; 0x24
    6bb4:	9300      	str	r3, [sp, #0]
    6bb6:	0021      	movs	r1, r4
    6bb8:	9b06      	ldr	r3, [sp, #24]
    6bba:	9805      	ldr	r0, [sp, #20]
    6bbc:	f7ff fe82 	bl	68c4 <_printf_common>
    6bc0:	1c43      	adds	r3, r0, #1
    6bc2:	d1b3      	bne.n	6b2c <_printf_i+0x18c>
    6bc4:	2001      	movs	r0, #1
    6bc6:	4240      	negs	r0, r0
    6bc8:	b00b      	add	sp, #44	; 0x2c
    6bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bcc:	00008d02 	.word	0x00008d02
    6bd0:	00008cf1 	.word	0x00008cf1

00006bd4 <__svfiscanf_r>:
    6bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bd6:	4cbd      	ldr	r4, [pc, #756]	; (6ecc <__svfiscanf_r+0x2f8>)
    6bd8:	2586      	movs	r5, #134	; 0x86
    6bda:	44a5      	add	sp, r4
    6bdc:	9303      	str	r3, [sp, #12]
    6bde:	2300      	movs	r3, #0
    6be0:	9348      	str	r3, [sp, #288]	; 0x120
    6be2:	9349      	str	r3, [sp, #292]	; 0x124
    6be4:	ab05      	add	r3, sp, #20
    6be6:	934a      	str	r3, [sp, #296]	; 0x128
    6be8:	23be      	movs	r3, #190	; 0xbe
    6bea:	006d      	lsls	r5, r5, #1
    6bec:	9000      	str	r0, [sp, #0]
    6bee:	000c      	movs	r4, r1
    6bf0:	a802      	add	r0, sp, #8
    6bf2:	49b7      	ldr	r1, [pc, #732]	; (6ed0 <__svfiscanf_r+0x2fc>)
    6bf4:	005b      	lsls	r3, r3, #1
    6bf6:	1940      	adds	r0, r0, r5
    6bf8:	27c0      	movs	r7, #192	; 0xc0
    6bfa:	50c1      	str	r1, [r0, r3]
    6bfc:	ab02      	add	r3, sp, #8
    6bfe:	195b      	adds	r3, r3, r5
    6c00:	0015      	movs	r5, r2
    6c02:	49b4      	ldr	r1, [pc, #720]	; (6ed4 <__svfiscanf_r+0x300>)
    6c04:	007f      	lsls	r7, r7, #1
    6c06:	51d9      	str	r1, [r3, r7]
    6c08:	782b      	ldrb	r3, [r5, #0]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d100      	bne.n	6c10 <__svfiscanf_r+0x3c>
    6c0e:	e15b      	b.n	6ec8 <__svfiscanf_r+0x2f4>
    6c10:	f000 fe80 	bl	7914 <__locale_ctype_ptr>
    6c14:	2208      	movs	r2, #8
    6c16:	782b      	ldrb	r3, [r5, #0]
    6c18:	18c0      	adds	r0, r0, r3
    6c1a:	9301      	str	r3, [sp, #4]
    6c1c:	7843      	ldrb	r3, [r0, #1]
    6c1e:	4013      	ands	r3, r2
    6c20:	d141      	bne.n	6ca6 <__svfiscanf_r+0xd2>
    6c22:	9a01      	ldr	r2, [sp, #4]
    6c24:	1c6e      	adds	r6, r5, #1
    6c26:	2a25      	cmp	r2, #37	; 0x25
    6c28:	d000      	beq.n	6c2c <__svfiscanf_r+0x58>
    6c2a:	e0a8      	b.n	6d7e <__svfiscanf_r+0x1aa>
    6c2c:	9347      	str	r3, [sp, #284]	; 0x11c
    6c2e:	9345      	str	r3, [sp, #276]	; 0x114
    6c30:	786b      	ldrb	r3, [r5, #1]
    6c32:	2b2a      	cmp	r3, #42	; 0x2a
    6c34:	d102      	bne.n	6c3c <__svfiscanf_r+0x68>
    6c36:	3b1a      	subs	r3, #26
    6c38:	9345      	str	r3, [sp, #276]	; 0x114
    6c3a:	1cae      	adds	r6, r5, #2
    6c3c:	0035      	movs	r5, r6
    6c3e:	220a      	movs	r2, #10
    6c40:	7829      	ldrb	r1, [r5, #0]
    6c42:	000b      	movs	r3, r1
    6c44:	3b30      	subs	r3, #48	; 0x30
    6c46:	2b09      	cmp	r3, #9
    6c48:	d948      	bls.n	6cdc <__svfiscanf_r+0x108>
    6c4a:	4ea3      	ldr	r6, [pc, #652]	; (6ed8 <__svfiscanf_r+0x304>)
    6c4c:	2203      	movs	r2, #3
    6c4e:	0030      	movs	r0, r6
    6c50:	f000 fe94 	bl	797c <memchr>
    6c54:	2800      	cmp	r0, #0
    6c56:	d007      	beq.n	6c68 <__svfiscanf_r+0x94>
    6c58:	2301      	movs	r3, #1
    6c5a:	1b80      	subs	r0, r0, r6
    6c5c:	4083      	lsls	r3, r0
    6c5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6c60:	3501      	adds	r5, #1
    6c62:	4313      	orrs	r3, r2
    6c64:	9202      	str	r2, [sp, #8]
    6c66:	9345      	str	r3, [sp, #276]	; 0x114
    6c68:	782b      	ldrb	r3, [r5, #0]
    6c6a:	1c6e      	adds	r6, r5, #1
    6c6c:	2b67      	cmp	r3, #103	; 0x67
    6c6e:	d858      	bhi.n	6d22 <__svfiscanf_r+0x14e>
    6c70:	2b65      	cmp	r3, #101	; 0x65
    6c72:	d300      	bcc.n	6c76 <__svfiscanf_r+0xa2>
    6c74:	e0dd      	b.n	6e32 <__svfiscanf_r+0x25e>
    6c76:	2b47      	cmp	r3, #71	; 0x47
    6c78:	d838      	bhi.n	6cec <__svfiscanf_r+0x118>
    6c7a:	2b45      	cmp	r3, #69	; 0x45
    6c7c:	d300      	bcc.n	6c80 <__svfiscanf_r+0xac>
    6c7e:	e0d8      	b.n	6e32 <__svfiscanf_r+0x25e>
    6c80:	2b00      	cmp	r3, #0
    6c82:	d100      	bne.n	6c86 <__svfiscanf_r+0xb2>
    6c84:	e11d      	b.n	6ec2 <__svfiscanf_r+0x2ee>
    6c86:	2b25      	cmp	r3, #37	; 0x25
    6c88:	d079      	beq.n	6d7e <__svfiscanf_r+0x1aa>
    6c8a:	2303      	movs	r3, #3
    6c8c:	934b      	str	r3, [sp, #300]	; 0x12c
    6c8e:	3307      	adds	r3, #7
    6c90:	9346      	str	r3, [sp, #280]	; 0x118
    6c92:	e053      	b.n	6d3c <__svfiscanf_r+0x168>
    6c94:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6c96:	3301      	adds	r3, #1
    6c98:	9201      	str	r2, [sp, #4]
    6c9a:	3201      	adds	r2, #1
    6c9c:	9249      	str	r2, [sp, #292]	; 0x124
    6c9e:	6862      	ldr	r2, [r4, #4]
    6ca0:	6023      	str	r3, [r4, #0]
    6ca2:	3a01      	subs	r2, #1
    6ca4:	6062      	str	r2, [r4, #4]
    6ca6:	6863      	ldr	r3, [r4, #4]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	dd0b      	ble.n	6cc4 <__svfiscanf_r+0xf0>
    6cac:	f000 fe32 	bl	7914 <__locale_ctype_ptr>
    6cb0:	2108      	movs	r1, #8
    6cb2:	6823      	ldr	r3, [r4, #0]
    6cb4:	781a      	ldrb	r2, [r3, #0]
    6cb6:	1880      	adds	r0, r0, r2
    6cb8:	7842      	ldrb	r2, [r0, #1]
    6cba:	420a      	tst	r2, r1
    6cbc:	d1ea      	bne.n	6c94 <__svfiscanf_r+0xc0>
    6cbe:	1c6e      	adds	r6, r5, #1
    6cc0:	0035      	movs	r5, r6
    6cc2:	e7a1      	b.n	6c08 <__svfiscanf_r+0x34>
    6cc4:	2286      	movs	r2, #134	; 0x86
    6cc6:	ab02      	add	r3, sp, #8
    6cc8:	0052      	lsls	r2, r2, #1
    6cca:	189b      	adds	r3, r3, r2
    6ccc:	59db      	ldr	r3, [r3, r7]
    6cce:	0021      	movs	r1, r4
    6cd0:	9800      	ldr	r0, [sp, #0]
    6cd2:	9301      	str	r3, [sp, #4]
    6cd4:	4798      	blx	r3
    6cd6:	2800      	cmp	r0, #0
    6cd8:	d0e8      	beq.n	6cac <__svfiscanf_r+0xd8>
    6cda:	e7f0      	b.n	6cbe <__svfiscanf_r+0xea>
    6cdc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    6cde:	3501      	adds	r5, #1
    6ce0:	9302      	str	r3, [sp, #8]
    6ce2:	4353      	muls	r3, r2
    6ce4:	3b30      	subs	r3, #48	; 0x30
    6ce6:	1859      	adds	r1, r3, r1
    6ce8:	9147      	str	r1, [sp, #284]	; 0x11c
    6cea:	e7a9      	b.n	6c40 <__svfiscanf_r+0x6c>
    6cec:	2b5b      	cmp	r3, #91	; 0x5b
    6cee:	d100      	bne.n	6cf2 <__svfiscanf_r+0x11e>
    6cf0:	e077      	b.n	6de2 <__svfiscanf_r+0x20e>
    6cf2:	d80f      	bhi.n	6d14 <__svfiscanf_r+0x140>
    6cf4:	2b58      	cmp	r3, #88	; 0x58
    6cf6:	d1c8      	bne.n	6c8a <__svfiscanf_r+0xb6>
    6cf8:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6cfa:	9201      	str	r2, [sp, #4]
    6cfc:	2280      	movs	r2, #128	; 0x80
    6cfe:	9901      	ldr	r1, [sp, #4]
    6d00:	0092      	lsls	r2, r2, #2
    6d02:	430a      	orrs	r2, r1
    6d04:	9245      	str	r2, [sp, #276]	; 0x114
    6d06:	2210      	movs	r2, #16
    6d08:	9246      	str	r2, [sp, #280]	; 0x118
    6d0a:	2203      	movs	r2, #3
    6d0c:	2b6e      	cmp	r3, #110	; 0x6e
    6d0e:	dd14      	ble.n	6d3a <__svfiscanf_r+0x166>
    6d10:	3201      	adds	r2, #1
    6d12:	e012      	b.n	6d3a <__svfiscanf_r+0x166>
    6d14:	2b63      	cmp	r3, #99	; 0x63
    6d16:	d100      	bne.n	6d1a <__svfiscanf_r+0x146>
    6d18:	e071      	b.n	6dfe <__svfiscanf_r+0x22a>
    6d1a:	2b64      	cmp	r3, #100	; 0x64
    6d1c:	d1b5      	bne.n	6c8a <__svfiscanf_r+0xb6>
    6d1e:	220a      	movs	r2, #10
    6d20:	e7f2      	b.n	6d08 <__svfiscanf_r+0x134>
    6d22:	2b70      	cmp	r3, #112	; 0x70
    6d24:	d052      	beq.n	6dcc <__svfiscanf_r+0x1f8>
    6d26:	d822      	bhi.n	6d6e <__svfiscanf_r+0x19a>
    6d28:	2b6e      	cmp	r3, #110	; 0x6e
    6d2a:	d100      	bne.n	6d2e <__svfiscanf_r+0x15a>
    6d2c:	e06f      	b.n	6e0e <__svfiscanf_r+0x23a>
    6d2e:	d854      	bhi.n	6dda <__svfiscanf_r+0x206>
    6d30:	2b69      	cmp	r3, #105	; 0x69
    6d32:	d1aa      	bne.n	6c8a <__svfiscanf_r+0xb6>
    6d34:	2300      	movs	r3, #0
    6d36:	2203      	movs	r2, #3
    6d38:	9346      	str	r3, [sp, #280]	; 0x118
    6d3a:	924b      	str	r2, [sp, #300]	; 0x12c
    6d3c:	6863      	ldr	r3, [r4, #4]
    6d3e:	2b00      	cmp	r3, #0
    6d40:	dc00      	bgt.n	6d44 <__svfiscanf_r+0x170>
    6d42:	e078      	b.n	6e36 <__svfiscanf_r+0x262>
    6d44:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6d46:	9301      	str	r3, [sp, #4]
    6d48:	065b      	lsls	r3, r3, #25
    6d4a:	d400      	bmi.n	6d4e <__svfiscanf_r+0x17a>
    6d4c:	e08b      	b.n	6e66 <__svfiscanf_r+0x292>
    6d4e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    6d50:	2b02      	cmp	r3, #2
    6d52:	dd00      	ble.n	6d56 <__svfiscanf_r+0x182>
    6d54:	e09d      	b.n	6e92 <__svfiscanf_r+0x2be>
    6d56:	ab03      	add	r3, sp, #12
    6d58:	0022      	movs	r2, r4
    6d5a:	a945      	add	r1, sp, #276	; 0x114
    6d5c:	9800      	ldr	r0, [sp, #0]
    6d5e:	f000 f8e7 	bl	6f30 <_scanf_chars>
    6d62:	2801      	cmp	r0, #1
    6d64:	d100      	bne.n	6d68 <__svfiscanf_r+0x194>
    6d66:	e0af      	b.n	6ec8 <__svfiscanf_r+0x2f4>
    6d68:	2802      	cmp	r0, #2
    6d6a:	d1a9      	bne.n	6cc0 <__svfiscanf_r+0xec>
    6d6c:	e025      	b.n	6dba <__svfiscanf_r+0x1e6>
    6d6e:	2b75      	cmp	r3, #117	; 0x75
    6d70:	d0d5      	beq.n	6d1e <__svfiscanf_r+0x14a>
    6d72:	2b78      	cmp	r3, #120	; 0x78
    6d74:	d0c0      	beq.n	6cf8 <__svfiscanf_r+0x124>
    6d76:	2b73      	cmp	r3, #115	; 0x73
    6d78:	d187      	bne.n	6c8a <__svfiscanf_r+0xb6>
    6d7a:	2302      	movs	r3, #2
    6d7c:	e03d      	b.n	6dfa <__svfiscanf_r+0x226>
    6d7e:	6863      	ldr	r3, [r4, #4]
    6d80:	2b00      	cmp	r3, #0
    6d82:	dd0f      	ble.n	6da4 <__svfiscanf_r+0x1d0>
    6d84:	6823      	ldr	r3, [r4, #0]
    6d86:	9901      	ldr	r1, [sp, #4]
    6d88:	781a      	ldrb	r2, [r3, #0]
    6d8a:	4291      	cmp	r1, r2
    6d8c:	d000      	beq.n	6d90 <__svfiscanf_r+0x1bc>
    6d8e:	e09b      	b.n	6ec8 <__svfiscanf_r+0x2f4>
    6d90:	3301      	adds	r3, #1
    6d92:	6862      	ldr	r2, [r4, #4]
    6d94:	6023      	str	r3, [r4, #0]
    6d96:	9b49      	ldr	r3, [sp, #292]	; 0x124
    6d98:	3a01      	subs	r2, #1
    6d9a:	9301      	str	r3, [sp, #4]
    6d9c:	3301      	adds	r3, #1
    6d9e:	6062      	str	r2, [r4, #4]
    6da0:	9349      	str	r3, [sp, #292]	; 0x124
    6da2:	e78d      	b.n	6cc0 <__svfiscanf_r+0xec>
    6da4:	2286      	movs	r2, #134	; 0x86
    6da6:	ab02      	add	r3, sp, #8
    6da8:	0052      	lsls	r2, r2, #1
    6daa:	189b      	adds	r3, r3, r2
    6dac:	59db      	ldr	r3, [r3, r7]
    6dae:	0021      	movs	r1, r4
    6db0:	9800      	ldr	r0, [sp, #0]
    6db2:	9302      	str	r3, [sp, #8]
    6db4:	4798      	blx	r3
    6db6:	2800      	cmp	r0, #0
    6db8:	d0e4      	beq.n	6d84 <__svfiscanf_r+0x1b0>
    6dba:	9848      	ldr	r0, [sp, #288]	; 0x120
    6dbc:	2800      	cmp	r0, #0
    6dbe:	d000      	beq.n	6dc2 <__svfiscanf_r+0x1ee>
    6dc0:	e07b      	b.n	6eba <__svfiscanf_r+0x2e6>
    6dc2:	3801      	subs	r0, #1
    6dc4:	23a7      	movs	r3, #167	; 0xa7
    6dc6:	009b      	lsls	r3, r3, #2
    6dc8:	449d      	add	sp, r3
    6dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
    6dce:	9201      	str	r2, [sp, #4]
    6dd0:	2220      	movs	r2, #32
    6dd2:	9901      	ldr	r1, [sp, #4]
    6dd4:	430a      	orrs	r2, r1
    6dd6:	9245      	str	r2, [sp, #276]	; 0x114
    6dd8:	e78e      	b.n	6cf8 <__svfiscanf_r+0x124>
    6dda:	2308      	movs	r3, #8
    6ddc:	2204      	movs	r2, #4
    6dde:	9346      	str	r3, [sp, #280]	; 0x118
    6de0:	e7ab      	b.n	6d3a <__svfiscanf_r+0x166>
    6de2:	0031      	movs	r1, r6
    6de4:	a805      	add	r0, sp, #20
    6de6:	f000 faeb 	bl	73c0 <__sccl>
    6dea:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6dec:	0006      	movs	r6, r0
    6dee:	9301      	str	r3, [sp, #4]
    6df0:	2340      	movs	r3, #64	; 0x40
    6df2:	9a01      	ldr	r2, [sp, #4]
    6df4:	4313      	orrs	r3, r2
    6df6:	9345      	str	r3, [sp, #276]	; 0x114
    6df8:	2301      	movs	r3, #1
    6dfa:	934b      	str	r3, [sp, #300]	; 0x12c
    6dfc:	e79e      	b.n	6d3c <__svfiscanf_r+0x168>
    6dfe:	9b45      	ldr	r3, [sp, #276]	; 0x114
    6e00:	9301      	str	r3, [sp, #4]
    6e02:	2340      	movs	r3, #64	; 0x40
    6e04:	9a01      	ldr	r2, [sp, #4]
    6e06:	4313      	orrs	r3, r2
    6e08:	9345      	str	r3, [sp, #276]	; 0x114
    6e0a:	2300      	movs	r3, #0
    6e0c:	e7f5      	b.n	6dfa <__svfiscanf_r+0x226>
    6e0e:	9945      	ldr	r1, [sp, #276]	; 0x114
    6e10:	06cb      	lsls	r3, r1, #27
    6e12:	d500      	bpl.n	6e16 <__svfiscanf_r+0x242>
    6e14:	e754      	b.n	6cc0 <__svfiscanf_r+0xec>
    6e16:	9b03      	ldr	r3, [sp, #12]
    6e18:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6e1a:	07c8      	lsls	r0, r1, #31
    6e1c:	d504      	bpl.n	6e28 <__svfiscanf_r+0x254>
    6e1e:	1d19      	adds	r1, r3, #4
    6e20:	9103      	str	r1, [sp, #12]
    6e22:	681b      	ldr	r3, [r3, #0]
    6e24:	801a      	strh	r2, [r3, #0]
    6e26:	e74b      	b.n	6cc0 <__svfiscanf_r+0xec>
    6e28:	1d19      	adds	r1, r3, #4
    6e2a:	9103      	str	r1, [sp, #12]
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	601a      	str	r2, [r3, #0]
    6e30:	e746      	b.n	6cc0 <__svfiscanf_r+0xec>
    6e32:	2305      	movs	r3, #5
    6e34:	e7e1      	b.n	6dfa <__svfiscanf_r+0x226>
    6e36:	2286      	movs	r2, #134	; 0x86
    6e38:	ab02      	add	r3, sp, #8
    6e3a:	0052      	lsls	r2, r2, #1
    6e3c:	189b      	adds	r3, r3, r2
    6e3e:	59db      	ldr	r3, [r3, r7]
    6e40:	0021      	movs	r1, r4
    6e42:	9800      	ldr	r0, [sp, #0]
    6e44:	9301      	str	r3, [sp, #4]
    6e46:	4798      	blx	r3
    6e48:	2800      	cmp	r0, #0
    6e4a:	d100      	bne.n	6e4e <__svfiscanf_r+0x27a>
    6e4c:	e77a      	b.n	6d44 <__svfiscanf_r+0x170>
    6e4e:	e7b4      	b.n	6dba <__svfiscanf_r+0x1e6>
    6e50:	9a49      	ldr	r2, [sp, #292]	; 0x124
    6e52:	9201      	str	r2, [sp, #4]
    6e54:	3201      	adds	r2, #1
    6e56:	9249      	str	r2, [sp, #292]	; 0x124
    6e58:	6862      	ldr	r2, [r4, #4]
    6e5a:	3a01      	subs	r2, #1
    6e5c:	6062      	str	r2, [r4, #4]
    6e5e:	2a00      	cmp	r2, #0
    6e60:	dd0b      	ble.n	6e7a <__svfiscanf_r+0x2a6>
    6e62:	3301      	adds	r3, #1
    6e64:	6023      	str	r3, [r4, #0]
    6e66:	f000 fd55 	bl	7914 <__locale_ctype_ptr>
    6e6a:	2108      	movs	r1, #8
    6e6c:	6823      	ldr	r3, [r4, #0]
    6e6e:	781a      	ldrb	r2, [r3, #0]
    6e70:	1880      	adds	r0, r0, r2
    6e72:	7842      	ldrb	r2, [r0, #1]
    6e74:	420a      	tst	r2, r1
    6e76:	d1eb      	bne.n	6e50 <__svfiscanf_r+0x27c>
    6e78:	e769      	b.n	6d4e <__svfiscanf_r+0x17a>
    6e7a:	2286      	movs	r2, #134	; 0x86
    6e7c:	ab02      	add	r3, sp, #8
    6e7e:	0052      	lsls	r2, r2, #1
    6e80:	189b      	adds	r3, r3, r2
    6e82:	59db      	ldr	r3, [r3, r7]
    6e84:	0021      	movs	r1, r4
    6e86:	9800      	ldr	r0, [sp, #0]
    6e88:	9301      	str	r3, [sp, #4]
    6e8a:	4798      	blx	r3
    6e8c:	2800      	cmp	r0, #0
    6e8e:	d0ea      	beq.n	6e66 <__svfiscanf_r+0x292>
    6e90:	e793      	b.n	6dba <__svfiscanf_r+0x1e6>
    6e92:	2b04      	cmp	r3, #4
    6e94:	dc06      	bgt.n	6ea4 <__svfiscanf_r+0x2d0>
    6e96:	ab03      	add	r3, sp, #12
    6e98:	0022      	movs	r2, r4
    6e9a:	a945      	add	r1, sp, #276	; 0x114
    6e9c:	9800      	ldr	r0, [sp, #0]
    6e9e:	f000 f8ab 	bl	6ff8 <_scanf_i>
    6ea2:	e75e      	b.n	6d62 <__svfiscanf_r+0x18e>
    6ea4:	4b0d      	ldr	r3, [pc, #52]	; (6edc <__svfiscanf_r+0x308>)
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d100      	bne.n	6eac <__svfiscanf_r+0x2d8>
    6eaa:	e709      	b.n	6cc0 <__svfiscanf_r+0xec>
    6eac:	ab03      	add	r3, sp, #12
    6eae:	0022      	movs	r2, r4
    6eb0:	a945      	add	r1, sp, #276	; 0x114
    6eb2:	9800      	ldr	r0, [sp, #0]
    6eb4:	e000      	b.n	6eb8 <__svfiscanf_r+0x2e4>
    6eb6:	bf00      	nop
    6eb8:	e753      	b.n	6d62 <__svfiscanf_r+0x18e>
    6eba:	89a3      	ldrh	r3, [r4, #12]
    6ebc:	065b      	lsls	r3, r3, #25
    6ebe:	d400      	bmi.n	6ec2 <__svfiscanf_r+0x2ee>
    6ec0:	e780      	b.n	6dc4 <__svfiscanf_r+0x1f0>
    6ec2:	2001      	movs	r0, #1
    6ec4:	4240      	negs	r0, r0
    6ec6:	e77d      	b.n	6dc4 <__svfiscanf_r+0x1f0>
    6ec8:	9848      	ldr	r0, [sp, #288]	; 0x120
    6eca:	e77b      	b.n	6dc4 <__svfiscanf_r+0x1f0>
    6ecc:	fffffd64 	.word	0xfffffd64
    6ed0:	00007795 	.word	0x00007795
    6ed4:	0000727d 	.word	0x0000727d
    6ed8:	00008ce6 	.word	0x00008ce6
    6edc:	00000000 	.word	0x00000000

00006ee0 <_vfiscanf_r>:
    6ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ee2:	0004      	movs	r4, r0
    6ee4:	000d      	movs	r5, r1
    6ee6:	0016      	movs	r6, r2
    6ee8:	001f      	movs	r7, r3
    6eea:	2800      	cmp	r0, #0
    6eec:	d004      	beq.n	6ef8 <_vfiscanf_r+0x18>
    6eee:	6983      	ldr	r3, [r0, #24]
    6ef0:	2b00      	cmp	r3, #0
    6ef2:	d101      	bne.n	6ef8 <_vfiscanf_r+0x18>
    6ef4:	f7ff f872 	bl	5fdc <__sinit>
    6ef8:	4b0a      	ldr	r3, [pc, #40]	; (6f24 <_vfiscanf_r+0x44>)
    6efa:	429d      	cmp	r5, r3
    6efc:	d107      	bne.n	6f0e <_vfiscanf_r+0x2e>
    6efe:	6865      	ldr	r5, [r4, #4]
    6f00:	003b      	movs	r3, r7
    6f02:	0032      	movs	r2, r6
    6f04:	0029      	movs	r1, r5
    6f06:	0020      	movs	r0, r4
    6f08:	f7ff fe64 	bl	6bd4 <__svfiscanf_r>
    6f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f0e:	4b06      	ldr	r3, [pc, #24]	; (6f28 <_vfiscanf_r+0x48>)
    6f10:	429d      	cmp	r5, r3
    6f12:	d101      	bne.n	6f18 <_vfiscanf_r+0x38>
    6f14:	68a5      	ldr	r5, [r4, #8]
    6f16:	e7f3      	b.n	6f00 <_vfiscanf_r+0x20>
    6f18:	4b04      	ldr	r3, [pc, #16]	; (6f2c <_vfiscanf_r+0x4c>)
    6f1a:	429d      	cmp	r5, r3
    6f1c:	d1f0      	bne.n	6f00 <_vfiscanf_r+0x20>
    6f1e:	68e5      	ldr	r5, [r4, #12]
    6f20:	e7ee      	b.n	6f00 <_vfiscanf_r+0x20>
    6f22:	46c0      	nop			; (mov r8, r8)
    6f24:	00008ca0 	.word	0x00008ca0
    6f28:	00008cc0 	.word	0x00008cc0
    6f2c:	00008c80 	.word	0x00008c80

00006f30 <_scanf_chars>:
    6f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6f32:	0015      	movs	r5, r2
    6f34:	688a      	ldr	r2, [r1, #8]
    6f36:	9001      	str	r0, [sp, #4]
    6f38:	000c      	movs	r4, r1
    6f3a:	2a00      	cmp	r2, #0
    6f3c:	d106      	bne.n	6f4c <_scanf_chars+0x1c>
    6f3e:	698a      	ldr	r2, [r1, #24]
    6f40:	1e51      	subs	r1, r2, #1
    6f42:	418a      	sbcs	r2, r1
    6f44:	2101      	movs	r1, #1
    6f46:	4252      	negs	r2, r2
    6f48:	430a      	orrs	r2, r1
    6f4a:	60a2      	str	r2, [r4, #8]
    6f4c:	6822      	ldr	r2, [r4, #0]
    6f4e:	06d2      	lsls	r2, r2, #27
    6f50:	d403      	bmi.n	6f5a <_scanf_chars+0x2a>
    6f52:	681a      	ldr	r2, [r3, #0]
    6f54:	1d11      	adds	r1, r2, #4
    6f56:	6019      	str	r1, [r3, #0]
    6f58:	6817      	ldr	r7, [r2, #0]
    6f5a:	2600      	movs	r6, #0
    6f5c:	69a3      	ldr	r3, [r4, #24]
    6f5e:	2b00      	cmp	r3, #0
    6f60:	d01c      	beq.n	6f9c <_scanf_chars+0x6c>
    6f62:	2b01      	cmp	r3, #1
    6f64:	d108      	bne.n	6f78 <_scanf_chars+0x48>
    6f66:	682b      	ldr	r3, [r5, #0]
    6f68:	6962      	ldr	r2, [r4, #20]
    6f6a:	781b      	ldrb	r3, [r3, #0]
    6f6c:	5cd3      	ldrb	r3, [r2, r3]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d114      	bne.n	6f9c <_scanf_chars+0x6c>
    6f72:	2e00      	cmp	r6, #0
    6f74:	d130      	bne.n	6fd8 <_scanf_chars+0xa8>
    6f76:	e006      	b.n	6f86 <_scanf_chars+0x56>
    6f78:	2b02      	cmp	r3, #2
    6f7a:	d006      	beq.n	6f8a <_scanf_chars+0x5a>
    6f7c:	2e00      	cmp	r6, #0
    6f7e:	d12b      	bne.n	6fd8 <_scanf_chars+0xa8>
    6f80:	69a3      	ldr	r3, [r4, #24]
    6f82:	2b01      	cmp	r3, #1
    6f84:	d128      	bne.n	6fd8 <_scanf_chars+0xa8>
    6f86:	2001      	movs	r0, #1
    6f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6f8a:	f000 fcc3 	bl	7914 <__locale_ctype_ptr>
    6f8e:	2208      	movs	r2, #8
    6f90:	682b      	ldr	r3, [r5, #0]
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	18c0      	adds	r0, r0, r3
    6f96:	7843      	ldrb	r3, [r0, #1]
    6f98:	4213      	tst	r3, r2
    6f9a:	d1ef      	bne.n	6f7c <_scanf_chars+0x4c>
    6f9c:	2210      	movs	r2, #16
    6f9e:	6823      	ldr	r3, [r4, #0]
    6fa0:	3601      	adds	r6, #1
    6fa2:	4213      	tst	r3, r2
    6fa4:	d103      	bne.n	6fae <_scanf_chars+0x7e>
    6fa6:	682b      	ldr	r3, [r5, #0]
    6fa8:	781b      	ldrb	r3, [r3, #0]
    6faa:	703b      	strb	r3, [r7, #0]
    6fac:	3701      	adds	r7, #1
    6fae:	682a      	ldr	r2, [r5, #0]
    6fb0:	686b      	ldr	r3, [r5, #4]
    6fb2:	3201      	adds	r2, #1
    6fb4:	602a      	str	r2, [r5, #0]
    6fb6:	68a2      	ldr	r2, [r4, #8]
    6fb8:	3b01      	subs	r3, #1
    6fba:	3a01      	subs	r2, #1
    6fbc:	606b      	str	r3, [r5, #4]
    6fbe:	60a2      	str	r2, [r4, #8]
    6fc0:	2a00      	cmp	r2, #0
    6fc2:	d009      	beq.n	6fd8 <_scanf_chars+0xa8>
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	dcc9      	bgt.n	6f5c <_scanf_chars+0x2c>
    6fc8:	23c0      	movs	r3, #192	; 0xc0
    6fca:	005b      	lsls	r3, r3, #1
    6fcc:	58e3      	ldr	r3, [r4, r3]
    6fce:	0029      	movs	r1, r5
    6fd0:	9801      	ldr	r0, [sp, #4]
    6fd2:	4798      	blx	r3
    6fd4:	2800      	cmp	r0, #0
    6fd6:	d0c1      	beq.n	6f5c <_scanf_chars+0x2c>
    6fd8:	2310      	movs	r3, #16
    6fda:	6822      	ldr	r2, [r4, #0]
    6fdc:	4013      	ands	r3, r2
    6fde:	d106      	bne.n	6fee <_scanf_chars+0xbe>
    6fe0:	68e2      	ldr	r2, [r4, #12]
    6fe2:	3201      	adds	r2, #1
    6fe4:	60e2      	str	r2, [r4, #12]
    6fe6:	69a2      	ldr	r2, [r4, #24]
    6fe8:	2a00      	cmp	r2, #0
    6fea:	d000      	beq.n	6fee <_scanf_chars+0xbe>
    6fec:	703b      	strb	r3, [r7, #0]
    6fee:	6923      	ldr	r3, [r4, #16]
    6ff0:	2000      	movs	r0, #0
    6ff2:	199e      	adds	r6, r3, r6
    6ff4:	6126      	str	r6, [r4, #16]
    6ff6:	e7c7      	b.n	6f88 <_scanf_chars+0x58>

00006ff8 <_scanf_i>:
    6ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ffa:	000c      	movs	r4, r1
    6ffc:	b08d      	sub	sp, #52	; 0x34
    6ffe:	9302      	str	r3, [sp, #8]
    7000:	4b77      	ldr	r3, [pc, #476]	; (71e0 <_scanf_i+0x1e8>)
    7002:	9005      	str	r0, [sp, #20]
    7004:	0016      	movs	r6, r2
    7006:	aa09      	add	r2, sp, #36	; 0x24
    7008:	cb23      	ldmia	r3!, {r0, r1, r5}
    700a:	c223      	stmia	r2!, {r0, r1, r5}
    700c:	4b75      	ldr	r3, [pc, #468]	; (71e4 <_scanf_i+0x1ec>)
    700e:	9306      	str	r3, [sp, #24]
    7010:	69a3      	ldr	r3, [r4, #24]
    7012:	2b03      	cmp	r3, #3
    7014:	d001      	beq.n	701a <_scanf_i+0x22>
    7016:	4b74      	ldr	r3, [pc, #464]	; (71e8 <_scanf_i+0x1f0>)
    7018:	9306      	str	r3, [sp, #24]
    701a:	22ae      	movs	r2, #174	; 0xae
    701c:	2000      	movs	r0, #0
    701e:	68a3      	ldr	r3, [r4, #8]
    7020:	0052      	lsls	r2, r2, #1
    7022:	1e59      	subs	r1, r3, #1
    7024:	9004      	str	r0, [sp, #16]
    7026:	4291      	cmp	r1, r2
    7028:	d905      	bls.n	7036 <_scanf_i+0x3e>
    702a:	3b5e      	subs	r3, #94	; 0x5e
    702c:	3bff      	subs	r3, #255	; 0xff
    702e:	9304      	str	r3, [sp, #16]
    7030:	235e      	movs	r3, #94	; 0x5e
    7032:	33ff      	adds	r3, #255	; 0xff
    7034:	60a3      	str	r3, [r4, #8]
    7036:	0023      	movs	r3, r4
    7038:	331c      	adds	r3, #28
    703a:	9301      	str	r3, [sp, #4]
    703c:	23d0      	movs	r3, #208	; 0xd0
    703e:	2700      	movs	r7, #0
    7040:	6822      	ldr	r2, [r4, #0]
    7042:	011b      	lsls	r3, r3, #4
    7044:	4313      	orrs	r3, r2
    7046:	6023      	str	r3, [r4, #0]
    7048:	9b01      	ldr	r3, [sp, #4]
    704a:	9303      	str	r3, [sp, #12]
    704c:	6833      	ldr	r3, [r6, #0]
    704e:	a809      	add	r0, sp, #36	; 0x24
    7050:	7819      	ldrb	r1, [r3, #0]
    7052:	00bb      	lsls	r3, r7, #2
    7054:	2202      	movs	r2, #2
    7056:	5818      	ldr	r0, [r3, r0]
    7058:	f000 fc90 	bl	797c <memchr>
    705c:	2800      	cmp	r0, #0
    705e:	d02b      	beq.n	70b8 <_scanf_i+0xc0>
    7060:	2f01      	cmp	r7, #1
    7062:	d15f      	bne.n	7124 <_scanf_i+0x12c>
    7064:	6863      	ldr	r3, [r4, #4]
    7066:	2b00      	cmp	r3, #0
    7068:	d106      	bne.n	7078 <_scanf_i+0x80>
    706a:	3308      	adds	r3, #8
    706c:	6822      	ldr	r2, [r4, #0]
    706e:	6063      	str	r3, [r4, #4]
    7070:	33f9      	adds	r3, #249	; 0xf9
    7072:	33ff      	adds	r3, #255	; 0xff
    7074:	4313      	orrs	r3, r2
    7076:	6023      	str	r3, [r4, #0]
    7078:	4b5c      	ldr	r3, [pc, #368]	; (71ec <_scanf_i+0x1f4>)
    707a:	6822      	ldr	r2, [r4, #0]
    707c:	4013      	ands	r3, r2
    707e:	6023      	str	r3, [r4, #0]
    7080:	68a3      	ldr	r3, [r4, #8]
    7082:	1e5a      	subs	r2, r3, #1
    7084:	60a2      	str	r2, [r4, #8]
    7086:	2b00      	cmp	r3, #0
    7088:	d016      	beq.n	70b8 <_scanf_i+0xc0>
    708a:	9b03      	ldr	r3, [sp, #12]
    708c:	1c5d      	adds	r5, r3, #1
    708e:	6833      	ldr	r3, [r6, #0]
    7090:	1c5a      	adds	r2, r3, #1
    7092:	6032      	str	r2, [r6, #0]
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	9a03      	ldr	r2, [sp, #12]
    7098:	9503      	str	r5, [sp, #12]
    709a:	7013      	strb	r3, [r2, #0]
    709c:	6873      	ldr	r3, [r6, #4]
    709e:	3b01      	subs	r3, #1
    70a0:	6073      	str	r3, [r6, #4]
    70a2:	2b00      	cmp	r3, #0
    70a4:	dc08      	bgt.n	70b8 <_scanf_i+0xc0>
    70a6:	23c0      	movs	r3, #192	; 0xc0
    70a8:	005b      	lsls	r3, r3, #1
    70aa:	58e3      	ldr	r3, [r4, r3]
    70ac:	0031      	movs	r1, r6
    70ae:	9805      	ldr	r0, [sp, #20]
    70b0:	9307      	str	r3, [sp, #28]
    70b2:	4798      	blx	r3
    70b4:	2800      	cmp	r0, #0
    70b6:	d17d      	bne.n	71b4 <_scanf_i+0x1bc>
    70b8:	3701      	adds	r7, #1
    70ba:	2f03      	cmp	r7, #3
    70bc:	d1c6      	bne.n	704c <_scanf_i+0x54>
    70be:	6863      	ldr	r3, [r4, #4]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d101      	bne.n	70c8 <_scanf_i+0xd0>
    70c4:	330a      	adds	r3, #10
    70c6:	6063      	str	r3, [r4, #4]
    70c8:	2110      	movs	r1, #16
    70ca:	2700      	movs	r7, #0
    70cc:	6863      	ldr	r3, [r4, #4]
    70ce:	6960      	ldr	r0, [r4, #20]
    70d0:	1ac9      	subs	r1, r1, r3
    70d2:	4b47      	ldr	r3, [pc, #284]	; (71f0 <_scanf_i+0x1f8>)
    70d4:	18c9      	adds	r1, r1, r3
    70d6:	f000 f973 	bl	73c0 <__sccl>
    70da:	9d03      	ldr	r5, [sp, #12]
    70dc:	68a3      	ldr	r3, [r4, #8]
    70de:	2b00      	cmp	r3, #0
    70e0:	d041      	beq.n	7166 <_scanf_i+0x16e>
    70e2:	6832      	ldr	r2, [r6, #0]
    70e4:	6960      	ldr	r0, [r4, #20]
    70e6:	7811      	ldrb	r1, [r2, #0]
    70e8:	5c40      	ldrb	r0, [r0, r1]
    70ea:	2800      	cmp	r0, #0
    70ec:	d03b      	beq.n	7166 <_scanf_i+0x16e>
    70ee:	2930      	cmp	r1, #48	; 0x30
    70f0:	d128      	bne.n	7144 <_scanf_i+0x14c>
    70f2:	2080      	movs	r0, #128	; 0x80
    70f4:	6821      	ldr	r1, [r4, #0]
    70f6:	0100      	lsls	r0, r0, #4
    70f8:	4201      	tst	r1, r0
    70fa:	d023      	beq.n	7144 <_scanf_i+0x14c>
    70fc:	9a04      	ldr	r2, [sp, #16]
    70fe:	3701      	adds	r7, #1
    7100:	2a00      	cmp	r2, #0
    7102:	d003      	beq.n	710c <_scanf_i+0x114>
    7104:	3a01      	subs	r2, #1
    7106:	3301      	adds	r3, #1
    7108:	9204      	str	r2, [sp, #16]
    710a:	60a3      	str	r3, [r4, #8]
    710c:	6873      	ldr	r3, [r6, #4]
    710e:	3b01      	subs	r3, #1
    7110:	6073      	str	r3, [r6, #4]
    7112:	2b00      	cmp	r3, #0
    7114:	dd1e      	ble.n	7154 <_scanf_i+0x15c>
    7116:	6833      	ldr	r3, [r6, #0]
    7118:	3301      	adds	r3, #1
    711a:	6033      	str	r3, [r6, #0]
    711c:	68a3      	ldr	r3, [r4, #8]
    711e:	3b01      	subs	r3, #1
    7120:	60a3      	str	r3, [r4, #8]
    7122:	e7db      	b.n	70dc <_scanf_i+0xe4>
    7124:	2f02      	cmp	r7, #2
    7126:	d1ab      	bne.n	7080 <_scanf_i+0x88>
    7128:	21c0      	movs	r1, #192	; 0xc0
    712a:	2380      	movs	r3, #128	; 0x80
    712c:	6822      	ldr	r2, [r4, #0]
    712e:	00c9      	lsls	r1, r1, #3
    7130:	4011      	ands	r1, r2
    7132:	009b      	lsls	r3, r3, #2
    7134:	4299      	cmp	r1, r3
    7136:	d1c2      	bne.n	70be <_scanf_i+0xc6>
    7138:	3bf1      	subs	r3, #241	; 0xf1
    713a:	3bff      	subs	r3, #255	; 0xff
    713c:	6063      	str	r3, [r4, #4]
    713e:	33f0      	adds	r3, #240	; 0xf0
    7140:	4313      	orrs	r3, r2
    7142:	e79c      	b.n	707e <_scanf_i+0x86>
    7144:	6821      	ldr	r1, [r4, #0]
    7146:	4b2b      	ldr	r3, [pc, #172]	; (71f4 <_scanf_i+0x1fc>)
    7148:	400b      	ands	r3, r1
    714a:	6023      	str	r3, [r4, #0]
    714c:	7813      	ldrb	r3, [r2, #0]
    714e:	702b      	strb	r3, [r5, #0]
    7150:	3501      	adds	r5, #1
    7152:	e7db      	b.n	710c <_scanf_i+0x114>
    7154:	23c0      	movs	r3, #192	; 0xc0
    7156:	005b      	lsls	r3, r3, #1
    7158:	58e3      	ldr	r3, [r4, r3]
    715a:	0031      	movs	r1, r6
    715c:	9805      	ldr	r0, [sp, #20]
    715e:	9303      	str	r3, [sp, #12]
    7160:	4798      	blx	r3
    7162:	2800      	cmp	r0, #0
    7164:	d0da      	beq.n	711c <_scanf_i+0x124>
    7166:	6823      	ldr	r3, [r4, #0]
    7168:	05db      	lsls	r3, r3, #23
    716a:	d50e      	bpl.n	718a <_scanf_i+0x192>
    716c:	9b01      	ldr	r3, [sp, #4]
    716e:	429d      	cmp	r5, r3
    7170:	d907      	bls.n	7182 <_scanf_i+0x18a>
    7172:	23be      	movs	r3, #190	; 0xbe
    7174:	3d01      	subs	r5, #1
    7176:	005b      	lsls	r3, r3, #1
    7178:	7829      	ldrb	r1, [r5, #0]
    717a:	58e3      	ldr	r3, [r4, r3]
    717c:	0032      	movs	r2, r6
    717e:	9805      	ldr	r0, [sp, #20]
    7180:	4798      	blx	r3
    7182:	9b01      	ldr	r3, [sp, #4]
    7184:	2001      	movs	r0, #1
    7186:	429d      	cmp	r5, r3
    7188:	d027      	beq.n	71da <_scanf_i+0x1e2>
    718a:	2210      	movs	r2, #16
    718c:	6823      	ldr	r3, [r4, #0]
    718e:	401a      	ands	r2, r3
    7190:	d11c      	bne.n	71cc <_scanf_i+0x1d4>
    7192:	702a      	strb	r2, [r5, #0]
    7194:	6863      	ldr	r3, [r4, #4]
    7196:	9901      	ldr	r1, [sp, #4]
    7198:	9805      	ldr	r0, [sp, #20]
    719a:	9e06      	ldr	r6, [sp, #24]
    719c:	47b0      	blx	r6
    719e:	9b02      	ldr	r3, [sp, #8]
    71a0:	6822      	ldr	r2, [r4, #0]
    71a2:	681b      	ldr	r3, [r3, #0]
    71a4:	0691      	lsls	r1, r2, #26
    71a6:	d507      	bpl.n	71b8 <_scanf_i+0x1c0>
    71a8:	9902      	ldr	r1, [sp, #8]
    71aa:	1d1a      	adds	r2, r3, #4
    71ac:	600a      	str	r2, [r1, #0]
    71ae:	681b      	ldr	r3, [r3, #0]
    71b0:	6018      	str	r0, [r3, #0]
    71b2:	e008      	b.n	71c6 <_scanf_i+0x1ce>
    71b4:	2700      	movs	r7, #0
    71b6:	e7d6      	b.n	7166 <_scanf_i+0x16e>
    71b8:	07d1      	lsls	r1, r2, #31
    71ba:	d5f5      	bpl.n	71a8 <_scanf_i+0x1b0>
    71bc:	9902      	ldr	r1, [sp, #8]
    71be:	1d1a      	adds	r2, r3, #4
    71c0:	600a      	str	r2, [r1, #0]
    71c2:	681b      	ldr	r3, [r3, #0]
    71c4:	8018      	strh	r0, [r3, #0]
    71c6:	68e3      	ldr	r3, [r4, #12]
    71c8:	3301      	adds	r3, #1
    71ca:	60e3      	str	r3, [r4, #12]
    71cc:	2000      	movs	r0, #0
    71ce:	9b01      	ldr	r3, [sp, #4]
    71d0:	1aed      	subs	r5, r5, r3
    71d2:	6923      	ldr	r3, [r4, #16]
    71d4:	19ef      	adds	r7, r5, r7
    71d6:	19df      	adds	r7, r3, r7
    71d8:	6127      	str	r7, [r4, #16]
    71da:	b00d      	add	sp, #52	; 0x34
    71dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71de:	46c0      	nop			; (mov r8, r8)
    71e0:	00008d14 	.word	0x00008d14
    71e4:	000075c9 	.word	0x000075c9
    71e8:	000076f9 	.word	0x000076f9
    71ec:	fffffaff 	.word	0xfffffaff
    71f0:	00008d20 	.word	0x00008d20
    71f4:	fffff6ff 	.word	0xfffff6ff

000071f8 <_putc_r>:
    71f8:	b570      	push	{r4, r5, r6, lr}
    71fa:	0006      	movs	r6, r0
    71fc:	000d      	movs	r5, r1
    71fe:	0014      	movs	r4, r2
    7200:	2800      	cmp	r0, #0
    7202:	d004      	beq.n	720e <_putc_r+0x16>
    7204:	6983      	ldr	r3, [r0, #24]
    7206:	2b00      	cmp	r3, #0
    7208:	d101      	bne.n	720e <_putc_r+0x16>
    720a:	f7fe fee7 	bl	5fdc <__sinit>
    720e:	4b12      	ldr	r3, [pc, #72]	; (7258 <_putc_r+0x60>)
    7210:	429c      	cmp	r4, r3
    7212:	d111      	bne.n	7238 <_putc_r+0x40>
    7214:	6874      	ldr	r4, [r6, #4]
    7216:	68a3      	ldr	r3, [r4, #8]
    7218:	3b01      	subs	r3, #1
    721a:	60a3      	str	r3, [r4, #8]
    721c:	2b00      	cmp	r3, #0
    721e:	da05      	bge.n	722c <_putc_r+0x34>
    7220:	69a2      	ldr	r2, [r4, #24]
    7222:	4293      	cmp	r3, r2
    7224:	db12      	blt.n	724c <_putc_r+0x54>
    7226:	b2eb      	uxtb	r3, r5
    7228:	2b0a      	cmp	r3, #10
    722a:	d00f      	beq.n	724c <_putc_r+0x54>
    722c:	6823      	ldr	r3, [r4, #0]
    722e:	b2e8      	uxtb	r0, r5
    7230:	1c5a      	adds	r2, r3, #1
    7232:	6022      	str	r2, [r4, #0]
    7234:	701d      	strb	r5, [r3, #0]
    7236:	bd70      	pop	{r4, r5, r6, pc}
    7238:	4b08      	ldr	r3, [pc, #32]	; (725c <_putc_r+0x64>)
    723a:	429c      	cmp	r4, r3
    723c:	d101      	bne.n	7242 <_putc_r+0x4a>
    723e:	68b4      	ldr	r4, [r6, #8]
    7240:	e7e9      	b.n	7216 <_putc_r+0x1e>
    7242:	4b07      	ldr	r3, [pc, #28]	; (7260 <_putc_r+0x68>)
    7244:	429c      	cmp	r4, r3
    7246:	d1e6      	bne.n	7216 <_putc_r+0x1e>
    7248:	68f4      	ldr	r4, [r6, #12]
    724a:	e7e4      	b.n	7216 <_putc_r+0x1e>
    724c:	0022      	movs	r2, r4
    724e:	0029      	movs	r1, r5
    7250:	0030      	movs	r0, r6
    7252:	f7fe fceb 	bl	5c2c <__swbuf_r>
    7256:	e7ee      	b.n	7236 <_putc_r+0x3e>
    7258:	00008ca0 	.word	0x00008ca0
    725c:	00008cc0 	.word	0x00008cc0
    7260:	00008c80 	.word	0x00008c80

00007264 <lflush>:
    7264:	2209      	movs	r2, #9
    7266:	b510      	push	{r4, lr}
    7268:	8983      	ldrh	r3, [r0, #12]
    726a:	4013      	ands	r3, r2
    726c:	2200      	movs	r2, #0
    726e:	2b09      	cmp	r3, #9
    7270:	d102      	bne.n	7278 <lflush+0x14>
    7272:	f7fe fe5d 	bl	5f30 <fflush>
    7276:	0002      	movs	r2, r0
    7278:	0010      	movs	r0, r2
    727a:	bd10      	pop	{r4, pc}

0000727c <__srefill_r>:
    727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    727e:	0005      	movs	r5, r0
    7280:	000c      	movs	r4, r1
    7282:	2800      	cmp	r0, #0
    7284:	d004      	beq.n	7290 <__srefill_r+0x14>
    7286:	6983      	ldr	r3, [r0, #24]
    7288:	2b00      	cmp	r3, #0
    728a:	d101      	bne.n	7290 <__srefill_r+0x14>
    728c:	f7fe fea6 	bl	5fdc <__sinit>
    7290:	4b3d      	ldr	r3, [pc, #244]	; (7388 <__srefill_r+0x10c>)
    7292:	429c      	cmp	r4, r3
    7294:	d10a      	bne.n	72ac <__srefill_r+0x30>
    7296:	686c      	ldr	r4, [r5, #4]
    7298:	2300      	movs	r3, #0
    729a:	6063      	str	r3, [r4, #4]
    729c:	230c      	movs	r3, #12
    729e:	5ee2      	ldrsh	r2, [r4, r3]
    72a0:	b293      	uxth	r3, r2
    72a2:	0699      	lsls	r1, r3, #26
    72a4:	d50c      	bpl.n	72c0 <__srefill_r+0x44>
    72a6:	2001      	movs	r0, #1
    72a8:	4240      	negs	r0, r0
    72aa:	e068      	b.n	737e <__srefill_r+0x102>
    72ac:	4b37      	ldr	r3, [pc, #220]	; (738c <__srefill_r+0x110>)
    72ae:	429c      	cmp	r4, r3
    72b0:	d101      	bne.n	72b6 <__srefill_r+0x3a>
    72b2:	68ac      	ldr	r4, [r5, #8]
    72b4:	e7f0      	b.n	7298 <__srefill_r+0x1c>
    72b6:	4b36      	ldr	r3, [pc, #216]	; (7390 <__srefill_r+0x114>)
    72b8:	429c      	cmp	r4, r3
    72ba:	d1ed      	bne.n	7298 <__srefill_r+0x1c>
    72bc:	68ec      	ldr	r4, [r5, #12]
    72be:	e7eb      	b.n	7298 <__srefill_r+0x1c>
    72c0:	0759      	lsls	r1, r3, #29
    72c2:	d44a      	bmi.n	735a <__srefill_r+0xde>
    72c4:	06d9      	lsls	r1, r3, #27
    72c6:	d405      	bmi.n	72d4 <__srefill_r+0x58>
    72c8:	2309      	movs	r3, #9
    72ca:	602b      	str	r3, [r5, #0]
    72cc:	3337      	adds	r3, #55	; 0x37
    72ce:	4313      	orrs	r3, r2
    72d0:	81a3      	strh	r3, [r4, #12]
    72d2:	e7e8      	b.n	72a6 <__srefill_r+0x2a>
    72d4:	2608      	movs	r6, #8
    72d6:	4233      	tst	r3, r6
    72d8:	d00a      	beq.n	72f0 <__srefill_r+0x74>
    72da:	0021      	movs	r1, r4
    72dc:	0028      	movs	r0, r5
    72de:	f7fe fdfb 	bl	5ed8 <_fflush_r>
    72e2:	2800      	cmp	r0, #0
    72e4:	d1df      	bne.n	72a6 <__srefill_r+0x2a>
    72e6:	89a3      	ldrh	r3, [r4, #12]
    72e8:	60a0      	str	r0, [r4, #8]
    72ea:	43b3      	bics	r3, r6
    72ec:	81a3      	strh	r3, [r4, #12]
    72ee:	61a0      	str	r0, [r4, #24]
    72f0:	2304      	movs	r3, #4
    72f2:	89a2      	ldrh	r2, [r4, #12]
    72f4:	4313      	orrs	r3, r2
    72f6:	81a3      	strh	r3, [r4, #12]
    72f8:	6923      	ldr	r3, [r4, #16]
    72fa:	2b00      	cmp	r3, #0
    72fc:	d103      	bne.n	7306 <__srefill_r+0x8a>
    72fe:	0021      	movs	r1, r4
    7300:	0028      	movs	r0, r5
    7302:	f7fe ff45 	bl	6190 <__smakebuf_r>
    7306:	230c      	movs	r3, #12
    7308:	5ee7      	ldrsh	r7, [r4, r3]
    730a:	b2be      	uxth	r6, r7
    730c:	07b3      	lsls	r3, r6, #30
    730e:	d00f      	beq.n	7330 <__srefill_r+0xb4>
    7310:	2301      	movs	r3, #1
    7312:	81a3      	strh	r3, [r4, #12]
    7314:	4b1f      	ldr	r3, [pc, #124]	; (7394 <__srefill_r+0x118>)
    7316:	4920      	ldr	r1, [pc, #128]	; (7398 <__srefill_r+0x11c>)
    7318:	6818      	ldr	r0, [r3, #0]
    731a:	f7fe fed3 	bl	60c4 <_fwalk>
    731e:	2309      	movs	r3, #9
    7320:	81a7      	strh	r7, [r4, #12]
    7322:	401e      	ands	r6, r3
    7324:	429e      	cmp	r6, r3
    7326:	d103      	bne.n	7330 <__srefill_r+0xb4>
    7328:	0021      	movs	r1, r4
    732a:	0028      	movs	r0, r5
    732c:	f7fe fd4a 	bl	5dc4 <__sflush_r>
    7330:	6923      	ldr	r3, [r4, #16]
    7332:	6922      	ldr	r2, [r4, #16]
    7334:	6023      	str	r3, [r4, #0]
    7336:	0028      	movs	r0, r5
    7338:	6963      	ldr	r3, [r4, #20]
    733a:	6a21      	ldr	r1, [r4, #32]
    733c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    733e:	47a8      	blx	r5
    7340:	0002      	movs	r2, r0
    7342:	6060      	str	r0, [r4, #4]
    7344:	2000      	movs	r0, #0
    7346:	4282      	cmp	r2, r0
    7348:	dc19      	bgt.n	737e <__srefill_r+0x102>
    734a:	89a1      	ldrh	r1, [r4, #12]
    734c:	4282      	cmp	r2, r0
    734e:	d117      	bne.n	7380 <__srefill_r+0x104>
    7350:	2320      	movs	r3, #32
    7352:	430b      	orrs	r3, r1
    7354:	81a3      	strh	r3, [r4, #12]
    7356:	3801      	subs	r0, #1
    7358:	e011      	b.n	737e <__srefill_r+0x102>
    735a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    735c:	2900      	cmp	r1, #0
    735e:	d0cb      	beq.n	72f8 <__srefill_r+0x7c>
    7360:	0023      	movs	r3, r4
    7362:	3344      	adds	r3, #68	; 0x44
    7364:	4299      	cmp	r1, r3
    7366:	d002      	beq.n	736e <__srefill_r+0xf2>
    7368:	0028      	movs	r0, r5
    736a:	f7fe ff59 	bl	6220 <_free_r>
    736e:	2000      	movs	r0, #0
    7370:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7372:	6360      	str	r0, [r4, #52]	; 0x34
    7374:	6063      	str	r3, [r4, #4]
    7376:	4283      	cmp	r3, r0
    7378:	d0be      	beq.n	72f8 <__srefill_r+0x7c>
    737a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    737c:	6023      	str	r3, [r4, #0]
    737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7380:	2340      	movs	r3, #64	; 0x40
    7382:	6060      	str	r0, [r4, #4]
    7384:	430b      	orrs	r3, r1
    7386:	e7a3      	b.n	72d0 <__srefill_r+0x54>
    7388:	00008ca0 	.word	0x00008ca0
    738c:	00008cc0 	.word	0x00008cc0
    7390:	00008c80 	.word	0x00008c80
    7394:	00008c7c 	.word	0x00008c7c
    7398:	00007265 	.word	0x00007265

0000739c <_sbrk_r>:
    739c:	2300      	movs	r3, #0
    739e:	b570      	push	{r4, r5, r6, lr}
    73a0:	4c06      	ldr	r4, [pc, #24]	; (73bc <_sbrk_r+0x20>)
    73a2:	0005      	movs	r5, r0
    73a4:	0008      	movs	r0, r1
    73a6:	6023      	str	r3, [r4, #0]
    73a8:	f7fd fd58 	bl	4e5c <_sbrk>
    73ac:	1c43      	adds	r3, r0, #1
    73ae:	d103      	bne.n	73b8 <_sbrk_r+0x1c>
    73b0:	6823      	ldr	r3, [r4, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	d000      	beq.n	73b8 <_sbrk_r+0x1c>
    73b6:	602b      	str	r3, [r5, #0]
    73b8:	bd70      	pop	{r4, r5, r6, pc}
    73ba:	46c0      	nop			; (mov r8, r8)
    73bc:	20000a5c 	.word	0x20000a5c

000073c0 <__sccl>:
    73c0:	b570      	push	{r4, r5, r6, lr}
    73c2:	780b      	ldrb	r3, [r1, #0]
    73c4:	2b5e      	cmp	r3, #94	; 0x5e
    73c6:	d00d      	beq.n	73e4 <__sccl+0x24>
    73c8:	1c4a      	adds	r2, r1, #1
    73ca:	2100      	movs	r1, #0
    73cc:	0004      	movs	r4, r0
    73ce:	1c45      	adds	r5, r0, #1
    73d0:	35ff      	adds	r5, #255	; 0xff
    73d2:	7021      	strb	r1, [r4, #0]
    73d4:	3401      	adds	r4, #1
    73d6:	42a5      	cmp	r5, r4
    73d8:	d1fb      	bne.n	73d2 <__sccl+0x12>
    73da:	2b00      	cmp	r3, #0
    73dc:	d106      	bne.n	73ec <__sccl+0x2c>
    73de:	3a01      	subs	r2, #1
    73e0:	0010      	movs	r0, r2
    73e2:	bd70      	pop	{r4, r5, r6, pc}
    73e4:	1c8a      	adds	r2, r1, #2
    73e6:	784b      	ldrb	r3, [r1, #1]
    73e8:	2101      	movs	r1, #1
    73ea:	e7ef      	b.n	73cc <__sccl+0xc>
    73ec:	2401      	movs	r4, #1
    73ee:	404c      	eors	r4, r1
    73f0:	0011      	movs	r1, r2
    73f2:	54c4      	strb	r4, [r0, r3]
    73f4:	780d      	ldrb	r5, [r1, #0]
    73f6:	1c4a      	adds	r2, r1, #1
    73f8:	2d2d      	cmp	r5, #45	; 0x2d
    73fa:	d007      	beq.n	740c <__sccl+0x4c>
    73fc:	2d5d      	cmp	r5, #93	; 0x5d
    73fe:	d0ef      	beq.n	73e0 <__sccl+0x20>
    7400:	2d00      	cmp	r5, #0
    7402:	d101      	bne.n	7408 <__sccl+0x48>
    7404:	000a      	movs	r2, r1
    7406:	e7eb      	b.n	73e0 <__sccl+0x20>
    7408:	002b      	movs	r3, r5
    740a:	e7f1      	b.n	73f0 <__sccl+0x30>
    740c:	784e      	ldrb	r6, [r1, #1]
    740e:	2e5d      	cmp	r6, #93	; 0x5d
    7410:	d0fa      	beq.n	7408 <__sccl+0x48>
    7412:	42b3      	cmp	r3, r6
    7414:	dcf8      	bgt.n	7408 <__sccl+0x48>
    7416:	3102      	adds	r1, #2
    7418:	3301      	adds	r3, #1
    741a:	54c4      	strb	r4, [r0, r3]
    741c:	429e      	cmp	r6, r3
    741e:	dcfb      	bgt.n	7418 <__sccl+0x58>
    7420:	e7e8      	b.n	73f4 <__sccl+0x34>
	...

00007424 <__sread>:
    7424:	b570      	push	{r4, r5, r6, lr}
    7426:	000c      	movs	r4, r1
    7428:	250e      	movs	r5, #14
    742a:	5f49      	ldrsh	r1, [r1, r5]
    742c:	f000 faf4 	bl	7a18 <_read_r>
    7430:	2800      	cmp	r0, #0
    7432:	db03      	blt.n	743c <__sread+0x18>
    7434:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7436:	181b      	adds	r3, r3, r0
    7438:	6563      	str	r3, [r4, #84]	; 0x54
    743a:	bd70      	pop	{r4, r5, r6, pc}
    743c:	89a3      	ldrh	r3, [r4, #12]
    743e:	4a02      	ldr	r2, [pc, #8]	; (7448 <__sread+0x24>)
    7440:	4013      	ands	r3, r2
    7442:	81a3      	strh	r3, [r4, #12]
    7444:	e7f9      	b.n	743a <__sread+0x16>
    7446:	46c0      	nop			; (mov r8, r8)
    7448:	ffffefff 	.word	0xffffefff

0000744c <__swrite>:
    744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744e:	001f      	movs	r7, r3
    7450:	898b      	ldrh	r3, [r1, #12]
    7452:	0005      	movs	r5, r0
    7454:	000c      	movs	r4, r1
    7456:	0016      	movs	r6, r2
    7458:	05db      	lsls	r3, r3, #23
    745a:	d505      	bpl.n	7468 <__swrite+0x1c>
    745c:	230e      	movs	r3, #14
    745e:	5ec9      	ldrsh	r1, [r1, r3]
    7460:	2200      	movs	r2, #0
    7462:	2302      	movs	r3, #2
    7464:	f000 fa64 	bl	7930 <_lseek_r>
    7468:	89a3      	ldrh	r3, [r4, #12]
    746a:	4a05      	ldr	r2, [pc, #20]	; (7480 <__swrite+0x34>)
    746c:	0028      	movs	r0, r5
    746e:	4013      	ands	r3, r2
    7470:	81a3      	strh	r3, [r4, #12]
    7472:	0032      	movs	r2, r6
    7474:	230e      	movs	r3, #14
    7476:	5ee1      	ldrsh	r1, [r4, r3]
    7478:	003b      	movs	r3, r7
    747a:	f000 f9fd 	bl	7878 <_write_r>
    747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7480:	ffffefff 	.word	0xffffefff

00007484 <__sseek>:
    7484:	b570      	push	{r4, r5, r6, lr}
    7486:	000c      	movs	r4, r1
    7488:	250e      	movs	r5, #14
    748a:	5f49      	ldrsh	r1, [r1, r5]
    748c:	f000 fa50 	bl	7930 <_lseek_r>
    7490:	89a3      	ldrh	r3, [r4, #12]
    7492:	1c42      	adds	r2, r0, #1
    7494:	d103      	bne.n	749e <__sseek+0x1a>
    7496:	4a05      	ldr	r2, [pc, #20]	; (74ac <__sseek+0x28>)
    7498:	4013      	ands	r3, r2
    749a:	81a3      	strh	r3, [r4, #12]
    749c:	bd70      	pop	{r4, r5, r6, pc}
    749e:	2280      	movs	r2, #128	; 0x80
    74a0:	0152      	lsls	r2, r2, #5
    74a2:	4313      	orrs	r3, r2
    74a4:	81a3      	strh	r3, [r4, #12]
    74a6:	6560      	str	r0, [r4, #84]	; 0x54
    74a8:	e7f8      	b.n	749c <__sseek+0x18>
    74aa:	46c0      	nop			; (mov r8, r8)
    74ac:	ffffefff 	.word	0xffffefff

000074b0 <__sclose>:
    74b0:	b510      	push	{r4, lr}
    74b2:	230e      	movs	r3, #14
    74b4:	5ec9      	ldrsh	r1, [r1, r3]
    74b6:	f000 f9f3 	bl	78a0 <_close_r>
    74ba:	bd10      	pop	{r4, pc}

000074bc <_strtol_l.isra.0>:
    74bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    74be:	001f      	movs	r7, r3
    74c0:	000e      	movs	r6, r1
    74c2:	b087      	sub	sp, #28
    74c4:	9005      	str	r0, [sp, #20]
    74c6:	9103      	str	r1, [sp, #12]
    74c8:	9202      	str	r2, [sp, #8]
    74ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    74cc:	7834      	ldrb	r4, [r6, #0]
    74ce:	f000 fa1d 	bl	790c <__locale_ctype_ptr_l>
    74d2:	2208      	movs	r2, #8
    74d4:	1900      	adds	r0, r0, r4
    74d6:	7843      	ldrb	r3, [r0, #1]
    74d8:	1c75      	adds	r5, r6, #1
    74da:	4013      	ands	r3, r2
    74dc:	d10c      	bne.n	74f8 <_strtol_l.isra.0+0x3c>
    74de:	2c2d      	cmp	r4, #45	; 0x2d
    74e0:	d10c      	bne.n	74fc <_strtol_l.isra.0+0x40>
    74e2:	3301      	adds	r3, #1
    74e4:	782c      	ldrb	r4, [r5, #0]
    74e6:	9301      	str	r3, [sp, #4]
    74e8:	1cb5      	adds	r5, r6, #2
    74ea:	2f00      	cmp	r7, #0
    74ec:	d00c      	beq.n	7508 <_strtol_l.isra.0+0x4c>
    74ee:	2f10      	cmp	r7, #16
    74f0:	d114      	bne.n	751c <_strtol_l.isra.0+0x60>
    74f2:	2c30      	cmp	r4, #48	; 0x30
    74f4:	d00a      	beq.n	750c <_strtol_l.isra.0+0x50>
    74f6:	e011      	b.n	751c <_strtol_l.isra.0+0x60>
    74f8:	002e      	movs	r6, r5
    74fa:	e7e6      	b.n	74ca <_strtol_l.isra.0+0xe>
    74fc:	9301      	str	r3, [sp, #4]
    74fe:	2c2b      	cmp	r4, #43	; 0x2b
    7500:	d1f3      	bne.n	74ea <_strtol_l.isra.0+0x2e>
    7502:	782c      	ldrb	r4, [r5, #0]
    7504:	1cb5      	adds	r5, r6, #2
    7506:	e7f0      	b.n	74ea <_strtol_l.isra.0+0x2e>
    7508:	2c30      	cmp	r4, #48	; 0x30
    750a:	d12f      	bne.n	756c <_strtol_l.isra.0+0xb0>
    750c:	2220      	movs	r2, #32
    750e:	782b      	ldrb	r3, [r5, #0]
    7510:	4393      	bics	r3, r2
    7512:	2b58      	cmp	r3, #88	; 0x58
    7514:	d151      	bne.n	75ba <_strtol_l.isra.0+0xfe>
    7516:	2710      	movs	r7, #16
    7518:	786c      	ldrb	r4, [r5, #1]
    751a:	3502      	adds	r5, #2
    751c:	9b01      	ldr	r3, [sp, #4]
    751e:	4a29      	ldr	r2, [pc, #164]	; (75c4 <_strtol_l.isra.0+0x108>)
    7520:	0039      	movs	r1, r7
    7522:	189e      	adds	r6, r3, r2
    7524:	0030      	movs	r0, r6
    7526:	f7fe f891 	bl	564c <__aeabi_uidivmod>
    752a:	0030      	movs	r0, r6
    752c:	9104      	str	r1, [sp, #16]
    752e:	0039      	movs	r1, r7
    7530:	f7fe f806 	bl	5540 <__udivsi3>
    7534:	2101      	movs	r1, #1
    7536:	2300      	movs	r3, #0
    7538:	4249      	negs	r1, r1
    753a:	0002      	movs	r2, r0
    753c:	468c      	mov	ip, r1
    753e:	0018      	movs	r0, r3
    7540:	0021      	movs	r1, r4
    7542:	3930      	subs	r1, #48	; 0x30
    7544:	2909      	cmp	r1, #9
    7546:	d813      	bhi.n	7570 <_strtol_l.isra.0+0xb4>
    7548:	000c      	movs	r4, r1
    754a:	42a7      	cmp	r7, r4
    754c:	dd1c      	ble.n	7588 <_strtol_l.isra.0+0xcc>
    754e:	1c59      	adds	r1, r3, #1
    7550:	d009      	beq.n	7566 <_strtol_l.isra.0+0xaa>
    7552:	4663      	mov	r3, ip
    7554:	4282      	cmp	r2, r0
    7556:	d306      	bcc.n	7566 <_strtol_l.isra.0+0xaa>
    7558:	d102      	bne.n	7560 <_strtol_l.isra.0+0xa4>
    755a:	9904      	ldr	r1, [sp, #16]
    755c:	42a1      	cmp	r1, r4
    755e:	db02      	blt.n	7566 <_strtol_l.isra.0+0xaa>
    7560:	2301      	movs	r3, #1
    7562:	4378      	muls	r0, r7
    7564:	1820      	adds	r0, r4, r0
    7566:	782c      	ldrb	r4, [r5, #0]
    7568:	3501      	adds	r5, #1
    756a:	e7e9      	b.n	7540 <_strtol_l.isra.0+0x84>
    756c:	270a      	movs	r7, #10
    756e:	e7d5      	b.n	751c <_strtol_l.isra.0+0x60>
    7570:	0021      	movs	r1, r4
    7572:	3941      	subs	r1, #65	; 0x41
    7574:	2919      	cmp	r1, #25
    7576:	d801      	bhi.n	757c <_strtol_l.isra.0+0xc0>
    7578:	3c37      	subs	r4, #55	; 0x37
    757a:	e7e6      	b.n	754a <_strtol_l.isra.0+0x8e>
    757c:	0021      	movs	r1, r4
    757e:	3961      	subs	r1, #97	; 0x61
    7580:	2919      	cmp	r1, #25
    7582:	d801      	bhi.n	7588 <_strtol_l.isra.0+0xcc>
    7584:	3c57      	subs	r4, #87	; 0x57
    7586:	e7e0      	b.n	754a <_strtol_l.isra.0+0x8e>
    7588:	1c5a      	adds	r2, r3, #1
    758a:	d108      	bne.n	759e <_strtol_l.isra.0+0xe2>
    758c:	9a05      	ldr	r2, [sp, #20]
    758e:	3323      	adds	r3, #35	; 0x23
    7590:	6013      	str	r3, [r2, #0]
    7592:	9b02      	ldr	r3, [sp, #8]
    7594:	0030      	movs	r0, r6
    7596:	2b00      	cmp	r3, #0
    7598:	d10b      	bne.n	75b2 <_strtol_l.isra.0+0xf6>
    759a:	b007      	add	sp, #28
    759c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    759e:	9a01      	ldr	r2, [sp, #4]
    75a0:	2a00      	cmp	r2, #0
    75a2:	d000      	beq.n	75a6 <_strtol_l.isra.0+0xea>
    75a4:	4240      	negs	r0, r0
    75a6:	9a02      	ldr	r2, [sp, #8]
    75a8:	2a00      	cmp	r2, #0
    75aa:	d0f6      	beq.n	759a <_strtol_l.isra.0+0xde>
    75ac:	9a03      	ldr	r2, [sp, #12]
    75ae:	2b00      	cmp	r3, #0
    75b0:	d000      	beq.n	75b4 <_strtol_l.isra.0+0xf8>
    75b2:	1e6a      	subs	r2, r5, #1
    75b4:	9b02      	ldr	r3, [sp, #8]
    75b6:	601a      	str	r2, [r3, #0]
    75b8:	e7ef      	b.n	759a <_strtol_l.isra.0+0xde>
    75ba:	2430      	movs	r4, #48	; 0x30
    75bc:	2f00      	cmp	r7, #0
    75be:	d1ad      	bne.n	751c <_strtol_l.isra.0+0x60>
    75c0:	3708      	adds	r7, #8
    75c2:	e7ab      	b.n	751c <_strtol_l.isra.0+0x60>
    75c4:	7fffffff 	.word	0x7fffffff

000075c8 <_strtol_r>:
    75c8:	b513      	push	{r0, r1, r4, lr}
    75ca:	4c05      	ldr	r4, [pc, #20]	; (75e0 <_strtol_r+0x18>)
    75cc:	6824      	ldr	r4, [r4, #0]
    75ce:	6a24      	ldr	r4, [r4, #32]
    75d0:	2c00      	cmp	r4, #0
    75d2:	d100      	bne.n	75d6 <_strtol_r+0xe>
    75d4:	4c03      	ldr	r4, [pc, #12]	; (75e4 <_strtol_r+0x1c>)
    75d6:	9400      	str	r4, [sp, #0]
    75d8:	f7ff ff70 	bl	74bc <_strtol_l.isra.0>
    75dc:	bd16      	pop	{r1, r2, r4, pc}
    75de:	46c0      	nop			; (mov r8, r8)
    75e0:	200000b0 	.word	0x200000b0
    75e4:	20000114 	.word	0x20000114

000075e8 <_strtoul_l.isra.0>:
    75e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ea:	001f      	movs	r7, r3
    75ec:	000e      	movs	r6, r1
    75ee:	b087      	sub	sp, #28
    75f0:	9005      	str	r0, [sp, #20]
    75f2:	9103      	str	r1, [sp, #12]
    75f4:	9201      	str	r2, [sp, #4]
    75f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    75f8:	7834      	ldrb	r4, [r6, #0]
    75fa:	f000 f987 	bl	790c <__locale_ctype_ptr_l>
    75fe:	2208      	movs	r2, #8
    7600:	1900      	adds	r0, r0, r4
    7602:	7843      	ldrb	r3, [r0, #1]
    7604:	1c75      	adds	r5, r6, #1
    7606:	4013      	ands	r3, r2
    7608:	d10c      	bne.n	7624 <_strtoul_l.isra.0+0x3c>
    760a:	2c2d      	cmp	r4, #45	; 0x2d
    760c:	d10c      	bne.n	7628 <_strtoul_l.isra.0+0x40>
    760e:	3301      	adds	r3, #1
    7610:	782c      	ldrb	r4, [r5, #0]
    7612:	9302      	str	r3, [sp, #8]
    7614:	1cb5      	adds	r5, r6, #2
    7616:	2f00      	cmp	r7, #0
    7618:	d00c      	beq.n	7634 <_strtoul_l.isra.0+0x4c>
    761a:	2f10      	cmp	r7, #16
    761c:	d114      	bne.n	7648 <_strtoul_l.isra.0+0x60>
    761e:	2c30      	cmp	r4, #48	; 0x30
    7620:	d00a      	beq.n	7638 <_strtoul_l.isra.0+0x50>
    7622:	e011      	b.n	7648 <_strtoul_l.isra.0+0x60>
    7624:	002e      	movs	r6, r5
    7626:	e7e6      	b.n	75f6 <_strtoul_l.isra.0+0xe>
    7628:	9302      	str	r3, [sp, #8]
    762a:	2c2b      	cmp	r4, #43	; 0x2b
    762c:	d1f3      	bne.n	7616 <_strtoul_l.isra.0+0x2e>
    762e:	782c      	ldrb	r4, [r5, #0]
    7630:	1cb5      	adds	r5, r6, #2
    7632:	e7f0      	b.n	7616 <_strtoul_l.isra.0+0x2e>
    7634:	2c30      	cmp	r4, #48	; 0x30
    7636:	d12f      	bne.n	7698 <_strtoul_l.isra.0+0xb0>
    7638:	2220      	movs	r2, #32
    763a:	782b      	ldrb	r3, [r5, #0]
    763c:	4393      	bics	r3, r2
    763e:	2b58      	cmp	r3, #88	; 0x58
    7640:	d154      	bne.n	76ec <_strtoul_l.isra.0+0x104>
    7642:	2710      	movs	r7, #16
    7644:	786c      	ldrb	r4, [r5, #1]
    7646:	3502      	adds	r5, #2
    7648:	2001      	movs	r0, #1
    764a:	0039      	movs	r1, r7
    764c:	4240      	negs	r0, r0
    764e:	f7fd ff77 	bl	5540 <__udivsi3>
    7652:	0006      	movs	r6, r0
    7654:	2001      	movs	r0, #1
    7656:	0039      	movs	r1, r7
    7658:	4240      	negs	r0, r0
    765a:	f7fd fff7 	bl	564c <__aeabi_uidivmod>
    765e:	2300      	movs	r3, #0
    7660:	9104      	str	r1, [sp, #16]
    7662:	2101      	movs	r1, #1
    7664:	2201      	movs	r2, #1
    7666:	0018      	movs	r0, r3
    7668:	468c      	mov	ip, r1
    766a:	4252      	negs	r2, r2
    766c:	0021      	movs	r1, r4
    766e:	3930      	subs	r1, #48	; 0x30
    7670:	2909      	cmp	r1, #9
    7672:	d813      	bhi.n	769c <_strtoul_l.isra.0+0xb4>
    7674:	000c      	movs	r4, r1
    7676:	42a7      	cmp	r7, r4
    7678:	dd1e      	ble.n	76b8 <_strtoul_l.isra.0+0xd0>
    767a:	2b00      	cmp	r3, #0
    767c:	db1a      	blt.n	76b4 <_strtoul_l.isra.0+0xcc>
    767e:	0013      	movs	r3, r2
    7680:	4286      	cmp	r6, r0
    7682:	d306      	bcc.n	7692 <_strtoul_l.isra.0+0xaa>
    7684:	d102      	bne.n	768c <_strtoul_l.isra.0+0xa4>
    7686:	9904      	ldr	r1, [sp, #16]
    7688:	42a1      	cmp	r1, r4
    768a:	db02      	blt.n	7692 <_strtoul_l.isra.0+0xaa>
    768c:	4663      	mov	r3, ip
    768e:	4378      	muls	r0, r7
    7690:	1820      	adds	r0, r4, r0
    7692:	782c      	ldrb	r4, [r5, #0]
    7694:	3501      	adds	r5, #1
    7696:	e7e9      	b.n	766c <_strtoul_l.isra.0+0x84>
    7698:	270a      	movs	r7, #10
    769a:	e7d5      	b.n	7648 <_strtoul_l.isra.0+0x60>
    769c:	0021      	movs	r1, r4
    769e:	3941      	subs	r1, #65	; 0x41
    76a0:	2919      	cmp	r1, #25
    76a2:	d801      	bhi.n	76a8 <_strtoul_l.isra.0+0xc0>
    76a4:	3c37      	subs	r4, #55	; 0x37
    76a6:	e7e6      	b.n	7676 <_strtoul_l.isra.0+0x8e>
    76a8:	0021      	movs	r1, r4
    76aa:	3961      	subs	r1, #97	; 0x61
    76ac:	2919      	cmp	r1, #25
    76ae:	d803      	bhi.n	76b8 <_strtoul_l.isra.0+0xd0>
    76b0:	3c57      	subs	r4, #87	; 0x57
    76b2:	e7e0      	b.n	7676 <_strtoul_l.isra.0+0x8e>
    76b4:	0013      	movs	r3, r2
    76b6:	e7ec      	b.n	7692 <_strtoul_l.isra.0+0xaa>
    76b8:	2b00      	cmp	r3, #0
    76ba:	da09      	bge.n	76d0 <_strtoul_l.isra.0+0xe8>
    76bc:	2322      	movs	r3, #34	; 0x22
    76be:	2001      	movs	r0, #1
    76c0:	9a05      	ldr	r2, [sp, #20]
    76c2:	4240      	negs	r0, r0
    76c4:	6013      	str	r3, [r2, #0]
    76c6:	9b01      	ldr	r3, [sp, #4]
    76c8:	2b00      	cmp	r3, #0
    76ca:	d10b      	bne.n	76e4 <_strtoul_l.isra.0+0xfc>
    76cc:	b007      	add	sp, #28
    76ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76d0:	9a02      	ldr	r2, [sp, #8]
    76d2:	2a00      	cmp	r2, #0
    76d4:	d000      	beq.n	76d8 <_strtoul_l.isra.0+0xf0>
    76d6:	4240      	negs	r0, r0
    76d8:	9a01      	ldr	r2, [sp, #4]
    76da:	2a00      	cmp	r2, #0
    76dc:	d0f6      	beq.n	76cc <_strtoul_l.isra.0+0xe4>
    76de:	9a03      	ldr	r2, [sp, #12]
    76e0:	2b00      	cmp	r3, #0
    76e2:	d000      	beq.n	76e6 <_strtoul_l.isra.0+0xfe>
    76e4:	1e6a      	subs	r2, r5, #1
    76e6:	9b01      	ldr	r3, [sp, #4]
    76e8:	601a      	str	r2, [r3, #0]
    76ea:	e7ef      	b.n	76cc <_strtoul_l.isra.0+0xe4>
    76ec:	2430      	movs	r4, #48	; 0x30
    76ee:	2f00      	cmp	r7, #0
    76f0:	d1aa      	bne.n	7648 <_strtoul_l.isra.0+0x60>
    76f2:	3708      	adds	r7, #8
    76f4:	e7a8      	b.n	7648 <_strtoul_l.isra.0+0x60>
	...

000076f8 <_strtoul_r>:
    76f8:	b513      	push	{r0, r1, r4, lr}
    76fa:	4c05      	ldr	r4, [pc, #20]	; (7710 <_strtoul_r+0x18>)
    76fc:	6824      	ldr	r4, [r4, #0]
    76fe:	6a24      	ldr	r4, [r4, #32]
    7700:	2c00      	cmp	r4, #0
    7702:	d100      	bne.n	7706 <_strtoul_r+0xe>
    7704:	4c03      	ldr	r4, [pc, #12]	; (7714 <_strtoul_r+0x1c>)
    7706:	9400      	str	r4, [sp, #0]
    7708:	f7ff ff6e 	bl	75e8 <_strtoul_l.isra.0>
    770c:	bd16      	pop	{r1, r2, r4, pc}
    770e:	46c0      	nop			; (mov r8, r8)
    7710:	200000b0 	.word	0x200000b0
    7714:	20000114 	.word	0x20000114

00007718 <__submore>:
    7718:	000b      	movs	r3, r1
    771a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    771c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    771e:	3344      	adds	r3, #68	; 0x44
    7720:	000c      	movs	r4, r1
    7722:	429d      	cmp	r5, r3
    7724:	d11c      	bne.n	7760 <__submore+0x48>
    7726:	2680      	movs	r6, #128	; 0x80
    7728:	00f6      	lsls	r6, r6, #3
    772a:	0031      	movs	r1, r6
    772c:	f7fe fdc2 	bl	62b4 <_malloc_r>
    7730:	2800      	cmp	r0, #0
    7732:	d102      	bne.n	773a <__submore+0x22>
    7734:	2001      	movs	r0, #1
    7736:	4240      	negs	r0, r0
    7738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    773a:	0023      	movs	r3, r4
    773c:	6360      	str	r0, [r4, #52]	; 0x34
    773e:	63a6      	str	r6, [r4, #56]	; 0x38
    7740:	3346      	adds	r3, #70	; 0x46
    7742:	781a      	ldrb	r2, [r3, #0]
    7744:	4b10      	ldr	r3, [pc, #64]	; (7788 <__submore+0x70>)
    7746:	54c2      	strb	r2, [r0, r3]
    7748:	0023      	movs	r3, r4
    774a:	3345      	adds	r3, #69	; 0x45
    774c:	781a      	ldrb	r2, [r3, #0]
    774e:	4b0f      	ldr	r3, [pc, #60]	; (778c <__submore+0x74>)
    7750:	54c2      	strb	r2, [r0, r3]
    7752:	782a      	ldrb	r2, [r5, #0]
    7754:	4b0e      	ldr	r3, [pc, #56]	; (7790 <__submore+0x78>)
    7756:	54c2      	strb	r2, [r0, r3]
    7758:	18c0      	adds	r0, r0, r3
    775a:	6020      	str	r0, [r4, #0]
    775c:	2000      	movs	r0, #0
    775e:	e7eb      	b.n	7738 <__submore+0x20>
    7760:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    7762:	0029      	movs	r1, r5
    7764:	0073      	lsls	r3, r6, #1
    7766:	001a      	movs	r2, r3
    7768:	9301      	str	r3, [sp, #4]
    776a:	f000 f92f 	bl	79cc <_realloc_r>
    776e:	1e05      	subs	r5, r0, #0
    7770:	d0e0      	beq.n	7734 <__submore+0x1c>
    7772:	1987      	adds	r7, r0, r6
    7774:	0001      	movs	r1, r0
    7776:	0032      	movs	r2, r6
    7778:	0038      	movs	r0, r7
    777a:	f000 f90a 	bl	7992 <memcpy>
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	6027      	str	r7, [r4, #0]
    7782:	6365      	str	r5, [r4, #52]	; 0x34
    7784:	63a3      	str	r3, [r4, #56]	; 0x38
    7786:	e7e9      	b.n	775c <__submore+0x44>
    7788:	000003ff 	.word	0x000003ff
    778c:	000003fe 	.word	0x000003fe
    7790:	000003fd 	.word	0x000003fd

00007794 <_ungetc_r>:
    7794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7796:	0005      	movs	r5, r0
    7798:	000e      	movs	r6, r1
    779a:	0014      	movs	r4, r2
    779c:	1c4b      	adds	r3, r1, #1
    779e:	d103      	bne.n	77a8 <_ungetc_r+0x14>
    77a0:	2601      	movs	r6, #1
    77a2:	4276      	negs	r6, r6
    77a4:	0030      	movs	r0, r6
    77a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77a8:	2800      	cmp	r0, #0
    77aa:	d004      	beq.n	77b6 <_ungetc_r+0x22>
    77ac:	6983      	ldr	r3, [r0, #24]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d101      	bne.n	77b6 <_ungetc_r+0x22>
    77b2:	f7fe fc13 	bl	5fdc <__sinit>
    77b6:	4b2d      	ldr	r3, [pc, #180]	; (786c <_ungetc_r+0xd8>)
    77b8:	429c      	cmp	r4, r3
    77ba:	d12d      	bne.n	7818 <_ungetc_r+0x84>
    77bc:	686c      	ldr	r4, [r5, #4]
    77be:	2220      	movs	r2, #32
    77c0:	89a3      	ldrh	r3, [r4, #12]
    77c2:	4393      	bics	r3, r2
    77c4:	b21b      	sxth	r3, r3
    77c6:	81a3      	strh	r3, [r4, #12]
    77c8:	b29b      	uxth	r3, r3
    77ca:	075a      	lsls	r2, r3, #29
    77cc:	d413      	bmi.n	77f6 <_ungetc_r+0x62>
    77ce:	06da      	lsls	r2, r3, #27
    77d0:	d5e6      	bpl.n	77a0 <_ungetc_r+0xc>
    77d2:	2708      	movs	r7, #8
    77d4:	423b      	tst	r3, r7
    77d6:	d00a      	beq.n	77ee <_ungetc_r+0x5a>
    77d8:	0021      	movs	r1, r4
    77da:	0028      	movs	r0, r5
    77dc:	f7fe fb7c 	bl	5ed8 <_fflush_r>
    77e0:	2800      	cmp	r0, #0
    77e2:	d1dd      	bne.n	77a0 <_ungetc_r+0xc>
    77e4:	89a3      	ldrh	r3, [r4, #12]
    77e6:	60a0      	str	r0, [r4, #8]
    77e8:	43bb      	bics	r3, r7
    77ea:	81a3      	strh	r3, [r4, #12]
    77ec:	61a0      	str	r0, [r4, #24]
    77ee:	2304      	movs	r3, #4
    77f0:	89a2      	ldrh	r2, [r4, #12]
    77f2:	4313      	orrs	r3, r2
    77f4:	81a3      	strh	r3, [r4, #12]
    77f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    77f8:	b2f7      	uxtb	r7, r6
    77fa:	6863      	ldr	r3, [r4, #4]
    77fc:	b2f6      	uxtb	r6, r6
    77fe:	2a00      	cmp	r2, #0
    7800:	d01b      	beq.n	783a <_ungetc_r+0xa6>
    7802:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    7804:	4293      	cmp	r3, r2
    7806:	da11      	bge.n	782c <_ungetc_r+0x98>
    7808:	6823      	ldr	r3, [r4, #0]
    780a:	3b01      	subs	r3, #1
    780c:	6023      	str	r3, [r4, #0]
    780e:	701f      	strb	r7, [r3, #0]
    7810:	6863      	ldr	r3, [r4, #4]
    7812:	3301      	adds	r3, #1
    7814:	6063      	str	r3, [r4, #4]
    7816:	e7c5      	b.n	77a4 <_ungetc_r+0x10>
    7818:	4b15      	ldr	r3, [pc, #84]	; (7870 <_ungetc_r+0xdc>)
    781a:	429c      	cmp	r4, r3
    781c:	d101      	bne.n	7822 <_ungetc_r+0x8e>
    781e:	68ac      	ldr	r4, [r5, #8]
    7820:	e7cd      	b.n	77be <_ungetc_r+0x2a>
    7822:	4b14      	ldr	r3, [pc, #80]	; (7874 <_ungetc_r+0xe0>)
    7824:	429c      	cmp	r4, r3
    7826:	d1ca      	bne.n	77be <_ungetc_r+0x2a>
    7828:	68ec      	ldr	r4, [r5, #12]
    782a:	e7c8      	b.n	77be <_ungetc_r+0x2a>
    782c:	0021      	movs	r1, r4
    782e:	0028      	movs	r0, r5
    7830:	f7ff ff72 	bl	7718 <__submore>
    7834:	2800      	cmp	r0, #0
    7836:	d0e7      	beq.n	7808 <_ungetc_r+0x74>
    7838:	e7b2      	b.n	77a0 <_ungetc_r+0xc>
    783a:	6921      	ldr	r1, [r4, #16]
    783c:	6822      	ldr	r2, [r4, #0]
    783e:	2900      	cmp	r1, #0
    7840:	d007      	beq.n	7852 <_ungetc_r+0xbe>
    7842:	4291      	cmp	r1, r2
    7844:	d205      	bcs.n	7852 <_ungetc_r+0xbe>
    7846:	1e51      	subs	r1, r2, #1
    7848:	7808      	ldrb	r0, [r1, #0]
    784a:	4286      	cmp	r6, r0
    784c:	d101      	bne.n	7852 <_ungetc_r+0xbe>
    784e:	6021      	str	r1, [r4, #0]
    7850:	e7df      	b.n	7812 <_ungetc_r+0x7e>
    7852:	6423      	str	r3, [r4, #64]	; 0x40
    7854:	0023      	movs	r3, r4
    7856:	3344      	adds	r3, #68	; 0x44
    7858:	6363      	str	r3, [r4, #52]	; 0x34
    785a:	2303      	movs	r3, #3
    785c:	63a3      	str	r3, [r4, #56]	; 0x38
    785e:	0023      	movs	r3, r4
    7860:	3346      	adds	r3, #70	; 0x46
    7862:	63e2      	str	r2, [r4, #60]	; 0x3c
    7864:	701f      	strb	r7, [r3, #0]
    7866:	6023      	str	r3, [r4, #0]
    7868:	2301      	movs	r3, #1
    786a:	e7d3      	b.n	7814 <_ungetc_r+0x80>
    786c:	00008ca0 	.word	0x00008ca0
    7870:	00008cc0 	.word	0x00008cc0
    7874:	00008c80 	.word	0x00008c80

00007878 <_write_r>:
    7878:	b570      	push	{r4, r5, r6, lr}
    787a:	0005      	movs	r5, r0
    787c:	0008      	movs	r0, r1
    787e:	0011      	movs	r1, r2
    7880:	2200      	movs	r2, #0
    7882:	4c06      	ldr	r4, [pc, #24]	; (789c <_write_r+0x24>)
    7884:	6022      	str	r2, [r4, #0]
    7886:	001a      	movs	r2, r3
    7888:	f7fd fac0 	bl	4e0c <_write>
    788c:	1c43      	adds	r3, r0, #1
    788e:	d103      	bne.n	7898 <_write_r+0x20>
    7890:	6823      	ldr	r3, [r4, #0]
    7892:	2b00      	cmp	r3, #0
    7894:	d000      	beq.n	7898 <_write_r+0x20>
    7896:	602b      	str	r3, [r5, #0]
    7898:	bd70      	pop	{r4, r5, r6, pc}
    789a:	46c0      	nop			; (mov r8, r8)
    789c:	20000a5c 	.word	0x20000a5c

000078a0 <_close_r>:
    78a0:	2300      	movs	r3, #0
    78a2:	b570      	push	{r4, r5, r6, lr}
    78a4:	4c06      	ldr	r4, [pc, #24]	; (78c0 <_close_r+0x20>)
    78a6:	0005      	movs	r5, r0
    78a8:	0008      	movs	r0, r1
    78aa:	6023      	str	r3, [r4, #0]
    78ac:	f7fd fae8 	bl	4e80 <_close>
    78b0:	1c43      	adds	r3, r0, #1
    78b2:	d103      	bne.n	78bc <_close_r+0x1c>
    78b4:	6823      	ldr	r3, [r4, #0]
    78b6:	2b00      	cmp	r3, #0
    78b8:	d000      	beq.n	78bc <_close_r+0x1c>
    78ba:	602b      	str	r3, [r5, #0]
    78bc:	bd70      	pop	{r4, r5, r6, pc}
    78be:	46c0      	nop			; (mov r8, r8)
    78c0:	20000a5c 	.word	0x20000a5c

000078c4 <_fstat_r>:
    78c4:	2300      	movs	r3, #0
    78c6:	b570      	push	{r4, r5, r6, lr}
    78c8:	4c06      	ldr	r4, [pc, #24]	; (78e4 <_fstat_r+0x20>)
    78ca:	0005      	movs	r5, r0
    78cc:	0008      	movs	r0, r1
    78ce:	0011      	movs	r1, r2
    78d0:	6023      	str	r3, [r4, #0]
    78d2:	f7fd fad8 	bl	4e86 <_fstat>
    78d6:	1c43      	adds	r3, r0, #1
    78d8:	d103      	bne.n	78e2 <_fstat_r+0x1e>
    78da:	6823      	ldr	r3, [r4, #0]
    78dc:	2b00      	cmp	r3, #0
    78de:	d000      	beq.n	78e2 <_fstat_r+0x1e>
    78e0:	602b      	str	r3, [r5, #0]
    78e2:	bd70      	pop	{r4, r5, r6, pc}
    78e4:	20000a5c 	.word	0x20000a5c

000078e8 <_isatty_r>:
    78e8:	2300      	movs	r3, #0
    78ea:	b570      	push	{r4, r5, r6, lr}
    78ec:	4c06      	ldr	r4, [pc, #24]	; (7908 <_isatty_r+0x20>)
    78ee:	0005      	movs	r5, r0
    78f0:	0008      	movs	r0, r1
    78f2:	6023      	str	r3, [r4, #0]
    78f4:	f7fd facc 	bl	4e90 <_isatty>
    78f8:	1c43      	adds	r3, r0, #1
    78fa:	d103      	bne.n	7904 <_isatty_r+0x1c>
    78fc:	6823      	ldr	r3, [r4, #0]
    78fe:	2b00      	cmp	r3, #0
    7900:	d000      	beq.n	7904 <_isatty_r+0x1c>
    7902:	602b      	str	r3, [r5, #0]
    7904:	bd70      	pop	{r4, r5, r6, pc}
    7906:	46c0      	nop			; (mov r8, r8)
    7908:	20000a5c 	.word	0x20000a5c

0000790c <__locale_ctype_ptr_l>:
    790c:	30ec      	adds	r0, #236	; 0xec
    790e:	6800      	ldr	r0, [r0, #0]
    7910:	4770      	bx	lr
	...

00007914 <__locale_ctype_ptr>:
    7914:	4b04      	ldr	r3, [pc, #16]	; (7928 <__locale_ctype_ptr+0x14>)
    7916:	681b      	ldr	r3, [r3, #0]
    7918:	6a1b      	ldr	r3, [r3, #32]
    791a:	2b00      	cmp	r3, #0
    791c:	d100      	bne.n	7920 <__locale_ctype_ptr+0xc>
    791e:	4b03      	ldr	r3, [pc, #12]	; (792c <__locale_ctype_ptr+0x18>)
    7920:	33ec      	adds	r3, #236	; 0xec
    7922:	6818      	ldr	r0, [r3, #0]
    7924:	4770      	bx	lr
    7926:	46c0      	nop			; (mov r8, r8)
    7928:	200000b0 	.word	0x200000b0
    792c:	20000114 	.word	0x20000114

00007930 <_lseek_r>:
    7930:	b570      	push	{r4, r5, r6, lr}
    7932:	0005      	movs	r5, r0
    7934:	0008      	movs	r0, r1
    7936:	0011      	movs	r1, r2
    7938:	2200      	movs	r2, #0
    793a:	4c06      	ldr	r4, [pc, #24]	; (7954 <_lseek_r+0x24>)
    793c:	6022      	str	r2, [r4, #0]
    793e:	001a      	movs	r2, r3
    7940:	f7fd faa8 	bl	4e94 <_lseek>
    7944:	1c43      	adds	r3, r0, #1
    7946:	d103      	bne.n	7950 <_lseek_r+0x20>
    7948:	6823      	ldr	r3, [r4, #0]
    794a:	2b00      	cmp	r3, #0
    794c:	d000      	beq.n	7950 <_lseek_r+0x20>
    794e:	602b      	str	r3, [r5, #0]
    7950:	bd70      	pop	{r4, r5, r6, pc}
    7952:	46c0      	nop			; (mov r8, r8)
    7954:	20000a5c 	.word	0x20000a5c

00007958 <__ascii_mbtowc>:
    7958:	b082      	sub	sp, #8
    795a:	2900      	cmp	r1, #0
    795c:	d100      	bne.n	7960 <__ascii_mbtowc+0x8>
    795e:	a901      	add	r1, sp, #4
    7960:	1e10      	subs	r0, r2, #0
    7962:	d006      	beq.n	7972 <__ascii_mbtowc+0x1a>
    7964:	2b00      	cmp	r3, #0
    7966:	d006      	beq.n	7976 <__ascii_mbtowc+0x1e>
    7968:	7813      	ldrb	r3, [r2, #0]
    796a:	600b      	str	r3, [r1, #0]
    796c:	7810      	ldrb	r0, [r2, #0]
    796e:	1e43      	subs	r3, r0, #1
    7970:	4198      	sbcs	r0, r3
    7972:	b002      	add	sp, #8
    7974:	4770      	bx	lr
    7976:	2002      	movs	r0, #2
    7978:	4240      	negs	r0, r0
    797a:	e7fa      	b.n	7972 <__ascii_mbtowc+0x1a>

0000797c <memchr>:
    797c:	b2c9      	uxtb	r1, r1
    797e:	1882      	adds	r2, r0, r2
    7980:	4290      	cmp	r0, r2
    7982:	d101      	bne.n	7988 <memchr+0xc>
    7984:	2000      	movs	r0, #0
    7986:	4770      	bx	lr
    7988:	7803      	ldrb	r3, [r0, #0]
    798a:	428b      	cmp	r3, r1
    798c:	d0fb      	beq.n	7986 <memchr+0xa>
    798e:	3001      	adds	r0, #1
    7990:	e7f6      	b.n	7980 <memchr+0x4>

00007992 <memcpy>:
    7992:	2300      	movs	r3, #0
    7994:	b510      	push	{r4, lr}
    7996:	429a      	cmp	r2, r3
    7998:	d100      	bne.n	799c <memcpy+0xa>
    799a:	bd10      	pop	{r4, pc}
    799c:	5ccc      	ldrb	r4, [r1, r3]
    799e:	54c4      	strb	r4, [r0, r3]
    79a0:	3301      	adds	r3, #1
    79a2:	e7f8      	b.n	7996 <memcpy+0x4>

000079a4 <memmove>:
    79a4:	b510      	push	{r4, lr}
    79a6:	4288      	cmp	r0, r1
    79a8:	d902      	bls.n	79b0 <memmove+0xc>
    79aa:	188b      	adds	r3, r1, r2
    79ac:	4298      	cmp	r0, r3
    79ae:	d308      	bcc.n	79c2 <memmove+0x1e>
    79b0:	2300      	movs	r3, #0
    79b2:	429a      	cmp	r2, r3
    79b4:	d007      	beq.n	79c6 <memmove+0x22>
    79b6:	5ccc      	ldrb	r4, [r1, r3]
    79b8:	54c4      	strb	r4, [r0, r3]
    79ba:	3301      	adds	r3, #1
    79bc:	e7f9      	b.n	79b2 <memmove+0xe>
    79be:	5c8b      	ldrb	r3, [r1, r2]
    79c0:	5483      	strb	r3, [r0, r2]
    79c2:	3a01      	subs	r2, #1
    79c4:	d2fb      	bcs.n	79be <memmove+0x1a>
    79c6:	bd10      	pop	{r4, pc}

000079c8 <__malloc_lock>:
    79c8:	4770      	bx	lr

000079ca <__malloc_unlock>:
    79ca:	4770      	bx	lr

000079cc <_realloc_r>:
    79cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ce:	0007      	movs	r7, r0
    79d0:	000d      	movs	r5, r1
    79d2:	0016      	movs	r6, r2
    79d4:	2900      	cmp	r1, #0
    79d6:	d105      	bne.n	79e4 <_realloc_r+0x18>
    79d8:	0011      	movs	r1, r2
    79da:	f7fe fc6b 	bl	62b4 <_malloc_r>
    79de:	0004      	movs	r4, r0
    79e0:	0020      	movs	r0, r4
    79e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79e4:	2a00      	cmp	r2, #0
    79e6:	d103      	bne.n	79f0 <_realloc_r+0x24>
    79e8:	f7fe fc1a 	bl	6220 <_free_r>
    79ec:	0034      	movs	r4, r6
    79ee:	e7f7      	b.n	79e0 <_realloc_r+0x14>
    79f0:	f000 f832 	bl	7a58 <_malloc_usable_size_r>
    79f4:	002c      	movs	r4, r5
    79f6:	4286      	cmp	r6, r0
    79f8:	d9f2      	bls.n	79e0 <_realloc_r+0x14>
    79fa:	0031      	movs	r1, r6
    79fc:	0038      	movs	r0, r7
    79fe:	f7fe fc59 	bl	62b4 <_malloc_r>
    7a02:	1e04      	subs	r4, r0, #0
    7a04:	d0ec      	beq.n	79e0 <_realloc_r+0x14>
    7a06:	0029      	movs	r1, r5
    7a08:	0032      	movs	r2, r6
    7a0a:	f7ff ffc2 	bl	7992 <memcpy>
    7a0e:	0029      	movs	r1, r5
    7a10:	0038      	movs	r0, r7
    7a12:	f7fe fc05 	bl	6220 <_free_r>
    7a16:	e7e3      	b.n	79e0 <_realloc_r+0x14>

00007a18 <_read_r>:
    7a18:	b570      	push	{r4, r5, r6, lr}
    7a1a:	0005      	movs	r5, r0
    7a1c:	0008      	movs	r0, r1
    7a1e:	0011      	movs	r1, r2
    7a20:	2200      	movs	r2, #0
    7a22:	4c06      	ldr	r4, [pc, #24]	; (7a3c <_read_r+0x24>)
    7a24:	6022      	str	r2, [r4, #0]
    7a26:	001a      	movs	r2, r3
    7a28:	f7fd f9ce 	bl	4dc8 <_read>
    7a2c:	1c43      	adds	r3, r0, #1
    7a2e:	d103      	bne.n	7a38 <_read_r+0x20>
    7a30:	6823      	ldr	r3, [r4, #0]
    7a32:	2b00      	cmp	r3, #0
    7a34:	d000      	beq.n	7a38 <_read_r+0x20>
    7a36:	602b      	str	r3, [r5, #0]
    7a38:	bd70      	pop	{r4, r5, r6, pc}
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	20000a5c 	.word	0x20000a5c

00007a40 <__ascii_wctomb>:
    7a40:	1e0b      	subs	r3, r1, #0
    7a42:	d004      	beq.n	7a4e <__ascii_wctomb+0xe>
    7a44:	2aff      	cmp	r2, #255	; 0xff
    7a46:	d904      	bls.n	7a52 <__ascii_wctomb+0x12>
    7a48:	238a      	movs	r3, #138	; 0x8a
    7a4a:	6003      	str	r3, [r0, #0]
    7a4c:	3b8b      	subs	r3, #139	; 0x8b
    7a4e:	0018      	movs	r0, r3
    7a50:	4770      	bx	lr
    7a52:	700a      	strb	r2, [r1, #0]
    7a54:	2301      	movs	r3, #1
    7a56:	e7fa      	b.n	7a4e <__ascii_wctomb+0xe>

00007a58 <_malloc_usable_size_r>:
    7a58:	1f0b      	subs	r3, r1, #4
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	1f18      	subs	r0, r3, #4
    7a5e:	2b00      	cmp	r3, #0
    7a60:	da01      	bge.n	7a66 <_malloc_usable_size_r+0xe>
    7a62:	580b      	ldr	r3, [r1, r0]
    7a64:	18c0      	adds	r0, r0, r3
    7a66:	4770      	bx	lr

00007a68 <__FUNCTION__.13613>:
    7a68:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    7a78:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    7a88:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    7a98:	746c 6320 646d 0000 0dec 0000 0dbc 0000     lt cmd..........
    7aa8:	0db4 0000 0dcc 0000 0dc4 0000 0de4 0000     ................
    7ab8:	0dd4 0000 0ddc 0000                         ........

00007ac0 <__FUNCTION__.13104>:
    7ac0:	6968 5f66 6573 646e 0000 0000               hif_send....

00007acc <__FUNCTION__.13114>:
    7acc:	6968 5f66 7369 0072                         hif_isr.

00007ad4 <__FUNCTION__.13123>:
    7ad4:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00007ae4 <__FUNCTION__.13135>:
    7ae4:	6968 5f66 6572 6563 7669 0065               hif_receive.

00007af0 <__FUNCTION__.13151>:
    7af0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    7b00:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    7b10:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    7b20:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    7b30:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    7b40:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    7b50:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    7b60:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    7b70:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    7b80:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    7b90:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    7ba0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    7bb0:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    7bc0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    7bd0:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    7be0:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    7bf0:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    7c00:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    7c10:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    7c20:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    7c30:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    7c40:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    7c50:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    7c60:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    7c70:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    7c80:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    7c90:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    7ca0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    7cb0:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    7cc0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    7cd0:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    7ce0:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    7cf0:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    7d00:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    7d10:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    7d20:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    7d30:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    7d40:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    7d50:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    7d60:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    7d70:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    7d80:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    7d90:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    7da0:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    7db0:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    7dc0:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    7dd0:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00007de0 <__FUNCTION__.13086>:
    7de0:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00007dec <__FUNCTION__.13115>:
    7dec:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00007dfc <__FUNCTION__.13146>:
    7dfc:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    7e0c:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    7e1c:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    7e2c:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    7e3c:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    7e4c:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    7e5c:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    7e6c:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    7e7c:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    7e8c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    7e9c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    7eac:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    7ebc:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    7ecc:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    7edc:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    7eec:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    7efc:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    7f0c:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    7f1c:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    7f2c:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    7f3c:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    7f4c:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    7f5c:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    7f6c:	3232 303a 3a31 3831 0000 0000 6f4e 2076     22:01:18....Nov 
    7f7c:	3820 3220 3130 0037 7244 7669 7265 6220      8 2017.Driver b
    7f8c:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    7f9c:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    7fac:	2065 6556 7372 6f69 006e 0000               e Version...

00007fb8 <__FUNCTION__.12943>:
    7fb8:	6863 7069 775f 6b61 0065 0000               chip_wake...

00007fc4 <__FUNCTION__.12992>:
    7fc4:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    7fd4:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    7fe4:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    7ff4:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    8004:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    8014:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    8024:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00008034 <__FUNCTION__.12990>:
    8034:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00008040 <__FUNCTION__.12997>:
    8040:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    8050:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    8060:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    8070:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    8080:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    8090:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    80a0:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    80b0:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    80c0:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    80d0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    80e0:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    80f0:	4920 2044 6c25 0a78 0000 0000 1f90 0000      ID %lx.........
    8100:	1f90 0000 1fc0 0000 1f42 0000 1f66 0000     ........B...f...
    8110:	1f74 0000 1fa6 0000 1fa6 0000 1fee 0000     t...............
    8120:	1f26 0000 2028 0000 2028 0000 2028 0000     &...( ..( ..( ..
    8130:	2028 0000 1f82 0000 c9c3 cac4               ( ..........

0000813c <__FUNCTION__.12259>:
    813c:	7073 5f69 6d63 0064                         spi_cmd.

00008144 <__FUNCTION__.12266>:
    8144:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00008154 <__FUNCTION__.12275>:
    8154:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00008160 <__FUNCTION__.12291>:
    8160:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00008170 <__FUNCTION__.12306>:
    8170:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00008180 <__FUNCTION__.12318>:
    8180:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00008190 <__FUNCTION__.12329>:
    8190:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000081a0 <__FUNCTION__.12341>:
    81a0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000081b0 <__FUNCTION__.12354>:
    81b0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000081bc <__FUNCTION__.12375>:
    81bc:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

000081c8 <crc7_syndrome_table>:
    81c8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    81d8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    81e8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    81f8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    8208:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    8218:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    8228:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    8238:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    8248:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    8258:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    8268:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    8278:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    8288:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    8298:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    82a8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    82b8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    82c8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    82d8:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    82e8:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    82f8:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    8308:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    8318:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    8328:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    8338:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    8348:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    8358:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    8368:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    8378:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    8388:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    8398:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    83a8:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    83b8:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    83c8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    83d8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    83e8:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    83f8:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    8408:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    8418:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    8428:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    8438:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    8448:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    8458:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    8468:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    8478:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    8488:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    8498:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    84a8:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    84b8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    84c8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    84d8:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    84e8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    84f8:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    8508:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    8518:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    8528:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    8538:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    8548:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    8558:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    8568:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    8578:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    8588:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    8598:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    85a8:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    85b8:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    85c8:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    85d8:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    85e8:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    85f8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    8608:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    8618:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    8628:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    8638:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    8648:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    8658:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    8668:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    8678:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    8688:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    8698:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    86a8:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    86b8:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    86c8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    86d8:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    86e8:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    86f8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    8708:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    8718:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    8728:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    8738:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    8748:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    8758:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    8768:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    8778:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    8788:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    8798:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    87a8:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    87b8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    87c8:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    87d8:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    87e8:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    87f8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    8808:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    8818:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    8828:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    8838:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    8848:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    8858:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    8868:	1c00 4200 4556 0000 4552 0000 4552 0000     ...BVE..RE..RE..
    8878:	45b4 0000 45b4 0000 456a 0000 455c 0000     .E...E..jE..\E..
    8888:	4570 0000 45a2 0000 4774 0000 4754 0000     pE...E..tG..TG..
    8898:	4754 0000 47e0 0000 4766 0000 4782 0000     TG...G..fG...G..
    88a8:	4758 0000 4790 0000 47d0 0000 2d2d 5720     XG...G...G..-- W
    88b8:	4e49 3143 3035 2030 6577 7461 6568 2072     INC1500 weather 
    88c8:	6c63 6569 746e 6520 6178 706d 656c 2d20     client example -
    88d8:	0d2d 2d0a 202d 4153 444d 3132 585f 4c50     -..-- SAMD21_XPL
    88e8:	4941 454e 5f44 5250 204f 2d2d 0a0d 2d2d     AINED_PRO --..--
    88f8:	4320 6d6f 6970 656c 3a64 4e20 766f 2020      Compiled: Nov  
    8908:	2038 3032 3731 3220 3a32 3531 313a 2037     8 2017 22:15:17 
    8918:	2d2d 000d 616d 6e69 203a 326d 5f6d 6977     --..main: m2m_wi
    8928:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
    8938:	726f 2821 6425 0d29 000a 0000 7461 656d     or!(%d).....atme
    8948:	636c 6e6f 6966 2e67 6f63 006d 0a0d 7250     lconfig.com...Pr
    8958:	766f 7369 6f69 206e 6f4d 6564 7320 6174     ovision Mode sta
    8968:	7472 6465 0d2e 430a 6e6f 656e 7463 7420     rted...Connect t
    8978:	206f 255b 5d73 7620 6169 4120 5b50 7325     o [%s] via AP[%s
    8988:	205d 6e61 2064 6966 6c6c 7520 2070 6874     ] and fill up th
    8998:	2065 6170 6567 0d2e 0d0a 000a 616d 6e69     e page......main
    89a8:	203a 6166 6c69 6465 7420 206f 7263 6165     : failed to crea
    89b8:	6574 5420 5043 6320 696c 6e65 2074 6f73     te TCP client so
    89c8:	6b63 7465 6520 7272 726f 0d21 0000 0000     cket error!.....
    89d8:	616d 6e69 203a 6166 6c69 6465 7420 206f     main: failed to 
    89e8:	6f63 6e6e 6365 2074 6f73 6b63 7465 6520     connect socket e
    89f8:	7272 726f 0d21 0000 6572 6f73 766c 5f65     rror!...resolve_
    8a08:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
    8a18:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
    8a28:	0a0d 0a0d 0000 0000 6e45 6574 2072 6943     ........Enter Ci
    8a38:	7974 4e20 6d61 3a65 0020 0000 0a0d 7325     ty Name: .....%s
    8a48:	0a0d 0a0d 0a0d 0000 4547 2054 642f 7461     ........GET /dat
    8a58:	2f61 2e32 2f35 6577 7461 6568 3f72 3d71     a/2.5/weather?q=
    8a68:	0000 0000 7325 7325 7325 0000 6126 7070     ....%s%s%s..&app
    8a78:	6469 633d 3935 6532 3431 3331 6337 3433     id=c592e14137c34
    8a88:	3137 6166 3639 3732 3462 6634 3636 3934     71fa9627b44f6649
    8a98:	6264 2634 6f6d 6564 783d 6c6d 7526 696e     db4&mode=xml&uni
    8aa8:	7374 693d 706d 7265 6169 206c 5448 5054     ts=imperial HTTP
    8ab8:	312f 312e 0a0d 6f48 7473 203a 7061 2e69     /1.1..Host: api.
    8ac8:	706f 6e65 6577 7461 6568 6d72 7061 6f2e     openweathermap.o
    8ad8:	6772 0a0d 6341 6563 7470 203a 2f2a 0d2a     rg..Accept: */*.
    8ae8:	0d0a 000a 6f73 6b63 7465 635f 3a62 6320     ....socket_cb: c
    8af8:	6e6f 656e 7463 6520 7272 726f 0d21 0000     onnect error!...
    8b08:	616e 656d 003d 0000 6943 7974 203a 0000     name=...City: ..
    8b18:	3e22 0000 7325 0a0d 0000 0000 6574 706d     ">..%s......temp
    8b28:	7265 7461 7275 2065 6176 756c 0065 0000     erature value...
    8b38:	6554 706d 7265 7461 7275 3a65 0020 0000     Temperature: ...
    8b48:	2f4e 0d41 0000 0000 2022 0000 6577 7461     N/A....." ..weat
    8b58:	6568 2072 756e 626d 7265 0000 6557 7461     her number..Weat
    8b68:	6568 2072 6f43 646e 7469 6f69 3a6e 0020     her Condition: .
    8b78:	6f73 6b63 7465 635f 3a62 7220 6365 2076     socket_cb: recv 
    8b88:	7265 6f72 2172 000d 6977 6966 635f 3a62     error!..wifi_cb:
    8b98:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
    8ba8:	4554 0d44 0000 0000 6977 6966 635f 3a62     TED.....wifi_cb:
    8bb8:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
    8bc8:	454e 5443 4445 000d 6572 6f63 6e6e 6365     NECTED..reconnec
    8bd8:	6974 676e 0000 0000 6154 6574 3032 3830     ting....Tate2008
    8be8:	0000 0000 6154 6574 654e 7774 726f 006b     ....TateNetwork.
    8bf8:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
    8c08:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
    8c18:	7525 0a0d 0000 0000 7061 2e69 706f 6e65     %u......api.open
    8c28:	6577 7461 6568 6d72 7061 6f2e 6772 0000     weathermap.org..
    8c38:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
    8c48:	5f49 4552 5053 505f 4f52 4956 4953 4e4f     I_RESP_PROVISION
    8c58:	495f 464e 0d4f 0000 6977 6966 635f 3a62     _INFO...wifi_cb:
    8c68:	7020 6f72 6976 6973 6e6f 6620 6961 656c      provision faile
    8c78:	2164 000d                                   d!..

00008c7c <_global_impure_ptr>:
    8c7c:	00b4 2000                                   ... 

00008c80 <__sf_fake_stderr>:
	...

00008ca0 <__sf_fake_stdin>:
	...

00008cc0 <__sf_fake_stdout>:
	...
    8ce0:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    8cf0:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    8d00:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    8d10:	6665 0000 8d32 0000 8d35 0000 8d38 0000     ef..2...5...8...
    8d20:	2d41 6146 662d 3938 3130 3332 3534 3736     A-Fa-f8901234567
    8d30:	005d 2d2b 3000 0030 5878 4300 5000 534f     ].+-.00.xX.C.POS
    8d40:	5849 2e00 0000                                   IX...

00008d45 <_ctype_>:
    8d45:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    8d55:	2020 2020 2020 2020 2020 2020 2020 2020                     
    8d65:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    8d75:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    8d85:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    8d95:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    8da5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    8db5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    8dc5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00008e48 <_init>:
    8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	46c0      	nop			; (mov r8, r8)
    8e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e4e:	bc08      	pop	{r3}
    8e50:	469e      	mov	lr, r3
    8e52:	4770      	bx	lr

00008e54 <__init_array_start>:
    8e54:	000000dd 	.word	0x000000dd

00008e58 <_fini>:
    8e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e5a:	46c0      	nop			; (mov r8, r8)
    8e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8e5e:	bc08      	pop	{r3}
    8e60:	469e      	mov	lr, r3
    8e62:	4770      	bx	lr

00008e64 <__fini_array_start>:
    8e64:	000000b5 	.word	0x000000b5
